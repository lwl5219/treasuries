<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>

    <title>Chapter 8 Methods</title>
    <meta content="urn:uuid:232c2138-be82-42d4-8a6b-b460372314a4" name="Adept.expected.resource"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>

  


<link href="../../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

</head>
<body>

<div class="calibreMeta">
  <div class="calibreMetaTitle">
  
  
    
    <h1>
      <a href="../../../4bgup-l038f.html">Effective Java, Third Edition
</a>
    </h1>
    
    
  
  </div>
  <div class="calibreMetaAuthor">
    Joshua Bloch

  </div>
</div>

<div class="calibreMain">

  <div class="calibreEbookContent">
    
      <div class="calibreEbNavTop">
        
          <a href="ch7.xhtml" class="calibreAPrev">previous page
</a>
        

        
          <a href="ch9.xhtml" class="calibreANext">next page
</a>
        
      </div>
    

    
      
      <h2 class="h1" id="ch8"><span epub:type="pagebreak" id="page_227" class="calibre15"></span>Chapter 8. Methods
      </h2>
      
      <p class="noindent"><strong class="calibre11">T</strong><small class="calibre13">HIS</small> chapter discusses several aspects of method design: how to treat parameters and return
         values, how to design method signatures, and how to document methods. Much of the
         material in this chapter applies to constructors as well as to methods. Like <a href="ch4.xhtml#ch4" class="calibre8">Chapter 4</a>, this chapter focuses on usability, robustness, and flexibility.
      </p>
      
      <h3 class="h2"><a id="lev49" class="calibre4"></a><strong class="calibre10">Item 49: Check parameters for validity</strong></h3>
      
      <p class="noindent">Most methods and constructors have some restrictions on what values may be passed
         into their parameters. For example, it is not uncommon that index values must be non-negative
         and object references must be non-null. You should clearly document all such restrictions
         and enforce them with checks at the beginning of the method body. This is a special
         case of the general principle that you should attempt to detect errors as soon as
         possible after they occur. Failing to do so makes it less likely that an error will
         be detected and makes it harder to determine the source of an error once it has been
         detected.
      </p>
      
      <p class="indent">If an invalid parameter value is passed to a method and the method checks its parameters
         before execution, it will fail quickly and cleanly with an appropriate exception.
         If the method fails to check its parameters, several things could happen. The method
         could fail with a confusing exception in the midst of processing. Worse, the method
         could return normally but silently compute the wrong result. Worst of all, the method
         could return normally but leave some object in a compromised state, causing an error
         at some unrelated point in the code at some undetermined time in the future. In other
         words, failure to validate parameters, can result in a violation of <em class="calibre9">failure atomicity</em> (<a href="ch10.xhtml#lev76" class="calibre8">Item 76</a>).
      </p>
      
      <p class="indent">For public and protected methods, use the Javadoc <code class="calibre12">@throws</code> tag to document the exception that will be thrown if a restriction on parameter values
         is violated <span epub:type="pagebreak" id="page_228"></span>(<a href="ch10.xhtml#lev74" class="calibre8">Item 74</a>). Typically, the resulting exception will be <code class="calibre12">IllegalArgumentException</code>, <code class="calibre12">IndexOutOfBoundsException</code>, or <code class="calibre12">NullPointerException</code> (<a href="ch10.xhtml#lev72" class="calibre8">Item 72</a>). Once you’ve documented the restrictions on a method’s parameters and you’ve documented
         the exceptions that will be thrown if these restrictions are violated, it is a simple
         matter to enforce the restrictions. Here’s a typical example:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex1a" id="pch8ex1" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * Returns a BigInteger whose value is (this mod m). This method<br class="calibre7"/>
          * differs from the remainder method in that it always returns a<br class="calibre7"/>
          * non-negative BigInteger.<br class="calibre7"/>
          *<br class="calibre7"/>
          * @param m the modulus, which must be positive<br class="calibre7"/>
          * @return this mod m<br class="calibre7"/>
          * <strong class="calibre11">@throws ArithmeticException if m is less than or equal to 0</strong><br class="calibre7"/>
          */<br class="calibre7"/>
         <strong class="calibre11">public</strong> BigInteger mod(BigInteger m) {<br class="calibre7"/>
             <strong class="calibre11">if (m.signum() &lt;= 0)</strong><br class="calibre7"/>
                 <strong class="calibre11">throw new ArithmeticException("Modulus &lt;= 0: " + m);</strong><br class="calibre7"/>
             ... // Do the computation<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">Note that the doc comment does <em class="calibre9">not</em> say “<code class="calibre12">mod</code> throws <code class="calibre12">NullPointerException</code> if <code class="calibre12">m</code> is null,” even though the method does exactly that, as a byproduct of invoking <code class="calibre12">m.signum()</code>. This exception <em class="calibre9">is</em> documented in the class-level doc comment for the enclosing <code class="calibre12">BigInteger</code> class. The class-level comment applies to all parameters in all of the class’s public
         methods. This is a good way to avoid the clutter of documenting every <code class="calibre12">NullPointerException</code> on every method individually. It may be combined with the use of <code class="calibre12">@Nullable</code> or a similar annotation to indicate that a particular parameter may be null, but
         this practice is not standard, and multiple annotations are in use for this purpose.
      </p>
      
      <p class="indent"><strong class="calibre11">The</strong> <code class="calibre12"><strong class="calibre11">Objects.requireNonNull</strong></code> <strong class="calibre11">method, added in Java 7, is flexible and convenient, so there’s no reason to perform
            null checks manually anymore.</strong> You can specify your own exception detail message if you wish. The method returns
         its input, so you can perform a null check at the same time as you use a value:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex2a" id="pch8ex2" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Inline use of Java's null-checking facility</strong><br class="calibre7"/>
         this.strategy = Objects.requireNonNull(strategy, "strategy");
      </p>
      
      <p class="noindent">You can also ignore the return value and use <code class="calibre12">Objects.requireNonNull</code> as a freestanding null check where that suits your needs.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_229"></span>In Java 9, a range-checking facility was added to <code class="calibre12">java.util.Objects</code>. This facility consists of three methods: <code class="calibre12">checkFromIndexSize</code>, <code class="calibre12">checkFromToIndex</code>, and <code class="calibre12">checkIndex</code>. This facility is not as flexible as the null-checking method. It doesn’t let you
         specify your own exception detail message, and it is designed solely for use on list
         and array indices. It does not handle closed ranges (which contain both of their endpoints).
         But if it does what you need, it’s a useful convenience.
      </p>
      
      <p class="indent">For an unexported method, you, as the package author, control the circumstances under
         which the method is called, so you can and should ensure that only valid parameter
         values are ever passed in. Therefore, nonpublic methods can check their parameters
         using <em class="calibre9">assertions,</em> as shown below:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex3a" id="pch8ex3" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Private helper function for a recursive sort</strong><br class="calibre7"/>
         <strong class="calibre11">private</strong> static void sort(long a[], int offset, int length) {<br class="calibre7"/>
             <strong class="calibre11">assert</strong> a != null;<br class="calibre7"/>
             <strong class="calibre11">assert</strong> offset &gt;= 0 &amp;&amp; offset &lt;= a.length;<br class="calibre7"/>
             <strong class="calibre11">assert</strong> length &gt;= 0 &amp;&amp; length &lt;= a.length - offset;<br class="calibre7"/>
             ... // Do the computation<br class="calibre7"/>
         }
      </p>
      
      <p class="noindent">In essence, these assertions are claims that the asserted condition <em class="calibre9">will</em> be true, regardless of how the enclosing package is used by its clients. Unlike normal
         validity checks, assertions throw <code class="calibre12">AssertionError</code> if they fail. And unlike normal validity checks, they have no effect and essentially
         no cost unless you enable them, which you do by passing the <code class="calibre12">-ea</code> (or <code class="calibre12">-enableassertions</code>) flag to the <code class="calibre12">java</code> command. For more information on assertions, see the tutorial [<a href="ref.xhtml#rAsserts" class="calibre8">Asserts</a>].
      </p>
      
      <p class="indent">It is particularly important to check the validity of parameters that are not used
         by a method, but stored for later use. For example, consider the static factory method
         on page 101, which takes an <code class="calibre12">int</code> array and returns a <code class="calibre12">List</code> view of the array. If a client were to pass in <code class="calibre12">null</code>, the method would throw a <code class="calibre12">NullPointerException</code> because the method has an explicit check (the call to <code class="calibre12">Objects.requireNonNull</code>). Had the check been omitted, the method would return a reference to a newly created
         <code class="calibre12">List</code> instance that would throw a <code class="calibre12">NullPointerException</code> as soon as a client attempted to use it. By that time, the origin of the <code class="calibre12">List</code> instance might be difficult to determine, which could greatly complicate the task
         of debugging.
      </p>
      
      <p class="indent">Constructors represent a special case of the principle that you should check the validity
         of parameters that are to be stored away for later use. It is critical to check the
         validity of constructor parameters to prevent the construction of an object that violates
         its class invariants.
      </p>
      
      <p class="indent">There are exceptions to the rule that you should explicitly check a method’s parameters
         before performing its computation. An important exception is the case <span epub:type="pagebreak" id="page_230"></span>in which the validity check would be expensive or impractical <em class="calibre9">and</em> the check is performed implicitly in the process of doing the computation. For example,
         consider a method that sorts a list of objects, such as <code class="calibre12">Collections.sort(List)</code>. All of the objects in the list must be mutually comparable. In the process of sorting
         the list, every object in the list will be compared to some other object in the list.
         If the objects aren’t mutually comparable, one of these comparisons will throw a <code class="calibre12">ClassCastException</code>, which is exactly what the <code class="calibre12">sort</code> method should do. Therefore, there would be little point in checking ahead of time
         that the elements in the list were mutually comparable. Note, however, that indiscriminate
         reliance on implicit validity checks can result in the loss of <em class="calibre9">failure atomicity</em> (<a href="ch10.xhtml#lev76" class="calibre8">Item 76</a>).
      </p>
      
      <p class="indent">Occasionally, a computation implicitly performs a required validity check but throws
         the wrong exception if the check fails. In other words, the exception that the computation
         would naturally throw as the result of an invalid parameter value doesn’t match the
         exception that the method is documented to throw. Under these circumstances, you should
         use the <em class="calibre9">exception translation</em> idiom, described in <a href="ch10.xhtml#lev73" class="calibre8">Item 73</a>, to translate the natural exception into the correct one.
      </p>
      
      <p class="indent">Do not infer from this item that arbitrary restrictions on parameters are a good thing.
         On the contrary, you should design methods to be as general as it is practical to
         make them. The fewer restrictions that you place on parameters, the better, assuming
         the method can do something reasonable with all of the parameter values that it accepts.
         Often, however, some restrictions are intrinsic to the abstraction being implemented.
      </p>
      
      <p class="indent">To summarize, each time you write a method or constructor, you should think about
         what restrictions exist on its parameters. You should document these restrictions
         and enforce them with explicit checks at the beginning of the method body. It is important
         to get into the habit of doing this. The modest work that it entails will be paid
         back with interest the first time a validity check fails.
      </p>
      
      <h3 class="h2"><a id="lev50" class="calibre4"></a><span epub:type="pagebreak" id="page_231" class="calibre15"></span><strong class="calibre10">Item 50: Make defensive copies when needed</strong></h3>
      
      <p class="noindent">One thing that makes Java a pleasure to use is that it is a <em class="calibre9">safe language</em>. This means that in the absence of native methods it is immune to buffer overruns,
         array overruns, wild pointers, and other memory corruption errors that plague unsafe
         languages such as C and C++. In a safe language, it is possible to write classes and
         to know with certainty that their invariants will hold, no matter what happens in
         any other part of the system. This is not possible in languages that treat all of
         memory as one giant array.
      </p>
      
      <p class="indent">Even in a safe language, you aren’t insulated from other classes without some effort
         on your part. <strong class="calibre11">You must program defensively, with the assumption that clients of your class will
            do their best to destroy its invariants.</strong> This is increasingly true as people try harder to break the security of systems,
         but more commonly, your class will have to cope with unexpected behavior resulting
         from the honest mistakes of well-intentioned programmers. Either way, it is worth
         taking the time to write classes that are robust in the face of ill-behaved clients.
      </p>
      
      <p class="indent">While it is impossible for another class to modify an object’s internal state without
         some assistance from the object, it is surprisingly easy to provide such assistance
         without meaning to do so. For example, consider the following class, which purports
         to represent an immutable time period:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex4a" id="pch8ex4" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Broken "immutable" time period class</strong><br class="calibre7"/>
         public final class Period {<br class="calibre7"/>
             private final Date start;<br class="calibre7"/>
             private final Date end;<br class="calibre7"/>
         <br class="calibre7"/>
             /**<br class="calibre7"/>
              * @param  start the beginning of the period<br class="calibre7"/>
              * @param  end the end of the period; must not precede start<br class="calibre7"/>
              * @throws IllegalArgumentException if start is after end<br class="calibre7"/>
              * @throws NullPointerException if start or end is null<br class="calibre7"/>
              */<br class="calibre7"/>
             public Period(Date start, Date end) {<br class="calibre7"/>
                 if (start.compareTo(end) &gt; 0)<br class="calibre7"/>
                     throw new IllegalArgumentException(<br class="calibre7"/>
                         start + " after " + end);<br class="calibre7"/>
                 this.start = start;<br class="calibre7"/>
                 this.end   = end;<br class="calibre7"/>
             }<br class="calibre7"/>
         <br class="calibre7"/>
             public Date start() {<br class="calibre7"/>
                 return start;<br class="calibre7"/>
             }<br class="calibre7"/>
         <span epub:type="pagebreak" id="page_232"></span>
         <br class="calibre7"/>
             public Date end() {<br class="calibre7"/>
                 return end;<br class="calibre7"/>
             }<br class="calibre7"/>
         <br class="calibre7"/>
             ...    // Remainder omitted<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">At first glance, this class may appear to be immutable and to enforce the invariant
         that the start of a period does not follow its end. It is, however, easy to violate
         this invariant by exploiting the fact that <code class="calibre12">Date</code> is mutable:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex5a" id="pch8ex5" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Attack the internals of a Period instance</strong><br class="calibre7"/>
         Date start = new Date();<br class="calibre7"/>
         Date end = new Date();<br class="calibre7"/>
         Period p = new Period(start, end);<br class="calibre7"/>
         end.setYear(78);  <strong class="calibre11">// Modifies internals of p!</strong></p>
      
      <p class="indent">As of Java 8, the obvious way to fix this problem is to use <code class="calibre12">Instant</code> (or <code class="calibre12">Local-DateTime</code> or <code class="calibre12">ZonedDateTime</code>) in place of a <code class="calibre12">Date</code> because <code class="calibre12">Instant</code> (and the other <code class="calibre12">java.time</code> classes) are immutable (<a href="ch4.xhtml#lev17" class="calibre8">Item 17</a>). <code class="calibre12"><strong class="calibre11">Date</strong></code> <strong class="calibre11">is obsolete and should no longer be used in new code.</strong> That said, the problem still exists: there are times when you’ll have to use mutable
         value types in your APIs and internal representations, and the techniques discussed
         in this item are appropriate for those times.
      </p>
      
      <p class="indent">To protect the internals of a <code class="calibre12">Period</code> instance from this sort of attack, <strong class="calibre11">it is essential to make a</strong> <em class="calibre9"><strong class="calibre11">defensive copy</strong></em> <strong class="calibre11">of each mutable parameter to the constructor</strong> and to use the copies as components of the <code class="calibre12">Period</code> instance in place of the originals:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex6a" id="pch8ex6" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Repaired constructor - makes defensive copies of parameters</strong><br class="calibre7"/>
         public Period(Date start, Date end) {<br class="calibre7"/>
             this.start = new Date(start.getTime());<br class="calibre7"/>
             this.end   = new Date(end.getTime());<br class="calibre7"/>
         <br class="calibre7"/>
             if (this.start.compareTo(this.end) &gt; 0)<br class="calibre7"/>
               throw new IllegalArgumentException(<br class="calibre7"/>
                   this.start + " after " + this.end);<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">With the new constructor in place, the previous attack will have no effect on the
         <code class="calibre12">Period</code> instance. Note that <strong class="calibre11">defensive copies are made</strong> <em class="calibre9"><strong class="calibre11">before</strong></em> <strong class="calibre11">checking the validity of the parameters (<a href="ch8.xhtml#lev49" class="calibre8">Item 49</a>), and the validity check is performed on the copies rather than on the originals.</strong> While this may seem unnatural, it is necessary. It protects the class against changes
         to the parameters from another <span epub:type="pagebreak" id="page_233"></span>thread during the <em class="calibre9">window of vulnerability</em> between the time the parameters are checked and the time they are copied. In the
         computer security community, this is known as a <em class="calibre9">time-of-check/time-of-use</em> or <em class="calibre9">TOCTOU</em> attack [<a href="ref.xhtml#rViega01" class="calibre8">Viega01</a>].
      </p>
      
      <p class="indent">Note also that we did not use <code class="calibre12">Date</code>’s <code class="calibre12">clone</code> method to make the defensive copies. Because <code class="calibre12">Date</code> is nonfinal, the <code class="calibre12">clone</code> method is not guaranteed to return an object whose class is <code class="calibre12">java.util.Date</code>: it could return an instance of an untrusted subclass that is specifically designed
         for malicious mischief. Such a subclass could, for example, record a reference to
         each instance in a private static list at the time of its creation and allow the attacker
         to access this list. This would give the attacker free rein over all instances. To
         prevent this sort of attack, <strong class="calibre11">do not use the</strong> <code class="calibre12"><strong class="calibre11">clone</strong></code> <strong class="calibre11">method to make a defensive copy of a parameter whose type is subclassable by untrusted
            parties.</strong></p>
      
      <p class="indent">While the replacement constructor successfully defends against the previous attack,
         it is still possible to mutate a <code class="calibre12">Period</code> instance, because its accessors offer access to its mutable internals:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex7a" id="pch8ex7" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Second attack on the internals of a Period instance</strong><br class="calibre7"/>
         Date start = new Date();<br class="calibre7"/>
         Date end = new Date();<br class="calibre7"/>
         Period p = new Period(start, end);<br class="calibre7"/>
         p.end().setYear(78);  <strong class="calibre11">// Modifies internals of p!</strong></p>
      
      <p class="indent">To defend against the second attack, merely modify the accessors to <strong class="calibre11">return defensive copies of mutable internal fields:</strong></p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex8a" id="pch8ex8" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Repaired accessors - make defensive copies of internal fields</strong><br class="calibre7"/>
         public Date start() {<br class="calibre7"/>
             return new Date(start.getTime());<br class="calibre7"/>
         }<br class="calibre7"/>
         <br class="calibre7"/>
         public Date end() {<br class="calibre7"/>
             return new Date(end.getTime());<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">With the new constructor and the new accessors in place, <code class="calibre12">Period</code> is truly immutable. No matter how malicious or incompetent a programmer, there is
         simply no way to violate the invariant that the start of a period does not follow
         its end (without resorting to extralinguistic means such as native methods and reflection).
         This is true because there is no way for any class other than <code class="calibre12">Period</code> itself to gain access to either of the mutable fields in a <code class="calibre12">Period</code> instance. These fields are truly encapsulated within the object.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_234"></span>In the accessors, unlike the constructor, it would be permissible to use the <code class="calibre12">clone</code> method to make the defensive copies. This is so because we know that the class of
         <code class="calibre12">Period</code>’s internal <code class="calibre12">Date</code> objects is <code class="calibre12">java.util.Date</code>, and not some untrusted subclass. That said, you are generally better off using a
         constructor or static factory to copy an instance, for reasons outlined in <a href="ch3.xhtml#lev13" class="calibre8">Item 13</a>.
      </p>
      
      <p class="indent">Defensive copying of parameters is not just for immutable classes. Any time you write
         a method or constructor that stores a reference to a client-provided object in an
         internal data structure, think about whether the client-provided object is potentially
         mutable. If it is, think about whether your class could tolerate a change in the object
         after it was entered into the data structure. If the answer is no, you must defensively
         copy the object and enter the copy into the data structure in place of the original.
         For example, if you are considering using a client-provided object reference as an
         element in an internal <code class="calibre12">Set</code> instance or as a key in an internal <code class="calibre12">Map</code> instance, you should be aware that the invariants of the set or map would be corrupted
         if the object were modified after it is inserted.
      </p>
      
      <p class="indent">The same is true for defensive copying of internal components prior to returning them
         to clients. Whether or not your class is immutable, you should think twice before
         returning a reference to an internal component that is mutable. Chances are, you should
         return a defensive copy. Remember that nonzero-length arrays are always mutable. Therefore,
         you should always make a defensive copy of an internal array before returning it to
         a client. Alternatively, you could return an immutable view of the array. Both of
         these techniques are shown in <a href="ch4.xhtml#lev15" class="calibre8">Item 15</a>.
      </p>
      
      <p class="indent">Arguably, the real lesson in all of this is that you should, where possible, use immutable
         objects as components of your objects so that you that don’t have to worry about defensive
         copying (<a href="ch4.xhtml#lev17" class="calibre8">Item 17</a>). In the case of our <code class="calibre12">Period</code> example, use <code class="calibre12">Instant</code> (or <code class="calibre12">LocalDateTime</code> or <code class="calibre12">ZonedDateTime</code>), unless you’re using a release prior to Java 8. If you are using an earlier release,
         one option is to store the primitive <code class="calibre12">long</code> returned by <code class="calibre12">Date.getTime()</code> in place of a <code class="calibre12">Date</code> reference.
      </p>
      
      <p class="indent">There may be a performance penalty associated with defensive copying and it isn’t
         always justified. If a class trusts its caller not to modify an internal component,
         perhaps because the class and its client are both part of the same package, then it
         may be appropriate to dispense with defensive copying. Under these circumstances,
         the class documentation should make it clear that the caller must not modify the affected
         parameters or return values.
      </p>
      
      <p class="indent">Even across package boundaries, it is not always appropriate to make a defensive copy
         of a mutable parameter before integrating it into an object. There are some methods
         and constructors whose invocation indicates an explicit <em class="calibre9">handoff</em> of the object referenced by a parameter. When invoking such a method, the client
         <span epub:type="pagebreak" id="page_235"></span>promises that it will no longer modify the object directly. A method or constructor
         that expects to take ownership of a client-provided mutable object must make this
         clear in its documentation.
      </p>
      
      <p class="indent">Classes containing methods or constructors whose invocation indicates a transfer of
         control cannot defend themselves against malicious clients. Such classes are acceptable
         only when there is mutual trust between a class and its client or when damage to the
         class’s invariants would harm no one but the client. An example of the latter situation
         is the wrapper class pattern (<a href="ch4.xhtml#lev18" class="calibre8">Item 18</a>). Depending on the nature of the wrapper class, the client could destroy the class’s
         invariants by directly accessing an object after it has been wrapped, but this typically
         would harm only the client.
      </p>
      
      <p class="indent">In summary, if a class has mutable components that it gets from or returns to its
         clients, the class must defensively copy these components. If the cost of the copy
         would be prohibitive <em class="calibre9">and</em> the class trusts its clients not to modify the components inappropriately, then the
         defensive copy may be replaced by documentation outlining the client’s responsibility
         not to modify the affected components.
      </p>
      
      <h3 class="h2"><a id="lev51" class="calibre4"></a><span epub:type="pagebreak" id="page_236" class="calibre15"></span><strong class="calibre10">Item 51: Design method signatures carefully</strong></h3>
      
      <p class="noindent">This item is a grab bag of API design hints that don’t quite deserve items of their
         own. Taken together, they’ll help make your API easier to learn and use and less prone
         to errors.
      </p>
      
      <p class="indent"><strong class="calibre11">Choose method names carefully.</strong> Names should always obey the standard naming conventions (<a href="ch9.xhtml#lev68" class="calibre8">Item 68</a>). Your primary goal should be to choose names that are understandable and consistent
         with other names in the same package. Your secondary goal should be to choose names
         consistent with the broader consensus, where it exists. Avoid long method names. When
         in doubt, look to the Java library APIs for guidance. While there are plenty of inconsistencies—inevitable,
         given the size and scope of these libraries—there is also a fair amount of consensus.
      </p>
      
      <p class="indent"><strong class="calibre11">Don’t go overboard in providing convenience methods.</strong> Every method should “pull its weight.” Too many methods make a class difficult to
         learn, use, document, test, and maintain. This is doubly true for interfaces, where
         too many methods complicate life for implementors as well as users. For each action
         supported by your class or interface, provide a fully functional method. Consider
         providing a “shorthand” only if it will be used often. <strong class="calibre11">When in doubt, leave it out.</strong></p>
      
      <p class="indent"><strong class="calibre11">Avoid long parameter lists.</strong> Aim for four parameters or fewer. Most programmers can’t remember longer parameter
         lists. If many of your methods exceed this limit, your API won’t be usable without
         constant reference to its documentation. Modern IDEs help, but you are still much
         better off with short parameter lists. <strong class="calibre11">Long sequences of identically typed parameters are especially harmful.</strong> Not only won’t users be able to remember the order of the parameters, but when they
         transpose parameters accidentally, their programs will still compile and run. They
         just won’t do what their authors intended.
      </p>
      
      <p class="indent">There are three techniques for shortening overly long parameter lists. One is to break
         the method up into multiple methods, each of which requires only a subset of the parameters.
         If done carelessly, this can lead to too many methods, but it can also help <em class="calibre9">reduce</em> the method count by increasing orthogonality. For example, consider the <code class="calibre12">java.util.List</code> interface. It does not provide methods to find the first or last index of an element
         in a sublist, both of which would require three parameters. Instead it provides the
         <code class="calibre12">subList</code> method, which takes two parameters and returns a <em class="calibre9">view</em> of a sublist. This method can be combined with the <code class="calibre12">indexOf</code> or <code class="calibre12">lastIndexOf</code> method, each of which has a single parameter, to yield the desired functionality.
         Moreover, the <code class="calibre12">subList</code> method can be combined with <em class="calibre9">any</em> method that operates on a <code class="calibre12">List</code> instance to perform arbitrary computations on sublists. The resulting API has a very
         high power-to-weight ratio.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_237"></span>A second technique for shortening long parameter lists is to create <em class="calibre9">helper classes</em> to hold groups of parameters. Typically these helper classes are static member classes
         (<a href="ch4.xhtml#lev24" class="calibre8">Item 24</a>). This technique is recommended if a frequently occurring sequence of parameters
         is seen to represent some distinct entity. For example, suppose you are writing a
         class representing a card game, and you find yourself constantly passing a sequence
         of two parameters representing a card’s rank and its suit. Your API, as well as the
         internals of your class, would probably benefit if you added a helper class to represent
         a card and replaced every occurrence of the parameter sequence with a single parameter
         of the helper class.
      </p>
      
      <p class="indent">A third technique that combines aspects of the first two is to adapt the Builder pattern
         (<a href="ch2.xhtml#lev2" class="calibre8">Item 2</a>) from object construction to method invocation. If you have a method with many parameters,
         especially if some of them are optional, it can be beneficial to define an object
         that represents all of the parameters and to allow the client to make multiple “setter”
         calls on this object, each of which sets a single parameter or a small, related group.
         Once the desired parameters have been set, the client invokes the object’s “execute”
         method, which does any final validity checks on the parameters and performs the actual
         computation.
      </p>
      
      <p class="indent"><strong class="calibre11">For parameter types, favor interfaces over classes</strong> (<a href="ch9.xhtml#lev64" class="calibre8">Item 64</a>). If there is an appropriate interface to define a parameter, use it in favor of
         a class that implements the interface. For example, there is no reason to ever write
         a method that takes <code class="calibre12">HashMap</code> on input—use <code class="calibre12">Map</code> instead. This lets you pass in a <code class="calibre12">HashMap</code>, a <code class="calibre12">TreeMap</code>, a <code class="calibre12">ConcurrentHashMap</code>, a submap of a <code class="calibre12">TreeMap</code>, or any <code class="calibre12">Map</code> implementation yet to be written. By using a class instead of an interface, you restrict
         your client to a particular implementation and force an unnecessary and potentially
         expensive copy operation if the input data happens to exist in some other form.
      </p>
      
      <p class="indent"><strong class="calibre11">Prefer two-element enum types to</strong> <code class="calibre12"><strong class="calibre11">boolean</strong></code> <strong class="calibre11">parameters,</strong> unless the meaning of the boolean is clear from the method name. Enums make your
         code easier to read and to write. Also, they make it easy to add more options later.
         For example, you might have a <code class="calibre12">Thermometer</code> type with a static factory that takes this enum:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex9a" id="pch8ex9" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">public enum TemperatureScale { FAHRENHEIT, CELSIUS }</p>
      
      <p class="noindent">Not only does <code class="calibre12">Thermometer.newInstance(TemperatureScale.CELSIUS)</code> make a lot more sense than <code class="calibre12">Thermometer.newInstance(true)</code>, but you can add <code class="calibre12">KELVIN</code> to <code class="calibre12">TemperatureScale</code> in a future release without having to add a new static factory to <code class="calibre12">Thermometer</code>. Also, you can refactor temperature-scale dependencies into methods on the enum constants
         (<a href="ch6.xhtml#lev34" class="calibre8">Item 34</a>). For example, each scale constant could have a method that took a <code class="calibre12">double</code> value and converted it to Celsius.
      </p>
      
      <h3 class="h2"><a id="lev52" class="calibre4"></a><span epub:type="pagebreak" id="page_238" class="calibre15"></span><strong class="calibre10">Item 52: Use overloading judiciously</strong></h3>
      
      <p class="noindent">The following program is a well-intentioned attempt to classify collections according
         to whether they are sets, lists, or some other kind of collection:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex10a" id="pch8ex10" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Broken! - What does this program print?</strong><br class="calibre7"/>
         public class CollectionClassifier {<br class="calibre7"/>
             public static String classify(Set&lt;?&gt; s) {<br class="calibre7"/>
                 return "Set";<br class="calibre7"/>
             }<br class="calibre7"/>
         <br class="calibre7"/>
             public static String classify(List&lt;?&gt; lst) {<br class="calibre7"/>
                 return "List";<br class="calibre7"/>
             }<br class="calibre7"/>
         <br class="calibre7"/>
             public static String classify(Collection&lt;?&gt; c) {<br class="calibre7"/>
                 return "Unknown Collection";<br class="calibre7"/>
             }<br class="calibre7"/>
         <br class="calibre7"/>
             public static void main(String[] args) {<br class="calibre7"/>
                 Collection&lt;?&gt;[] collections = {<br class="calibre7"/>
                     new HashSet&lt;String&gt;(),<br class="calibre7"/>
                     new ArrayList&lt;BigInteger&gt;(),<br class="calibre7"/>
                     new HashMap&lt;String, String&gt;().values()<br class="calibre7"/>
                 };<br class="calibre7"/>
         <br class="calibre7"/>
                 for (Collection&lt;?&gt; c : collections)<br class="calibre7"/>
                     System.out.println(classify(c));<br class="calibre7"/>
             }<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">You might expect this program to print <code class="calibre12">Set</code>, followed by <code class="calibre12">List</code> and <code class="calibre12">Unknown Collection</code>, but it doesn’t. It prints <code class="calibre12">Unknown Collection</code> three times. Why does this happen? Because the <code class="calibre12">classify</code> method is <em class="calibre9">overloaded</em>, and <strong class="calibre11">the choice of which overloading to invoke is made at compile time.</strong> For all three iterations of the loop, the compile-time type of the parameter is the
         same: <code class="calibre12">Collection&lt;?&gt;</code>. The runtime type is different in each iteration, but this does not affect the choice
         of overloading. Because the compile-time type of the parameter is <code class="calibre12">Collection&lt;?&gt;</code>, the only applicable overloading is the third one, <code class="calibre12">classify(Collection&lt;?&gt;)</code>, and this overloading is invoked in each iteration of the loop.
      </p>
      
      <p class="indent">The behavior of this program is counterintuitive because <strong class="calibre11">selection among overloaded methods is static, while selection among overridden methods
            is dynamic.</strong> The correct version of an <em class="calibre9">overridden</em> method is chosen at runtime, <span epub:type="pagebreak" id="page_239"></span>based on the runtime type of the object on which the method is invoked. As a reminder,
         a method is overridden when a subclass contains a method declaration with the same
         signature as a method declaration in an ancestor. If an instance method is overridden
         in a subclass and this method is invoked on an instance of the subclass, the subclass’s
         <em class="calibre9">overriding method</em> executes, regardless of the compile-time type of the subclass instance. To make this
         concrete, consider the following program:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex11a" id="pch8ex11" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">class Wine {<br class="calibre7"/>
             String name() { return "wine"; }<br class="calibre7"/>
         }<br class="calibre7"/>
         <br class="calibre7"/>
         class SparklingWine extends Wine {<br class="calibre7"/>
             @Override String name() { return "sparkling wine"; }<br class="calibre7"/>
         }<br class="calibre7"/>
         <br class="calibre7"/>
         class Champagne extends SparklingWine {<br class="calibre7"/>
             @Override String name() { return "champagne"; }<br class="calibre7"/>
         }<br class="calibre7"/>
         <br class="calibre7"/>
         public class Overriding {<br class="calibre7"/>
             public static void main(String[] args) {<br class="calibre7"/>
                 List&lt;Wine&gt; wineList = List.of(<br class="calibre7"/>
                     new Wine(), new SparklingWine(), new Champagne());<br class="calibre7"/>
         <br class="calibre7"/>
                 for (Wine wine : wineList)<br class="calibre7"/>
                     System.out.println(wine.name());<br class="calibre7"/>
             }<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">The <code class="calibre12">name</code> method is declared in class <code class="calibre12">Wine</code> and overridden in subclasses <code class="calibre12">SparklingWine</code> and <code class="calibre12">Champagne</code>. As you would expect, this program prints out <code class="calibre12">wine</code>, <code class="calibre12">sparkling wine</code>, and <code class="calibre12">champagne</code>, even though the compile-time type of the instance is <code class="calibre12">Wine</code> in each iteration of the loop. The compile-time type of an object has no effect on
         which method is executed when an overridden method is invoked; the “most specific”
         overriding method always gets executed. Compare this to overloading, where the runtime
         type of an object has no effect on which overloading is executed; the selection is
         made at compile time, based entirely on the compile-time types of the parameters.
      </p>
      
      <p class="indent">In the <code class="calibre12">CollectionClassifier</code> example, the intent of the program was to discern the type of the parameter by dispatching
         automatically to the appropriate method overloading based on the runtime type of the
         parameter, just as the <code class="calibre12">name</code> method did in the <code class="calibre12">Wine</code> example. Method overloading simply does not provide this <span epub:type="pagebreak" id="page_240"></span>functionality. Assuming a static method is required, the best way to fix the <code class="calibre12">CollectionClassifier</code> program is to replace all three overloadings of <code class="calibre12">classify</code> with a single method that does explicit <code class="calibre12">instanceof</code> tests:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex12a" id="pch8ex12" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">public static String classify(Collection&lt;?&gt; c) {<br class="calibre7"/>
             return c instanceof Set  ? "Set" :<br class="calibre7"/>
                    c instanceof List ? "List" : "Unknown Collection";<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">Because overriding is the norm and overloading is the exception, overriding sets people’s
         expectations for the behavior of method invocation. As demonstrated by the <code class="calibre12">CollectionClassifier</code> example, overloading can easily confound these expectations. It is bad practice to
         write code whose behavior is likely to confuse programmers. This is especially true
         for APIs. If the typical user of an API does not know which of several method overloadings
         will get invoked for a given set of parameters, use of the API is likely to result
         in errors. These errors will likely manifest themselves as erratic behavior at runtime,
         and many programmers will have a hard time diagnosing them. Therefore you should <strong class="calibre11">avoid confusing uses of overloading.</strong></p>
      
      <p class="indent">Exactly what constitutes a confusing use of overloading is open to some debate. <strong class="calibre11">A safe, conservative policy is never to export two overloadings with the same number
            of parameters.</strong> If a method uses varargs, a conservative policy is not to overload it at all, except
         as described in <a href="ch8.xhtml#lev53" class="calibre8">Item 53</a>. If you adhere to these restrictions, programmers will never be in doubt as to which
         overloading applies to any set of actual parameters. These restrictions are not terribly
         onerous because <strong class="calibre11">you can always give methods different names instead of overloading them.</strong></p>
      
      <p class="indent">For example, consider the <code class="calibre12">ObjectOutputStream</code> class. It has a variant of its <code class="calibre12">write</code> method for every primitive type and for several reference types. Rather than overloading
         the <code class="calibre12">write</code> method, these variants all have different names, such as <code class="calibre12">writeBoolean(boolean)</code>, <code class="calibre12">writeInt(int)</code>, and <code class="calibre12">writeLong(long)</code>. An added benefit of this naming pattern, when compared to overloading, is that it
         is possible to provide read methods with corresponding names, for example, <code class="calibre12">readBoolean()</code>, <code class="calibre12">readInt()</code>, and <code class="calibre12">readLong()</code>. The <code class="calibre12">ObjectInputStream</code> class does, in fact, provide such read methods.
      </p>
      
      <p class="indent">For constructors, you don’t have the option of using different names: multiple constructors
         for a class are <em class="calibre9">always</em> overloaded. You do, in many cases, have the option of exporting static factories
         instead of constructors (<a href="ch2.xhtml#lev1" class="calibre8">Item 1</a>). Also, with constructors you don’t have to worry about interactions between overloading
         and overriding, because constructors can’t be overridden. You will probably have <span epub:type="pagebreak" id="page_241"></span>occasion to export multiple constructors with the same number of parameters, so it
         pays to know how to do it safely.
      </p>
      
      <p class="indent">Exporting multiple overloadings with the same number of parameters is unlikely to
         confuse programmers <em class="calibre9">if</em> it is always clear which overloading will apply to any given set of actual parameters.
         This is the case when at least one corresponding formal parameter in each pair of
         overloadings has a “radically different” type in the two overloadings. Two types are
         radically different if it is clearly impossible to cast any non-null expression to
         both types. Under these circumstances, which overloading applies to a given set of
         actual parameters is fully determined by the runtime types of the parameters and cannot
         be affected by their compile-time types, so a major source of confusion goes away.
         For example, <code class="calibre12">ArrayList</code> has one constructor that takes an <code class="calibre12">int</code> and a second constructor that takes a <code class="calibre12">Collection</code>. It is hard to imagine any confusion over which of these two constructors will be
         invoked under any circumstances.
      </p>
      
      <p class="indent">Prior to Java 5, all primitive types were radically different from all reference types,
         but this is not true in the presence of autoboxing, and it has caused real trouble.
         Consider the following program:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex13a" id="pch8ex13" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">public class SetList {<br class="calibre7"/>
             public static void main(String[] args) {<br class="calibre7"/>
                 Set&lt;Integer&gt; set = new TreeSet&lt;&gt;();<br class="calibre7"/>
                 List&lt;Integer&gt; list = new ArrayList&lt;&gt;();<br class="calibre7"/>
                 <br class="calibre7"/>
                 for (int i = -3; i &lt; 3; i++) {<br class="calibre7"/>
                     set.add(i);<br class="calibre7"/>
                     list.add(i);<br class="calibre7"/>
                 }<br class="calibre7"/>
                 for (int i = 0; i &lt; 3; i++) {<br class="calibre7"/>
                     set.remove(i);<br class="calibre7"/>
                     list.remove(i);<br class="calibre7"/>
                 }<br class="calibre7"/>
                 System.out.println(set + " " + list);<br class="calibre7"/>
             }<br class="calibre7"/>
         }
      </p>
      
      <p class="noindent">First, the program adds the integers from −3 to 2, inclusive, to a sorted set and
         a list. Then, it makes three identical calls to <code class="calibre12">remove</code> on the set and the list. If you’re like most people, you’d expect the program to
         remove the non-negative values (0, 1, and 2) from the set and the list and to print
         <code class="calibre12">[-3, -2, -1] [-3, -2, -1]</code>. In fact, the program removes the non-negative values from the set and the odd values
         from the list and prints <code class="calibre12">[-3, -2, -1] [-2, 0, 2]</code>. It is an understatement to call this behavior confusing.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_242"></span>Here’s what’s happening: The call to <code class="calibre12">set.remove(i)</code> selects the overloading <code class="calibre12">remove(E)</code>, where <code class="calibre12">E</code> is the element type of the set (<code class="calibre12">Integer</code>), and autoboxes <code class="calibre12">i</code> from <code class="calibre12">int</code> to <code class="calibre12">Integer</code>. This is the behavior you’d expect, so the program ends up removing the positive
         values from the set. The call to <code class="calibre12">list.remove(i)</code>, on the other hand, selects the overloading <code class="calibre12">remove(int i)</code>, which removes the element at the specified <em class="calibre9">position</em> in the list. If you start with the list <code class="calibre12">[-3, -2, -1, 0, 1, 2]</code> and remove the zeroth element, then the first, and then the second, you’re left with
         <code class="calibre12">[-2, 0, 2]</code>, and the mystery is solved. To fix the problem, cast <code class="calibre12">list.remove</code>’s argument to <code class="calibre12">Integer</code>, forcing the correct overloading to be selected. Alternatively, you could invoke
         <code class="calibre12">Integer.valueOf</code> on <code class="calibre12">i</code> and pass the result to <code class="calibre12">list.remove</code>. Either way, the program prints <code class="calibre12">[-3, -2, -1] [-3, -2, -1]</code>, as expected:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex14a" id="pch8ex14" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">for (int i = 0; i &lt; 3; i++) {<br class="calibre7"/>
             set.remove(i);<br class="calibre7"/>
             list.remove(<strong class="calibre11">(Integer)</strong> i);  // or remove(Integer.valueOf(i))<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">The confusing behavior demonstrated by the previous example came about because the
         <code class="calibre12">List&lt;E&gt;</code> interface has two overloadings of the <code class="calibre12">remove</code> method: <code class="calibre12">remove(E)</code> and <code class="calibre12">remove(int)</code>. Prior to Java 5 when the <code class="calibre12">List</code> interface was “generified,” it had a <code class="calibre12">remove(Object)</code> method in place of <code class="calibre12">remove(E)</code>, and the corresponding parameter types, <code class="calibre12">Object</code> and <code class="calibre12">int</code>, were radically different. But in the presence of generics and autoboxing, the two
         parameter types are no longer radically different. In other words, adding generics
         and autoboxing to the language damaged the <code class="calibre12">List</code> interface. Luckily, few if any other APIs in the Java libraries were similarly damaged,
         but this tale makes it clear that autoboxing and generics increased the importance
         of caution when overloading.
      </p>
      
      <p class="indent">The addition of lambdas and method references in Java 8 further increased the potential
         for confusion in overloading. For example, consider these two snippets:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex15a" id="pch8ex15" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">new Thread(System.out::println).start();<br class="calibre7"/>
         <br class="calibre7"/>
         ExecutorService exec = Executors.newCachedThreadPool();<br class="calibre7"/>
         exec.submit(System.out::println);
      </p>
      
      <p class="noindent">While the <code class="calibre12">Thread</code> constructor invocation and the <code class="calibre12">submit</code> method invocation look similar, the former compiles while the latter does not. The
         arguments are identical (<code class="calibre12">System.out::println</code>), and both the constructor and the method have an overloading that takes a <code class="calibre12">Runnable</code>. What’s going on here? The surprising answer is that the <code class="calibre12">submit</code> method has an overloading that takes a <code class="calibre12">Callable&lt;T&gt;</code>, while the <code class="calibre12">Thread</code> constructor does not. You might think that this shouldn’t make any <span epub:type="pagebreak" id="page_243"></span>difference because all overloadings of <code class="calibre12">println</code> return <code class="calibre12">void</code>, so the method reference couldn’t possibly be a <code class="calibre12">Callable</code>. This makes perfect sense, but it’s not the way the overload resolution algorithm
         works. Perhaps equally surprising is that the <code class="calibre12">submit</code> method invocation would be legal if the <code class="calibre12">println</code> method weren’t also overloaded. It is the combination of the overloading of the referenced
         method (<code class="calibre12">println</code>) and the invoked method (<code class="calibre12">submit</code>) that prevents the overload resolution algorithm from behaving as you’d expect.
      </p>
      
      <p class="indent">Technically speaking, the problem is that <code class="calibre12">System.out::println</code> is an <em class="calibre9">inexact method reference</em> [JLS, 15.13.1] and that “certain argument expressions that contain implicitly typed
         lambda expressions or inexact method references are ignored by the applicability tests,
         because their meaning cannot be determined until a target type is selected [JLS, 15.12.2].”
         Don’t worry if you don’t understand this passage; it is aimed at compiler writers.
         The key point is that overloading methods or constructors with different functional
         interfaces in the same argument position causes confusion. Therefore, <strong class="calibre11">do not overload methods to take different functional interfaces in the same argument
            position.</strong> In the parlance of this item, different functional interfaces are not radically different.
         The Java compiler will warn you about this sort of problematic overload if you pass
         the command line switch <code class="calibre12">-Xlint:overloads</code>.
      </p>
      
      <p class="indent">Array types and class types other than <code class="calibre12">Object</code> are radically different. Also, array types and interface types other than <code class="calibre12">Serializable</code> and <code class="calibre12">Cloneable</code> are radically different. Two distinct classes are said to be <em class="calibre9">unrelated</em> if neither class is a descendant of the other [JLS, 5.5]. For example, <code class="calibre12">String</code> and <code class="calibre12">Throwable</code> are unrelated. It is impossible for any object to be an instance of two unrelated
         classes, so unrelated classes are radically different, too.
      </p>
      
      <p class="indent">There are other pairs of types that can’t be converted in either direction [JLS, 5.1.12],
         but once you go beyond the simple cases described above, it becomes very difficult
         for most programmers to discern which, if any, overloading applies to a set of actual
         parameters. The rules that determine which overloading is selected are extremely complex
         and grow more complex with every release. Few programmers understand all of their
         subtleties.
      </p>
      
      <p class="indent">There may be times when you feel the need to violate the guidelines in this item,
         especially when evolving existing classes. For example, consider <code class="calibre12">String</code>, which has had a <code class="calibre12">contentEquals(StringBuffer)</code> method since Java 4. In Java 5, <code class="calibre12">CharSequence</code> was added to provide a common interface for <code class="calibre12">StringBuffer</code>, <code class="calibre12">StringBuilder</code>, <code class="calibre12">String</code>, <code class="calibre12">CharBuffer</code>, and other similar types. At the same time that <code class="calibre12">CharSequence</code> was added, <code class="calibre12">String</code> was outfitted with an overloading of the <code class="calibre12">contentEquals</code> method that takes a <code class="calibre12">CharSequence</code>.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_244"></span>While the resulting overloading clearly violates the guidelines in this item, it causes
         no harm because both overloaded methods do exactly the same thing when they are invoked
         on the same object reference. The programmer may not know which overloading will be
         invoked, but it is of no consequence so long as they behave identically. The standard
         way to ensure this behavior is to have the more specific overloading forward to the
         more general:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex16a" id="pch8ex16" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Ensuring that 2 methods have identical behavior by forwarding</strong><br class="calibre7"/>
         public boolean contentEquals(StringBuffer sb) {<br class="calibre7"/>
             return contentEquals((CharSequence) sb);<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">While the Java libraries largely adhere to the spirit of the advice in this item,
         there are a number of classes that violate it. For example, <code class="calibre12">String</code> exports two overloaded static factory methods, <code class="calibre12">valueOf(char[])</code> and <code class="calibre12">valueOf(Object)</code>, that do completely different things when passed the same object reference. There
         is no real justification for this, and it should be regarded as an anomaly with the
         potential for real confusion.
      </p>
      
      <p class="indent">To summarize, just because you can overload methods doesn’t mean you should. It is
         generally best to refrain from overloading methods with multiple signatures that have
         the same number of parameters. In some cases, especially where constructors are involved,
         it may be impossible to follow this advice. In these cases, you should at least avoid
         situations where the same set of parameters can be passed to different overloadings
         by the addition of casts. If this cannot be avoided, for example, because you are
         retrofitting an existing class to implement a new interface, you should ensure that
         all overloadings behave identically when passed the same parameters. If you fail to
         do this, programmers will be hard pressed to make effective use of the overloaded
         method or constructor, and they won’t understand why it doesn’t work.
      </p>
      
      <h3 class="h2"><a id="lev53" class="calibre4"></a><span epub:type="pagebreak" id="page_245" class="calibre15"></span><strong class="calibre10">Item 53: Use varargs judiciously</strong></h3>
      
      <p class="noindent">Varargs methods, formally known as <em class="calibre9">variable arity</em> methods [JLS, 8.4.1], accept zero or more arguments of a specified type. The varargs
         facility works by first creating an array whose size is the number of arguments passed
         at the call site, then putting the argument values into the array, and finally passing
         the array to the method.
      </p>
      
      <p class="indent">For example, here is a varargs method that takes a sequence of <code class="calibre12">int</code> arguments and returns their sum. As you would expect, the value of <code class="calibre12">sum(1, 2, 3)</code> is <code class="calibre12">6</code>, and the value of <code class="calibre12">sum()</code> is <code class="calibre12">0</code>:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex17a" id="pch8ex17" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Simple use of varargs</strong><br class="calibre7"/>
         static int sum(int... args) {<br class="calibre7"/>
             int sum = 0;<br class="calibre7"/>
             for (int arg : args)<br class="calibre7"/>
                 sum += arg;<br class="calibre7"/>
             return sum;<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">Sometimes it’s appropriate to write a method that requires <em class="calibre9">one</em> or more arguments of some type, rather than <em class="calibre9">zero</em> or more. For example, suppose you want to write a function that computes the minimum
         of its arguments. This function is not well defined if the client passes no arguments.
         You could check the array length at runtime:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex18a" id="pch8ex18" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// The WRONG way to use varargs to pass one or more arguments!</strong><br class="calibre7"/>
         static int min(int... args) {<br class="calibre7"/>
             if (args.length == 0)<br class="calibre7"/>
                 throw new IllegalArgumentException("Too few arguments");<br class="calibre7"/>
             int min = args[0];<br class="calibre7"/>
             for (int i = 1; i &lt; args.length; i++)<br class="calibre7"/>
                 if (args[i] &lt; min)<br class="calibre7"/>
                     min = args[i];<br class="calibre7"/>
             return min;<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">This solution has several problems. The most serious is that if the client invokes
         this method with no arguments, it fails at runtime rather than compile time. Another
         problem is that it is ugly. You have to include an explicit validity check on <code class="calibre12">args</code>, and you can’t use a for-each loop unless you initialize <code class="calibre12">min</code> to <code class="calibre12">Integer.MAX_VALUE</code>, which is also ugly.
      </p>
      
      <p class="indent">Luckily there’s a much better way to achieve the desired effect. Declare the method
         to take two parameters, one normal parameter of the specified type and <span epub:type="pagebreak" id="page_246"></span>one varargs parameter of this type. This solution corrects all the deficiencies of
         the previous one:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex19a" id="pch8ex19" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// The right way to use varargs to pass one or more arguments</strong><br class="calibre7"/>
         static int min(int firstArg, int... remainingArgs) {<br class="calibre7"/>
             int min = firstArg;<br class="calibre7"/>
             for (int arg : remainingArgs)<br class="calibre7"/>
                 if (arg &lt; min)<br class="calibre7"/>
                     min = arg;<br class="calibre7"/>
             return min;<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">As you can see from this example, varargs are effective in circumstances where you
         want a method with a variable number of arguments. Varargs were designed for <code class="calibre12">printf</code>, which was added to the platform at the same time as varargs, and for the core reflection
         facility (<a href="ch9.xhtml#lev65" class="calibre8">Item 65</a>), which was retrofitted. Both <code class="calibre12">printf</code> and reflection benefited enormously from varargs.
      </p>
      
      <p class="indent">Exercise care when using varargs in performance-critical situations. Every invocation
         of a varargs method causes an array allocation and initialization. If you have determined
         empirically that you can’t afford this cost but you need the flexibility of varargs,
         there is a pattern that lets you have your cake and eat it too. Suppose you’ve determined
         that 95 percent of the calls to a method have three or fewer parameters. Then declare
         five overloadings of the method, one each with zero through three ordinary parameters,
         and a single varargs method for use when the number of arguments exceeds three:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex20a" id="pch8ex20" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">public void foo() { }<br class="calibre7"/>
         public void foo(int a1) { }<br class="calibre7"/>
         public void foo(int a1, int a2) { }<br class="calibre7"/>
         public void foo(int a1, int a2, int a3) { }<br class="calibre7"/>
         public void foo(int a1, int a2, int a3, int... rest) { }
      </p>
      
      <p class="noindent">Now you know that you’ll pay the cost of the array creation only in the 5 percent
         of all invocations where the number of parameters exceeds three. Like most performance
         optimizations, this technique usually isn’t appropriate, but when it is, it’s a lifesaver.
      </p>
      
      <p class="indent">The static factories for <code class="calibre12">EnumSet</code> use this technique to reduce the cost of creating enum sets to a minimum. This was
         appropriate because it was critical that enum sets provide a performance-competitive
         replacement for bit fields (<a href="ch6.xhtml#lev36" class="calibre8">Item 36</a>).
      </p>
      
      <p class="indent">In summary, varargs are invaluable when you need to define methods with a variable
         number of arguments. Precede the varargs parameter with any required parameters, and
         be aware of the performance consequences of using varargs.
      </p>
      
      <h3 class="h2"><a id="lev54" class="calibre4"></a><span epub:type="pagebreak" id="page_247" class="calibre15"></span><strong class="calibre10">Item 54: Return empty collections or arrays, not nulls</strong></h3>
      
      <p class="noindent">It is not uncommon to see methods that look something like this:</p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex21a" id="pch8ex21" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Returns null to indicate an empty collection. Don't do this!</strong><br class="calibre7"/>
         private final List&lt;Cheese&gt; cheesesInStock = ...;<br class="calibre7"/>
         <br class="calibre7"/>
         /**<br class="calibre7"/>
          * @return a list containing all of the cheeses in the shop,<br class="calibre7"/>
          *     or null if no cheeses are available for purchase.<br class="calibre7"/>
          */<br class="calibre7"/>
         public List&lt;Cheese&gt; getCheeses() {<br class="calibre7"/>
             return cheesesInStock.isEmpty() ? null<br class="calibre7"/>
                 : new ArrayList&lt;&gt;(cheesesInStock);<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">There is no reason to special-case the situation where no cheeses are available for
         purchase. Doing so requires extra code in the client to handle the possibly null return
         value, for example:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex22a" id="pch8ex22" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">List&lt;Cheese&gt; cheeses = shop.getCheeses();<br class="calibre7"/>
         if (<strong class="calibre11">cheeses != null &amp;&amp;</strong> cheeses.contains(Cheese.STILTON))<br class="calibre7"/>
             System.out.println("Jolly good, just the thing.");
      </p>
      
      <p class="indent">This sort of circumlocution is required in nearly every use of a method that returns
         <code class="calibre12">null</code> in place of an empty collection or array. It is error-prone, because the programmer
         writing the client might forget to write the special-case code to handle a <code class="calibre12">null</code> return. Such an error may go unnoticed for years because such methods usually return
         one or more objects. Also, returning <code class="calibre12">null</code> in place of an empty container complicates the implementation of the method returning
         the container.
      </p>
      
      <p class="indent">It is sometimes argued that a <code class="calibre12">null</code> return value is preferable to an empty collection or array because it avoids the
         expense of allocating the empty container. This argument fails on two counts. First,
         it is inadvisable to worry about performance at this level unless measurements have
         shown that the allocation in question is a real contributor to performance problems
         (<a href="ch9.xhtml#lev67" class="calibre8">Item 67</a>). Second, it <em class="calibre9">is</em> possible to return empty collections and arrays without allocating them. Here is
         the typical code to return a possibly empty collection. Usually, this is all you need:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex23a" id="pch8ex23" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">//The right way to return a possibly empty collection</strong><br class="calibre7"/>
         public List&lt;Cheese&gt; getCheeses() {<br class="calibre7"/>
             return new ArrayList&lt;&gt;(cheesesInStock);<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">In the unlikely event that you have evidence suggesting that allocating empty collections
         is harming performance, you can avoid the allocations by returning the <span epub:type="pagebreak" id="page_248"></span>same <em class="calibre9">immutable</em> empty collection repeatedly, as immutable objects may be shared freely (<a href="ch4.xhtml#lev17" class="calibre8">Item 17</a>). Here is the code to do it, using the <code class="calibre12">Collections.emptyList</code> method. If you were returning a set, you’d use <code class="calibre12">Collections.emptySet</code>; if you were returning a map, you’d use <code class="calibre12">Collections.emptyMap</code>. But remember, this is an optimization, and it’s seldom called for. If you think
         you need it, measure performance before and after, to ensure that it’s actually helping:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex24a" id="pch8ex24" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Optimization - avoids allocating empty collections</strong><br class="calibre7"/>
         public List&lt;Cheese&gt; getCheeses() {<br class="calibre7"/>
             return cheesesInStock.isEmpty() ? Collections.emptyList()<br class="calibre7"/>
                 : new ArrayList&lt;&gt;(cheesesInStock);<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">The situation for arrays is identical to that for collections. Never return null instead
         of a zero-length array. Normally, you should simply return an array of the correct
         length, which may be zero. Note that we’re passing a zero-length array into the <code class="calibre12">toArray</code> method to indicate the desired return type, which is <code class="calibre12">Cheese[]</code>:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex25a" id="pch8ex25" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">//The right way to return a possibly empty array</strong><br class="calibre7"/>
         public Cheese[] getCheeses() {<br class="calibre7"/>
             return cheesesInStock.toArray(new Cheese[0]);<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">If you believe that allocating zero-length arrays is harming performance, you can
         return the same zero-length array repeatedly because all zero-length arrays are immutable:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex26a" id="pch8ex26" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Optimization - avoids allocating empty arrays</strong><br class="calibre7"/>
         private static final Cheese[] EMPTY_CHEESE_ARRAY = new Cheese[0];<br class="calibre7"/>
         <br class="calibre7"/>
         public Cheese[] getCheeses() {<br class="calibre7"/>
             return cheesesInStock.toArray(EMPTY_CHEESE_ARRAY);<br class="calibre7"/>
         }
      </p>
      
      <p class="noindent">In the optimized version, we pass <em class="calibre9">the same</em> empty array into every <code class="calibre12">toArray</code> call, and this array will be returned from <code class="calibre12">getCheeses</code> whenever <code class="calibre12">cheesesInStock</code> is empty. Do <em class="calibre9">not</em> preallocate the array passed to <code class="calibre12">toArray</code> in hopes of improving performance. Studies have shown that it is counterproductive
         [Shipilëv16]:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex27a" id="pch8ex27" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Don’t do this - preallocating the array harms performance!</strong><br class="calibre7"/>
         return cheesesInStock.toArray(new Cheese[cheesesInStock.size()]);
      </p>
      
      <p class="indent">In summary, <strong class="calibre11">never return</strong> <code class="calibre12"><strong class="calibre11">null</strong></code> <strong class="calibre11">in place of an empty array or collection.</strong> It makes your API more difficult to use and more prone to error, and it has no performance
         advantages.
      </p>
      
      <h3 class="h2"><a id="lev55" class="calibre4"></a><span epub:type="pagebreak" id="page_249" class="calibre15"></span><strong class="calibre10">Item 55: Return optionals judiciously</strong></h3>
      
      <p class="noindent">Prior to Java 8, there were two approaches you could take when writing a method that
         was unable to return a value under certain circumstances. Either you could throw an
         exception, or you could return <code class="calibre12">null</code> (assuming the return type was an object reference type). Neither of these approaches
         is perfect. Exceptions should be reserved for exceptional conditions (<a href="ch10.xhtml#lev69" class="calibre8">Item 69</a>), and throwing an exception is expensive because the entire stack trace is captured
         when an exception is created. Returning <code class="calibre12">null</code> doesn’t have these shortcomings, but it has its own. If a method returns <code class="calibre12">null</code>, clients must contain special-case code to deal with the possibility of a null return,
         unless the programmer can <em class="calibre9">prove</em> that a null return is impossible. If a client neglects to check for a null return
         and stores a null return value away in some data structure, a <code class="calibre12">NullPointerException</code> may result at some arbitrary time in the future, at some place in the code that has
         nothing to do with the problem.
      </p>
      
      <p class="indent">In Java 8, there is a third approach to writing methods that may not be able to return
         a value. The <code class="calibre12">Optional&lt;T&gt;</code> class represents an immutable container that can hold either a single non-null <code class="calibre12">T</code> reference or nothing at all. An optional that contains nothing is said to be <em class="calibre9">empty</em>. A value is said to be <em class="calibre9">present</em> in an optional that is not empty. An optional is essentially an immutable collection
         that can hold at most one element. <code class="calibre12">Optional&lt;T&gt;</code> does not implement <code class="calibre12">Collection&lt;T&gt;</code>, but it could in principle.
      </p>
      
      <p class="indent">A method that conceptually returns a <code class="calibre12">T</code> but may be unable to do so under certain circumstances can instead be declared to
         return an <code class="calibre12">Optional&lt;T&gt;</code>. This allows the method to return an empty result to indicate that it couldn’t return
         a valid result. An <code class="calibre12">Optional</code>-returning method is more flexible and easier to use than one that throws an exception,
         and it is less error-prone than one that returns <code class="calibre12">null</code>.
      </p>
      
      <p class="indent">In <a href="ch5.xhtml#lev30" class="calibre8">Item 30</a>, we showed this method to calculate the maximum value in a collection, according
         to its elements’ natural order.
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex28a" id="pch8ex28" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Returns maximum value in collection - throws exception if empty</strong><br class="calibre7"/>
         public static &lt;E extends Comparable&lt;E&gt;&gt; E max(Collection&lt;E&gt; c) {<br class="calibre7"/>
             if (c.isEmpty())<br class="calibre7"/>
                 throw new IllegalArgumentException("Empty collection");<br class="calibre7"/>
         <br class="calibre7"/>
             E result = null;<br class="calibre7"/>
             for (E e : c)<br class="calibre7"/>
                 if (result == null || e.compareTo(result) &gt; 0)<br class="calibre7"/>
                     result = Objects.requireNonNull(e);<br class="calibre7"/>
         <br class="calibre7"/>
             return result;<br class="calibre7"/>
         }
      </p>
      
      <p class="noindent"><span epub:type="pagebreak" id="page_250"></span>This method throws an <code class="calibre12">IllegalArgumentException</code> if the given collection is empty. We mentioned in <a href="ch5.xhtml#lev30" class="calibre8">Item 30</a> that a better alternative would be to return <code class="calibre12">Optional&lt;E&gt;</code>. Here’s how the method looks when it is modified to do so:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex29a" id="pch8ex29" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Returns maximum value in collection as an Optional&lt;E&gt;</strong><br class="calibre7"/>
         public static &lt;E extends Comparable&lt;E&gt;&gt;<br class="calibre7"/>
                 <strong class="calibre11">Optional&lt;E&gt;</strong> max(Collection&lt;E&gt; c) {<br class="calibre7"/>
             if (c.isEmpty())<br class="calibre7"/>
                 return <strong class="calibre11">Optional.empty()</strong>;<br class="calibre7"/>
                 <br class="calibre7"/>
             E result = null;<br class="calibre7"/>
             for (E e : c)<br class="calibre7"/>
                 if (result == null || e.compareTo(result) &gt; 0)<br class="calibre7"/>
                     result = Objects.requireNonNull(e);<br class="calibre7"/>
         <br class="calibre7"/>
             return <strong class="calibre11">Optional.of(result)</strong>;<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">As you can see, it is straightforward to return an optional. All you have to do is
         to create the optional with the appropriate static factory. In this program, we use
         two: <code class="calibre12">Optional.empty()</code> returns an empty optional, and <code class="calibre12">Optional.of(value)</code> returns an optional containing the given non-null value. It is a programming error
         to pass <code class="calibre12">null</code> to <code class="calibre12">Optional.of(value)</code>. If you do this, the method responds by throwing a <code class="calibre12">NullPointerException</code>. The <code class="calibre12">Optional.ofNullable(value)</code> method accepts a possibly null value and returns an empty optional if <code class="calibre12">null</code> is passed in. <strong class="calibre11">Never return a null value from an</strong> <code class="calibre12"><strong class="calibre11">Optional</strong></code><strong class="calibre11">-returning method:</strong> it defeats the entire purpose of the facility.
      </p>
      
      <p class="indent">Many terminal operations on streams return optionals. If we rewrite the <code class="calibre12">max</code> method to use a stream, <code class="calibre12">Stream</code>’s <code class="calibre12">max</code> operation does the work of generating an optional for us (though we do have to pass
         in an explicit comparator):
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex30a" id="pch8ex30" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Returns max val in collection as Optional&lt;E&gt; - uses stream</strong><br class="calibre7"/>
         public static &lt;E extends Comparable&lt;E&gt;&gt;<br class="calibre7"/>
                 Optional&lt;E&gt; max(Collection&lt;E&gt; c) {<br class="calibre7"/>
             return c.stream().max(Comparator.naturalOrder());<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">So how do you choose to return an optional instead of returning a <code class="calibre12">null</code> or throwing an exception? <strong class="calibre11">Optionals are similar in spirit to checked exceptions</strong> (<a href="ch10.xhtml#lev71" class="calibre8">Item 71</a>), in that they <em class="calibre9">force</em> the user of an API to confront the fact that there may be no value returned. Throwing
         an unchecked exception or returning a <code class="calibre12">null</code> allows the user to ignore this eventuality, with potentially dire consequences. However,
         throwing a checked exception requires additional boilerplate code in the client.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_251"></span>If a method returns an optional, the client gets to choose what action to take if
         the method can’t return a value. You can specify a default value:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex31a" id="pch8ex31" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Using an optional to provide a chosen default value</strong><br class="calibre7"/>
         String lastWordInLexicon = max(words)<strong class="calibre11">.orElse("No words...")</strong>;
      </p>
      
      <p class="noindent">or you can throw any exception that is appropriate. Note that we pass in an exception
         factory rather than an actual exception. This avoids the expense of creating the exception
         unless it will actually be thrown:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex32a" id="pch8ex32" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Using an optional to throw a chosen exception</strong><br class="calibre7"/>
         Toy myToy = max(toys)<strong class="calibre11">.orElseThrow(TemperTantrumException::new)</strong>;
      </p>
      
      <p class="noindent">If you can <em class="calibre9">prove</em> that an optional is nonempty, you can get the value from the optional without specifying
         an action to take if the optional is empty, but if you’re wrong, your code will throw
         a <code class="calibre12">NoSuchElementException</code>:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex33a" id="pch8ex33" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre"><strong class="calibre11">// Using optional when you know there’s a return value</strong><br class="calibre7"/>
         Element lastNobleGas = max(Elements.NOBLE_GASES)<strong class="calibre11">.get()</strong>;
      </p>
      
      <p class="indent">Occasionally you may be faced with a situation where it’s expensive to get the default
         value, and you want to avoid that cost unless it’s necessary. For these situations,
         <code class="calibre12">Optional</code> provides a method that takes a <code class="calibre12">Supplier&lt;T&gt;</code> and invokes it only when necessary. This method is called <code class="calibre12">orElseGet</code>, but perhaps it should have been called <code class="calibre12">orElseCompute</code> because it is closely related to the three <code class="calibre12">Map</code> methods whose names begin with <code class="calibre12">compute</code>. There are several <code class="calibre12">Optional</code> methods for dealing with more specialized use cases: <code class="calibre12">filter</code>, <code class="calibre12">map</code>, <code class="calibre12">flatMap</code>, and <code class="calibre12">ifPresent</code>. In Java 9, two more of these methods were added: <code class="calibre12">or</code> and <code class="calibre12">ifPresentOrElse</code>. If the basic methods described above aren’t a good match for your use case, look
         at the documentation for these more advanced methods and see if they do the job.
      </p>
      
      <p class="indent">In case none of these methods meets your needs, <code class="calibre12">Optional</code> provides the <code class="calibre12">isPresent()</code> method, which may be viewed as a safety valve. It returns <code class="calibre12">true</code> if the optional contains a value, <code class="calibre12">false</code> if it’s empty. You can use this method to perform any processing you like on an optional
         result, but make sure to use it wisely. Many uses of <code class="calibre12">isPresent</code> can profitably be replaced by one of the methods mentioned above. The resulting code
         will typically be shorter, clearer, and more idiomatic.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_252"></span>For example, consider this code snippet, which prints the process ID of the parent
         of a process, or <code class="calibre12">N/A</code> if the process has no parent. The snippet uses the <code class="calibre12">ProcessHandle</code> class, introduced in Java 9:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex34a" id="pch8ex34" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">Optional&lt;ProcessHandle&gt; parentProcess = ph.parent();<br class="calibre7"/>
         System.out.println("Parent PID: " + (parentProcess.<strong class="calibre11">isPresent()</strong> ?<br class="calibre7"/>
             String.valueOf(parentProcess.get().pid()) : "N/A"));
      </p>
      
      <p class="noindent">The code snippet above can be replaced by this one, which uses <code class="calibre12">Optional</code>’s <code class="calibre12">map</code> function:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex35a" id="pch8ex35" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">System.out.println("Parent PID: " +<br class="calibre7"/>
           ph.parent().<strong class="calibre11">map(h -&gt; String.valueOf(h.pid()))</strong>.orElse("N/A"));
      </p>
      
      <p class="indent">When programming with streams, it is not uncommon to find yourself with a <code class="calibre12">Stream&lt;Optional&lt;T&gt;&gt;</code> and to require a <code class="calibre12">Stream&lt;T&gt;</code> containing all the elements in the nonempty optionals in order to proceed. If you’re
         using Java 8, here’s how to bridge the gap:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex36a" id="pch8ex36" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">streamOfOptionals<br class="calibre7"/>
             .filter(Optional::isPresent)<br class="calibre7"/>
             .map(Optional::get)
      </p>
      
      <p class="noindent">In Java 9, <code class="calibre12">Optional</code> was outfitted with a <code class="calibre12">stream()</code> method. This method is an adapter that turns an <code class="calibre12">Optional</code> into a <code class="calibre12">Stream</code> containing an element if one is present in the optional, or none if it is empty.
         In conjunction with <code class="calibre12">Stream</code>’s <code class="calibre12">flatMap</code> method (<a href="ch7.xhtml#lev45" class="calibre8">Item 45</a>), this method provides a concise replacement for the code snippet above:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex37a" id="pch8ex37" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">streamOfOptionals.<br class="calibre7"/>
             .flatMap(Optional::stream)
      </p>
      
      <p class="indent">Not all return types benefit from the optional treatment. <strong class="calibre11">Container types, including collections, maps, streams, arrays, and optionals should
            not be wrapped in optionals.</strong> Rather than returning an empty <code class="calibre12">Optional&lt;List&lt;T&gt;&gt;</code>, you should simply return an empty <code class="calibre12">List&lt;T&gt;</code> (<a href="ch8.xhtml#lev54" class="calibre8">Item 54</a>). Returning the empty container will eliminate the need for client code to process
         an optional. The <code class="calibre12">ProcessHandle</code> class does have the <code class="calibre12">arguments</code> method, which returns <code class="calibre12">Optional&lt;String[]&gt;</code>, but this method should be regarded as an anomaly that is not to be emulated.
      </p>
      
      <p class="indent">So when should you declare a method to return <code class="calibre12">Optional&lt;T&gt;</code> rather than <code class="calibre12">T</code>? As a rule, <strong class="calibre11">you should declare a method to return</strong> <code class="calibre12"><strong class="calibre11">Optional&lt;T&gt;</strong></code> <strong class="calibre11">if it might not be able to return a result</strong> <em class="calibre9"><strong class="calibre11">and</strong></em> <strong class="calibre11">clients will have to perform special processing if no result is returned.</strong> That said, returning an <code class="calibre12">Optional&lt;T&gt;</code> is not without cost. <span epub:type="pagebreak" id="page_253"></span>An <code class="calibre12">Optional</code> is an object that has to be allocated and initialized, and reading the value out
         of the optional requires an extra indirection. This makes optionals inappropriate
         for use in some performance-critical situations. Whether a particular method falls
         into this category can only be determined by careful measurement (<a href="ch9.xhtml#lev67" class="calibre8">Item 67</a>).
      </p>
      
      <p class="indent">Returning an optional that contains a boxed primitive type is prohibitively expensive
         compared to returning a primitive type because the optional has two levels of boxing
         instead of zero. Therefore, the library designers saw fit to provide analogues of
         <code class="calibre12">Optional&lt;T&gt;</code> for the primitive types <code class="calibre12">int</code>, <code class="calibre12">long</code>, and <code class="calibre12">double</code>. These optional types are <code class="calibre12">OptionalInt</code>, <code class="calibre12">OptionalLong</code>, and <code class="calibre12">OptionalDouble</code>. They contain most, but not all, of the methods on <code class="calibre12">Optional&lt;T&gt;</code>. Therefore, <strong class="calibre11">you should never return an optional of a boxed primitive type,</strong> with the possible exception of the “minor primitive types,” <code class="calibre12">Boolean</code>, <code class="calibre12">Byte</code>, <code class="calibre12">Character</code>, <code class="calibre12">Short</code>, and <code class="calibre12">Float</code>.
      </p>
      
      <p class="indent">Thus far, we have discussed returning optionals and processing them after they are
         returned. We have not discussed other possible uses, and that is because most other
         uses of optionals are suspect. For example, you should never use optionals as map
         values. If you do, you have two ways of expressing a key’s logical absence from the
         map: either the key can be absent from the map, or it can be present and map to an
         empty optional. This represents needless complexity with great potential for confusion
         and errors. More generally, <strong class="calibre11">it is almost never appropriate to use an optional as a key, value, or element in a
            collection or array.</strong></p>
      
      <p class="indent">This leaves a big question unanswered. Is it ever appropriate to store an optional
         in an instance field? Often it’s a “bad smell”: it suggests that perhaps you should
         have a subclass containing the optional fields. But sometimes it may be justified.
         Consider the case of our <code class="calibre12">NutritionFacts</code> class in <a href="ch2.xhtml#lev2" class="calibre8">Item 2</a>. A <code class="calibre12">NutritionFacts</code> instance contains many fields that are not required. You can’t have a subclass for
         every possible combination of these fields. Also, the fields have primitive types,
         which make it awkward to express absence directly. The best API for <code class="calibre12">NutritionFacts</code> would return an optional from the getter for each optional field, so it makes good
         sense to simply store those optionals as fields in the object.
      </p>
      
      <p class="indent">In summary, if you find yourself writing a method that can’t always return a value
         and you believe it is important that users of the method consider this possibility
         every time they call it, then you should probably return an optional. You should,
         however, be aware that there are real performance consequences associated with returning
         optionals; for performance-critical methods, it may be better to return a <code class="calibre12">null</code> or throw an exception. Finally, you should rarely use an optional in any other capacity
         than as a return value.
      </p>
      
      <h3 class="h2"><a id="lev56" class="calibre4"></a><span epub:type="pagebreak" id="page_254" class="calibre15"></span><strong class="calibre10">Item 56: Write doc comments for all exposed API elements</strong></h3>
      
      <p class="noindent">If an API is to be usable, it must be documented. Traditionally, API documentation
         was generated manually, and keeping it in sync with code was a chore. The Java programming
         environment eases this task with the <em class="calibre9">Javadoc</em> utility. Javadoc generates API documentation automatically from source code with
         specially formatted <em class="calibre9">documentation comments</em>, more commonly known as <em class="calibre9">doc comments</em>.
      </p>
      
      <p class="indent">While the doc comment conventions are not officially part of the language, they constitute
         a de facto API that every Java programmer should know. These conventions are described
         in the <em class="calibre9">How to Write Doc Comments</em> web page [Javadoc-guide]. While this page has not been updated since Java 4 was released,
         it is still an invaluable resource. One important doc tag was added in Java 9, <code class="calibre12">{@index}</code>; one in Java 8, <code class="calibre12">{@implSpec}</code>; and two in Java 5, <code class="calibre12">{@literal}</code> and <code class="calibre12">{@code}</code>. These tags are missing from the aforementioned web page, but are discussed in this
         item.
      </p>
      
      <p class="indent"><strong class="calibre11">To document your API properly, you must precede</strong> <em class="calibre9"><strong class="calibre11">every</strong></em> <strong class="calibre11">exported class, interface, constructor, method, and field declaration with a doc comment.</strong> If a class is serializable, you should also document its serialized form (<a href="ch12.xhtml#lev87" class="calibre8">Item 87</a>). In the absence of a doc comment, the best that Javadoc can do is to reproduce the
         declaration as the sole documentation for the affected API element. It is frustrating
         and error-prone to use an API with missing documentation comments. Public classes
         should not use default constructors because there is no way to provide doc comments
         for them. To write maintainable code, you should also write doc comments for most
         unexported classes, interfaces, constructors, methods, and fields, though these comments
         needn’t be as thorough as those for exported API elements.
      </p>
      
      <p class="indent"><strong class="calibre11">The doc comment for a method should describe succinctly the contract between the method
            and its client.</strong> With the exception of methods in classes designed for inheritance (<a href="ch4.xhtml#lev19" class="calibre8">Item 19</a>), the contract should say <em class="calibre9">what</em> the method does rather than <em class="calibre9">how</em> it does its job. The doc comment should enumerate all of the method’s <em class="calibre9">preconditions</em>, which are the things that have to be true in order for a client to invoke it, and
         its <em class="calibre9">postconditions</em>, which are the things that will be true after the invocation has completed successfully.
         Typically, preconditions are described implicitly by the <code class="calibre12">@throws</code> tags for unchecked exceptions; each unchecked exception corresponds to a precondition
         violation. Also, preconditions can be specified along with the affected parameters
         in their <code class="calibre12">@param</code> tags.
      </p>
      
      <p class="indent">In addition to preconditions and postconditions, methods should document any <em class="calibre9">side effects</em>. A side effect is an observable change in the state of the system that is not obviously
         required in order to achieve the postcondition. For example, if a method starts a
         background thread, the documentation should make note of it.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_255"></span>To describe a method’s contract fully, the doc comment should have an <code class="calibre12">@param</code> tag for every parameter, an <code class="calibre12">@return</code> tag unless the method has a void return type, and an <code class="calibre12">@throws</code> tag for every exception thrown by the method, whether checked or unchecked (<a href="ch10.xhtml#lev74" class="calibre8">Item 74</a>). If the text in the <code class="calibre12">@return</code> tag would be identical to the description of the method, it may be permissible to
         omit it, depending on the coding standards you are following.
      </p>
      
      <p class="indent">By convention, the text following an <code class="calibre12">@param</code> tag or <code class="calibre12">@return</code> tag should be a noun phrase describing the value represented by the parameter or
         return value. Rarely, arithmetic expressions are used in place of noun phrases; see
         <code class="calibre12">BigInteger</code> for examples. The text following an <code class="calibre12">@throws</code> tag should consist of the word “if,” followed by a clause describing the conditions
         under which the exception is thrown. By convention, the phrase or clause following
         an <code class="calibre12">@param</code>, <code class="calibre12">@return</code>, or <code class="calibre12">@throws</code> tag is not terminated by a period. All of these conventions are illustrated by the
         following doc comment:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex38a" id="pch8ex38" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * Returns the element at the specified position in this list.<br class="calibre7"/>
          *<br class="calibre7"/>
          * &lt;p&gt;This method is &lt;i&gt;not&lt;/i&gt; guaranteed to run in constant<br class="calibre7"/>
          * time. In some implementations it may run in time proportional<br class="calibre7"/>
          * to the element position.<br class="calibre7"/>
          *<br class="calibre7"/>
          * @param  index index of element to return; must be<br class="calibre7"/>
          *         non-negative and less than the size of this list<br class="calibre7"/>
          * @return the element at the specified position in this list<br class="calibre7"/>
          * @throws IndexOutOfBoundsException if the index is out of range<br class="calibre7"/>
          *         ({@code index &lt; 0 || index &gt;= this.size()})<br class="calibre7"/>
          */<br class="calibre7"/>
         E get(int index);
      </p>
      
      <p class="indent">Notice the use of HTML tags in this doc comment (<code class="calibre12">&lt;p&gt;</code> and <code class="calibre12">&lt;i&gt;</code>). The Javadoc utility translates doc comments into HTML, and arbitrary HTML elements
         in doc comments end up in the resulting HTML document. Occasionally, programmers go
         so far as to embed HTML tables in their doc comments, although this is rare.
      </p>
      
      <p class="indent">Also notice the use of the Javadoc <code class="calibre12">{@code}</code> tag around the code fragment in the <code class="calibre12">@throws</code> clause. This tag serves two purposes: it causes the code fragment to be rendered
         in <code class="calibre12">code font</code>, and it suppresses processing of HTML markup and nested Javadoc tags in the code
         fragment. The latter property is what allows us to use the less-than sign (<code class="calibre12">&lt;</code>) in the code fragment even though it’s an HTML metacharacter. To include a multiline
         code example in a doc comment, use a Javadoc <code class="calibre12">{@code}</code> tag wrapped inside an HTML <code class="calibre12">&lt;pre&gt;</code> tag. In other words, precede the code example with the characters <code class="calibre12">&lt;pre&gt;{@code</code> and follow it with <code class="calibre12">}&lt;/pre&gt;</code>. This preserves line <span epub:type="pagebreak" id="page_256"></span>breaks in the code, and eliminates the need to escape HTML metacharacters, but <em class="calibre9">not</em> the at sign (<code class="calibre12">@</code>), which must be escaped if the code sample uses annotations.
      </p>
      
      <p class="indent">Finally, notice the use of the words “this list” in the doc comment. By convention,
         the word “this” refers to the object on which a method is invoked when it is used
         in the doc comment for an instance method.
      </p>
      
      <p class="indent">As mentioned in <a href="ch4.xhtml#lev15" class="calibre8">Item 15</a>, when you design a class for inheritance, you must document its <em class="calibre9">self-use patterns,</em> so programmers know the semantics of overriding its methods. These self-use patterns
         should be documented using the <code class="calibre12">@implSpec</code> tag, added in Java 8. Recall that ordinary doc comments describe the contract between
         a method and its client; <code class="calibre12">@implSpec</code> comments, by contrast, describe the contract between a method and its subclass, allowing
         subclasses to rely on implementation behavior if they inherit the method or call it
         via <code class="calibre12">super</code>. Here's how it looks in practice:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex39a" id="pch8ex39" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * Returns true if this collection is empty.<br class="calibre7"/>
          *<br class="calibre7"/>
          * <strong class="calibre11">@implSpec</strong><br class="calibre7"/>
          * <strong class="calibre11">This implementation returns {@code this.size() == 0}.</strong><br class="calibre7"/>
          *<br class="calibre7"/>
          * @return true if this collection is empty<br class="calibre7"/>
          */<br class="calibre7"/>
         public boolean isEmpty() { ... }
      </p>
      
      <p class="noindent">As of Java 9, the Javadoc utility still ignores the <code class="calibre12">@implSpec</code> tag unless you pass the command line switch <code class="calibre12">-tag "implSpec:a:Implementation Requirements:"</code>. Hopefully this will be remedied in a subsequent release.
      </p>
      
      <p class="indent">Don’t forget that you must take special action to generate documentation that contains
         HTML metacharacters, such as the less-than sign (<code class="calibre12">&lt;</code>), the greater-than sign (<code class="calibre12">&gt;</code>), and the ampersand (<code class="calibre12">&amp;</code>). The best way to get these characters into documentation is to surround them with
         the <code class="calibre12">{@literal}</code> tag, which suppress processing of HTML markup and nested Javadoc tags. It is like
         the <code class="calibre12">{@code}</code> tag, except that it doesn’t render the text in code font. For example, this Javadoc
         fragment:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex40a" id="pch8ex40" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">* A geometric series converges if {@literal |r| &lt; 1}.</p>
      
      <p class="noindent">generates the documentation: “A geometric series converges if |r| &lt; 1.” The <code class="calibre12">{@literal}</code> tag could have been placed around just the less-than sign rather than the entire
         inequality with the same resulting documentation, but the doc comment would have been
         less readable in the source code. This illustrates the general principle that <strong class="calibre11">doc comments should be readable both in the source code and in the generated documentation.</strong> If you can’t achieve both, the readability of the generated documentation trumps
         that of the source code.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_257"></span>The first “sentence” of each doc comment (as defined below) becomes the <em class="calibre9">summary description</em> of the element to which the comment pertains. For example, the summary description
         in the doc comment on page 255 is “Returns the element at the specified position in
         this list.” The summary description must stand on its own to describe the functionality
         of the element it summarizes. To avoid confusion, <strong class="calibre11">no two members or constructors in a class or interface should have the same summary
            description.</strong> Pay particular attention to overloadings, for which it is often natural to use the
         same first sentence (but unacceptable in doc comments).
      </p>
      
      <p class="indent">Be careful if the intended summary description contains a period, because the period
         can prematurely terminate the description. For example, a doc comment that begins
         with the phrase “<code class="calibre12">A college degree, such as B.S., M.S. or Ph.D.</code>” will result in the summary description “A college degree, such as B.S., M.S.” The
         problem is that the summary description ends at the first period that is followed
         by a space, tab, or line terminator (or at the first block tag) [Javadoc-ref]. Here,
         the second period in the abbreviation “M.S.” is followed by a space. The best solution
         is to surround the offending period and any associated text with an <code class="calibre12">{@literal}</code> tag, so the period is no longer followed by a space in the source code:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex41a" id="pch8ex41" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * A college degree, such as B.S., <strong class="calibre11">{@literal M.S.}</strong> or Ph.D.<br class="calibre7"/>
          */<br class="calibre7"/>
         public class Degree { ... }
      </p>
      
      <p class="indentb">It is a bit misleading to say that the summary description is the first <em class="calibre9">sentence</em> in a doc comment. Convention dictates that it should seldom be a complete sentence.
         For methods and constructors, the summary description should be a verb phrase (including
         any object) describing the action performed by the method. For example:
      </p>
      
      <p class="bull">• <code class="calibre12">ArrayList(int initialCapacity)</code>—Constructs an empty list with the specified initial capacity.
      </p>
      
      <p class="bull">• <code class="calibre12">Collection.size()</code>—Returns the number of elements in this collection.
      </p>
      
      <p class="noindentt">As shown in these examples, use the third person declarative tense (“returns the number”)
         rather than the second person imperative (“return the number”).
      </p>
      
      <p class="indentb">For classes, interfaces, and fields, the summary description should be a noun phrase
         describing the thing represented by an instance of the class or interface or by the
         field itself. For example:
      </p>
      
      <p class="bull">• <code class="calibre12">Instant</code>—An instantaneous point on the time-line.
      </p>
      
      <p class="bull">• <code class="calibre12">Math.PI</code>—The <code class="calibre12">double</code> value that is closer than any other to pi, the ratio of the circumference of a circle
         to its diameter.
      </p>
      
      <p class="indentt"><span epub:type="pagebreak" id="page_258"></span>In Java 9, a client-side index was added to the HTML generated by Javadoc. This index,
         which eases the task of navigating large API documentation sets, takes the form of
         a search box in the upper-right corner of the page. When you type into the box, you
         get a drop-down menu of matching pages. API elements, such as classes, methods, and
         fields, are indexed automatically. Occasionally you may wish to index additional terms
         that are important to your API. The <code class="calibre12">{@index}</code> tag was added for this purpose. Indexing a term that appears in a doc comment is
         as simple as wrapping it in this tag, as shown in this fragment:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex42a" id="pch8ex42" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">* This method complies with the <strong class="calibre11">{@index IEEE 754</strong>} standard.
      </p>
      
      <p class="indent">Generics, enums, and annotations require special care in doc comments. <strong class="calibre11">When documenting a generic type or method, be sure to document all type parameters:</strong></p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex43a" id="pch8ex43" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * An object that maps keys to values.  A map cannot contain<br class="calibre7"/>
          * duplicate keys; each key can map to at most one value.<br class="calibre7"/>
          *<br class="calibre7"/>
          * (Remainder omitted)<br class="calibre7"/>
          *<br class="calibre7"/>
          <strong class="calibre11">* @param &lt;K&gt; the type of keys maintained by this map</strong><br class="calibre7"/>
          <strong class="calibre11">* @param &lt;V&gt; the type of mapped values</strong><br class="calibre7"/>
          */<br class="calibre7"/>
         public interface Map<strong class="calibre11">&lt;K, V&gt;</strong> { ... }
      </p>
      
      <p class="indent"><strong class="calibre11">When documenting an enum type, be sure to document the constants</strong> as well as the type and any public methods. Note that you can put an entire doc comment
         on one line if it’s short:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex44a" id="pch8ex44" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * An instrument section of a symphony orchestra.<br class="calibre7"/>
          */<br class="calibre7"/>
         public enum OrchestraSection {<br class="calibre7"/>
             <strong class="calibre11">/** Woodwinds, such as flute, clarinet, and oboe. */</strong><br class="calibre7"/>
             WOODWIND,<br class="calibre7"/>
         <br class="calibre7"/>
             <strong class="calibre11">/** Brass instruments, such as french horn and trumpet. */</strong><br class="calibre7"/>
             BRASS,<br class="calibre7"/>
         <br class="calibre7"/>
             <strong class="calibre11">/** Percussion instruments, such as timpani and cymbals. */</strong><br class="calibre7"/>
             PERCUSSION,<br class="calibre7"/>
         <br class="calibre7"/>
             <strong class="calibre11">/** Stringed instruments, such as violin and cello. */</strong><br class="calibre7"/>
             STRING;<br class="calibre7"/>
         }
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_259"></span><strong class="calibre11">When documenting an annotation type, be sure to document any members</strong> as well as the type itself. Document members with noun phrases, as if they were fields.
         For the summary description of the type, use a verb phrase that says what it means
         when a program element has an annotation of this type:
      </p>
      
      <p class="codelink"><a href="ch8_images.xhtml#pch8ex45a" id="pch8ex45" class="calibre8">Click here to view code image</a></p>
      
      <p class="pre">/**<br class="calibre7"/>
          * Indicates that the annotated method is a test method that<br class="calibre7"/>
          * must throw the designated exception to pass.<br class="calibre7"/>
          */<br class="calibre7"/>
         @Retention(RetentionPolicy.RUNTIME)<br class="calibre7"/>
         @Target(ElementType.METHOD)<br class="calibre7"/>
         public @interface ExceptionTest {<br class="calibre7"/>
              /**<br class="calibre7"/>
               * The exception that the annotated test method must throw<br class="calibre7"/>
               * in order to pass. (The test is permitted to throw any<br class="calibre7"/>
               * subtype of the type described by this class object.)<br class="calibre7"/>
               */<br class="calibre7"/>
             Class&lt;? extends Throwable&gt; value();<br class="calibre7"/>
         }
      </p>
      
      <p class="indent">Package-level doc comments should be placed in a file named <code class="calibre12">package-info.java</code>. In addition to these comments, <code class="calibre12">package-info.java</code> must contain a package declaration and may contain annotations on this declaration.
         Similarly, if you elect to use the module system (<a href="ch4.xhtml#lev15" class="calibre8">Item 15</a>), module-level comments should be placed in the <code class="calibre12">module-info.java</code> file.
      </p>
      
      <p class="indent">Two aspects of APIs that are often neglected in documentation are thread-safety and
         serializability. <strong class="calibre11">Whether or not a class or static method is thread-safe, you should document its thread-safety</strong> level, as described in <a href="ch11.xhtml#lev82" class="calibre8">Item 82</a>. If a class is serializable, you should document its serialized form, as described
         in <a href="ch12.xhtml#lev87" class="calibre8">Item 87</a>.
      </p>
      
      <p class="indent">Javadoc has the ability to “inherit” method comments. If an API element does not have
         a doc comment, Javadoc searches for the most specific applicable doc comment, giving
         preference to interfaces over superclasses. The details of the search algorithm can
         be found in <em class="calibre9">The Javadoc Reference Guide</em> [Javadoc-ref]. You can also inherit <em class="calibre9">parts</em> of doc comments from supertypes using the <code class="calibre12">{@inheritDoc}</code> tag. This means, among other things, that classes can reuse doc comments from interfaces
         they implement, rather than copying these comments. This facility has the potential
         to reduce the burden of maintaining multiple sets of nearly identical doc comments,
         but it is tricky to use and has some limitations. The details are beyond the scope
         of this book.
      </p>
      
      <p class="indent"><span epub:type="pagebreak" id="page_260"></span>One caveat should be added concerning documentation comments. While it is necessary
         to provide documentation comments for all exported API elements, it is not always
         sufficient. For complex APIs consisting of multiple interrelated classes, it is often
         necessary to supplement the documentation comments with an external document describing
         the overall architecture of the API. If such a document exists, the relevant class
         or package documentation comments should include a link to it.
      </p>
      
      <p class="indent">Javadoc automatically checks for adherence to many of the recommendations in this
         item. In Java 7, the command line switch -<code class="calibre12">Xdoclint</code> was required to get this behavior. In Java 8 and 9, checking is enabled by default.
         IDE plug-ins such as checkstyle go further in checking for adherence to these recommendations
         [<a href="ref.xhtml#rBurn01" class="calibre8">Burn01</a>]. You can also reduce the likelihood of errors in doc comments by running the HTML
         files generated by Javadoc through an <em class="calibre9">HTML validity checker</em>. This will detect many incorrect uses of HTML tags. Several such checkers are available
         for download, and you can validate HTML on the web using the W3C markup validation
         service [W3C-validator]. When validating generated HTML, keep in mind that as of Java
         9, Javadoc is capable of generating HTML5 as well as HTML 4.01, though it still generates
         HTML 4.01 by default. Use the <code class="calibre12">-html5</code> command line switch if you want Javadoc to generate HTML5.
      </p>
      
      <p class="indent">The conventions described in this item cover the basics. Though it is fifteen years
         old at the time of this writing, the definitive guide to writing doc comments is still
         <em class="calibre9">How to Write Doc Comments</em> [Javadoc-guide].
      </p>
      
      <p class="indent">If you adhere to the guidelines in this item, the generated documentation should provide
         a clear description of your API. The only way to know for sure, however, is to <strong class="calibre11">read the web pages generated by the Javadoc utility.</strong> It is worth doing this for every API that will be used by others. Just as testing
         a program almost inevitably results in some changes to the code, reading the documentation
         generally results in at least a few minor changes to the doc comments.
      </p>
      
      <p class="indent">To summarize, documentation comments are the best, most effective way to document
         your API. Their use should be considered mandatory for all exported API elements.
         Adopt a consistent style that adheres to standard conventions. Remember that arbitrary
         HTML is permissible in documentation comments and that HTML metacharacters must be
         escaped.
      </p>
      
   
   


  </div>

  
  <div class="calibreToc">
    <h2><a href="../../../4bgup-l038f.html">Table of contents
</a></h2>
    <div>
  <ul>
    <li>
      <a href="cover.xhtml">Cover Page</a>
    </li>
    <li>
      <a href="pref00.xhtml">About This E-Book</a>
    </li>
    <li>
      <a href="title.xhtml">Title Page</a>
    </li>
    <li>
      <a href="copy.xhtml">Copyright Page</a>
    </li>
    <li>
      <a href="ded.xhtml">Dedication</a>
    </li>
    <li>
      <a href="contents.xhtml">Contents</a>
    </li>
    <li>
      <a href="foreword.xhtml#foreword">Foreword</a>
    </li>
    <li>
      <a href="preface.xhtml#preface">Preface</a>
    </li>
    <li>
      <a href="acknowledgments.xhtml#acknowledgments">Acknowledgments</a>
    </li>
    <li>
      <a href="ch1.xhtml#ch1">1 Introduction</a>
    </li>
    <li>
      <a href="ch2.xhtml#ch2">2 Creating and Destroying Objects</a>
      <ul>
        <li>
          <a href="ch2.xhtml#lev1">Item 1: Consider static factory methods instead of constructors</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev2">Item 2: Consider a builder when faced with many constructor parameters</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev3">Item 3: Enforce the singleton property with a private constructor or an enum type</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev4">Item 4: Enforce noninstantiability with a private constructor</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev5">Item 5: Prefer dependency injection to hardwiring resources</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev6">Item 6: Avoid creating unnecessary objects</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev7">Item 7: Eliminate obsolete object references</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev8">Item 8: Avoid finalizers and cleaners</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev9">Item 9: Prefer try-with-resources to try-finally</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch3.xhtml#ch3">3 Methods Common to All Objects</a>
      <ul>
        <li>
          <a href="ch3.xhtml#lev10">Item 10: Obey the general contract when overriding equals</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev11">Item 11: Always override hashCode when you override equals</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev12">Item 12: Always override toString</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev13">Item 13: Override clone judiciously</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev14">Item 14: Consider implementing Comparable</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch4.xhtml#ch4">4 Classes and Interfaces</a>
      <ul>
        <li>
          <a href="ch4.xhtml#lev15">Item 15: Minimize the accessibility of classes and members</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev16">Item 16: In public classes, use accessor methods, not public fields</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev17">Item 17: Minimize mutability</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev18">Item 18: Favor composition over inheritance</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev19">Item 19: Design and document for inheritance or else prohibit it</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev20">Item 20: Prefer interfaces to abstract classes</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev21">Item 21: Design interfaces for posterity</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev22">Item 22: Use interfaces only to define types</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev23">Item 23: Prefer class hierarchies to tagged classes</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev24">Item 24: Favor static member classes over nonstatic</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev25">Item 25: Limit source files to a single top-level class</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch5.xhtml#ch5">5 Generics</a>
      <ul>
        <li>
          <a href="ch5.xhtml#lev26">Item 26: Don’t use raw types</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev27">Item 27: Eliminate unchecked warnings</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev28">Item 28: Prefer lists to arrays</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev29">Item 29: Favor generic types</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev30">Item 30: Favor generic methods</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev31">Item 31: Use bounded wildcards to increase API flexibility</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev32">Item 32: Combine generics and varargs judiciously</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev33">Item 33: Consider typesafe heterogeneous containers</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch6.xhtml#ch6">6 Enums and Annotations</a>
      <ul>
        <li>
          <a href="ch6.xhtml#lev34">Item 34: Use enums instead of int constants</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev35">Item 35: Use instance fields instead of ordinals</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev36">Item 36: Use EnumSet instead of bit fields</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev37">Item 37: Use EnumMap instead of ordinal indexing</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev38">Item 38: Emulate extensible enums with interfaces</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev39">Item 39: Prefer annotations to naming patterns</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev40">Item 40: Consistently use the Override annotation</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev41">Item 41: Use marker interfaces to define types</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch7.xhtml#ch7">7 Lambdas and Streams</a>
      <ul>
        <li>
          <a href="ch7.xhtml#lev42">Item 42: Prefer lambdas to anonymous classes</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev43">Item 43: Prefer method references to lambdas</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev44">Item 44: Favor the use of standard functional interfaces</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev45">Item 45: Use streams judiciously</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev46">Item 46: Prefer side-effect-free functions in streams</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev47">Item 47: Prefer Collection to Stream as a return type</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev48">Item 48: Use caution when making streams parallel</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch8.xhtml#ch8">8 Methods</a>
      <ul>
        <li>
          <a href="ch8.xhtml#lev49">Item 49: Check parameters for validity</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev50">Item 50: Make defensive copies when needed</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev51">Item 51: Design method signatures carefully</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev52">Item 52: Use overloading judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev53">Item 53: Use varargs judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev54">Item 54: Return empty collections or arrays, not nulls</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev55">Item 55: Return optionals judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev56">Item 56: Write doc comments for all exposed API elements</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch9.xhtml#ch9">9 General Programming</a>
      <ul>
        <li>
          <a href="ch9.xhtml#lev57">Item 57: Minimize the scope of local variables</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev58">Item 58: Prefer for-each loops to traditional for loops</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev59">Item 59: Know and use the libraries</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev60">Item 60: Avoid float and double if exact answers are required</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev61">Item 61: Prefer primitive types to boxed primitives</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev62">Item 62: Avoid strings where other types are more appropriate</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev63">Item 63: Beware the performance of string concatenation</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev64">Item 64: Refer to objects by their interfaces</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev65">Item 65: Prefer interfaces to reflection</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev66">Item 66: Use native methods judiciously</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev67">Item 67: Optimize judiciously</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev68">Item 68: Adhere to generally accepted naming conventions</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch10.xhtml#ch10">10 Exceptions</a>
      <ul>
        <li>
          <a href="ch10.xhtml#lev69">Item 69: Use exceptions only for exceptional conditions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev70">Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev71">Item 71: Avoid unnecessary use of checked exceptions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev72">Item 72: Favor the use of standard exceptions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev73">Item 73: Throw exceptions appropriate to the abstraction</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev74">Item 74: Document all exceptions thrown by each method</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev75">Item 75: Include failure-capture information in detail messages</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev76">Item 76: Strive for failure atomicity</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev77">Item 77: Don’t ignore exceptions</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch11.xhtml#ch11">11 Concurrency</a>
      <ul>
        <li>
          <a href="ch11.xhtml#lev78">Item 78: Synchronize access to shared mutable data</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev79">Item 79: Avoid excessive synchronization</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev80">Item 80: Prefer executors, tasks, and streams to threads</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev81">Item 81: Prefer concurrency utilities to wait and notify</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev82">Item 82: Document thread safety</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev83">Item 83: Use lazy initialization judiciously</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev84">Item 84: Don’t depend on the thread scheduler</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch12.xhtml#ch12">12 Serialization</a>
      <ul>
        <li>
          <a href="ch12.xhtml#lev85">Item 85: Prefer alternatives to Java serialization</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev86">Item 86: Implement Serializable with great caution</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev87">Item 87: Consider using a custom serialized form</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev88">Item 88: Write readObject methods defensively</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev89">Item 89: For instance control, prefer enum types to readResolve</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev90">Item 90: Consider serialization proxies instead of serialized instances</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="app.xhtml#app">Items Corresponding to Second Edition</a>
    </li>
    <li>
      <a href="ref.xhtml#ref">References</a>
    </li>
    <li>
      <a href="index.xhtml#index">Index</a>
    </li>
    <li>
      <a href="ch2_images.xhtml#ch2_images">Code Snippets</a>
    </li>
  </ul>
</div>


  </div>
  

  <div class="calibreEbNav">
    
      <a href="ch7.xhtml" class="calibreAPrev">previous page
</a>
    

    <a href="../../../4bgup-l038f.html" class="calibreAHome">start
</a>

    
      <a href="ch9.xhtml" class="calibreANext">next page
</a>
    
  </div>

</div>

</body>
</html>
