<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>

    <title>Appendix</title>
    <meta content="urn:uuid:232c2138-be82-42d4-8a6b-b460372314a4" name="Adept.expected.resource"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>

  


<link href="../../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

</head>
<body>

<div class="calibreMeta">
  <div class="calibreMetaTitle">
  
  
    
    <h1>
      <a href="../../../4bgup-l038f.html">Effective Java, Third Edition
</a>
    </h1>
    
    
  
  </div>
  <div class="calibreMetaAuthor">
    Joshua Bloch

  </div>
</div>

<div class="calibreMain">

  <div class="calibreEbookContent">
    
      <div class="calibreEbNavTop">
        
          <a href="ch12.xhtml" class="calibreAPrev">previous page
</a>
        

        
          <a href="ref.xhtml" class="calibreANext">next page
</a>
        
      </div>
    

    
      
      <h2 class="h1" id="app"><span epub:type="pagebreak" id="page_367" class="calibre15"></span>Appendix: Items Corresponding to Second Edition
      </h2>
      
      <table class="tablewidth">
         
         <tbody class="calibre16">
            
            <tr class="calibre17">
               
               <td class="table">
                  <p class="noindent-t"><strong class="calibre11">Second Edition Item Number</strong></p>
               </td>
               
               <td class="table">
                  <p class="noindent-t"><strong class="calibre11">Third Edition Item Number, Title</strong></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">1</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">1, Consider static factory methods instead of constructors</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">2</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">2, Consider a builder when faced with many constructor parameters</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">3</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">3, Enforce the singleton property with a private constructor or an enum type</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">4</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">4, Enforce noninstantiability with a private constructor</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">5</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">6, Avoid creating unnecessary objects</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">6</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">7, Eliminate obsolete object references</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">7</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">8, Avoid finalizers and cleaners</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">8</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">10, Obey the general contract when overriding <code class="calibre12">equals</code></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">9</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">11, Always override <code class="calibre12">hashCode</code> when you override <code class="calibre12">equals</code></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">10</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">12, Always override <code class="calibre12">toString</code></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">11</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">13, Override <code class="calibre12">clone</code> judiciously
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">12</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">14, Consider implementing <code class="calibre12">Comparable</code></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">13</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">15, Minimize the accessibility of classes and members</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">14</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">16, In public classes, use accessor methods, not public fields</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">15</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">17, Minimize mutability</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">16</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">18, Favor composition over inheritance</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">17</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">19, Design and document for inheritance or else prohibit it</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1"><span epub:type="pagebreak" id="page_368"></span>18
                  </p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">20, Prefer interfaces to abstract classes</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">19</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">22, Use interfaces only to define types</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">20</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">23, Prefer class hierarchies to tagged classes</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">21</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">42, Prefer lambdas to anonymous classes</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">22</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">24, Favor static member classes over nonstatic</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">23</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">26, Don’t use raw types</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">24</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">27, Eliminate unchecked warnings</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">25</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">28, Prefer lists to arrays</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">26</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">29, Favor generic types</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">27</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">30, Favor generic methods</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">28</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">31, Use bounded wildcards to increase API flexibility</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">29</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">33, Consider typesafe heterogeneous containers</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">30</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">34, Use enums instead of <code class="calibre12">int</code> constants
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">31</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">35, Use instance fields instead of ordinals</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">32</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">36, Use <code class="calibre12">EnumSet</code> instead of bit fields
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">33</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">37, Use <code class="calibre12">EnumMap</code> instead of ordinal indexing
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">34</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">38, Emulate extensible enums with interfaces</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">35</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">39, Prefer annotations to naming patterns</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">36</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">40, Consistently use the <code class="calibre12">Override</code> annotation
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">37</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">41, Use marker interfaces to define types</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">38</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">49, Check parameters for validity</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">39</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">50, Make defensive copies when needed</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">40</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">51, Design method signatures carefully</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">41</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">52, Use overloading judiciously</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1"><span epub:type="pagebreak" id="page_369"></span>42
                  </p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">53, Use varargs judiciously</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">43</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">54, Return empty collections or arrays, not nulls</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">44</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">56, Write doc comments for all exposed API elements</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">45</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">57, Minimize the scope of local variables</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">46</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">58, Prefer for-each loops to traditional <code class="calibre12">for</code> loops
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">47</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">59, Know and use the libraries</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">48</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">60, Avoid <code class="calibre12">float</code> and <code class="calibre12">double</code> if exact answers are required
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">49</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">61, Prefer primitive types to boxed primitives</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">50</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">62, Avoid strings where other types are more appropriate</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">51</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">63, Beware the performance of string concatenation</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">52</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">64, Refer to objects by their interfaces</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">53</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">65, Prefer interfaces to reflection</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">54</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">66, Use native methods judiciously</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">55</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">67, Optimize judiciously</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">56</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">68, Adhere to generally accepted naming conventions</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">57</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">69, Use exceptions only for exceptional conditions</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">58</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">70, Use checked exceptions for recoverable conditions and runtime exceptions for programming
                     errors
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">59</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">71, Avoid unnecessary use of checked exceptions</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">60</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">72, Favor the use of standard exceptions</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">61</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">73, Throw exceptions appropriate to the abstraction</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">62</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">74, Document all exceptions thrown by each method</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">63</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">75, Include failure-capture information in detail messages</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">64</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">76, Strive for failure atomicity</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">65</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">77, Don’t ignore exceptions</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1"><span epub:type="pagebreak" id="page_370"></span>66
                  </p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">78, Synchronize access to shared mutable data</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">67</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">79, Avoid excessive synchronization</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">68</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">80, Prefer executors, tasks, and streams to threads</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">69</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">81, 81, Prefer concurrency utilities to <code class="calibre12">wait</code> and <code class="calibre12">notify</code></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">70</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">82, Document thread safety</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">71</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">83, Use lazy initialization judiciously</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">72</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">84, Don’t depend on the thread scheduler</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">73</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">(Retired)</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">74</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">85, Prefer alternatives to Java serialization</p>
                  
                  <p class="noindent1">86, 86, Implement <code class="calibre12">Serializable</code> with great caution
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">75</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">85, Prefer alternatives to Java serialization</p>
                  
                  <p class="noindent1">87, Consider using a custom serialized form</p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">76</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">85, Prefer alternatives to Java serialization</p>
                  
                  <p class="noindent1">88, Write <code class="calibre12">readObject</code> methods defensively
                  </p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="calibre18">
                  <p class="noindent1">77</p>
               </td>
               
               <td class="calibre18">
                  <p class="noindent1">85, Prefer alternatives to Java serialization</p>
                  
                  <p class="noindent1">89, For instance control, prefer enum types to <code class="calibre12">readResolve</code></p>
               </td>
               
            </tr>
            
            <tr class="calibre17">
               
               <td class="table1">
                  <p class="noindent1">78</p>
               </td>
               
               <td class="table1">
                  <p class="noindent1">85, Prefer alternatives to Java serialization</p>
                  
                  <p class="noindent1">90, Consider serialization proxies instead of serialized instances</p>
               </td>
               
            </tr>
            
         </tbody>
         
      </table>
      
   
   


  </div>

  
  <div class="calibreToc">
    <h2><a href="../../../4bgup-l038f.html">Table of contents
</a></h2>
    <div>
  <ul>
    <li>
      <a href="cover.xhtml">Cover Page</a>
    </li>
    <li>
      <a href="pref00.xhtml">About This E-Book</a>
    </li>
    <li>
      <a href="title.xhtml">Title Page</a>
    </li>
    <li>
      <a href="copy.xhtml">Copyright Page</a>
    </li>
    <li>
      <a href="ded.xhtml">Dedication</a>
    </li>
    <li>
      <a href="contents.xhtml">Contents</a>
    </li>
    <li>
      <a href="foreword.xhtml#foreword">Foreword</a>
    </li>
    <li>
      <a href="preface.xhtml#preface">Preface</a>
    </li>
    <li>
      <a href="acknowledgments.xhtml#acknowledgments">Acknowledgments</a>
    </li>
    <li>
      <a href="ch1.xhtml#ch1">1 Introduction</a>
    </li>
    <li>
      <a href="ch2.xhtml#ch2">2 Creating and Destroying Objects</a>
      <ul>
        <li>
          <a href="ch2.xhtml#lev1">Item 1: Consider static factory methods instead of constructors</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev2">Item 2: Consider a builder when faced with many constructor parameters</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev3">Item 3: Enforce the singleton property with a private constructor or an enum type</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev4">Item 4: Enforce noninstantiability with a private constructor</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev5">Item 5: Prefer dependency injection to hardwiring resources</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev6">Item 6: Avoid creating unnecessary objects</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev7">Item 7: Eliminate obsolete object references</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev8">Item 8: Avoid finalizers and cleaners</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev9">Item 9: Prefer try-with-resources to try-finally</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch3.xhtml#ch3">3 Methods Common to All Objects</a>
      <ul>
        <li>
          <a href="ch3.xhtml#lev10">Item 10: Obey the general contract when overriding equals</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev11">Item 11: Always override hashCode when you override equals</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev12">Item 12: Always override toString</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev13">Item 13: Override clone judiciously</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev14">Item 14: Consider implementing Comparable</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch4.xhtml#ch4">4 Classes and Interfaces</a>
      <ul>
        <li>
          <a href="ch4.xhtml#lev15">Item 15: Minimize the accessibility of classes and members</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev16">Item 16: In public classes, use accessor methods, not public fields</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev17">Item 17: Minimize mutability</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev18">Item 18: Favor composition over inheritance</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev19">Item 19: Design and document for inheritance or else prohibit it</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev20">Item 20: Prefer interfaces to abstract classes</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev21">Item 21: Design interfaces for posterity</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev22">Item 22: Use interfaces only to define types</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev23">Item 23: Prefer class hierarchies to tagged classes</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev24">Item 24: Favor static member classes over nonstatic</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev25">Item 25: Limit source files to a single top-level class</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch5.xhtml#ch5">5 Generics</a>
      <ul>
        <li>
          <a href="ch5.xhtml#lev26">Item 26: Don’t use raw types</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev27">Item 27: Eliminate unchecked warnings</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev28">Item 28: Prefer lists to arrays</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev29">Item 29: Favor generic types</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev30">Item 30: Favor generic methods</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev31">Item 31: Use bounded wildcards to increase API flexibility</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev32">Item 32: Combine generics and varargs judiciously</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev33">Item 33: Consider typesafe heterogeneous containers</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch6.xhtml#ch6">6 Enums and Annotations</a>
      <ul>
        <li>
          <a href="ch6.xhtml#lev34">Item 34: Use enums instead of int constants</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev35">Item 35: Use instance fields instead of ordinals</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev36">Item 36: Use EnumSet instead of bit fields</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev37">Item 37: Use EnumMap instead of ordinal indexing</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev38">Item 38: Emulate extensible enums with interfaces</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev39">Item 39: Prefer annotations to naming patterns</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev40">Item 40: Consistently use the Override annotation</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev41">Item 41: Use marker interfaces to define types</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch7.xhtml#ch7">7 Lambdas and Streams</a>
      <ul>
        <li>
          <a href="ch7.xhtml#lev42">Item 42: Prefer lambdas to anonymous classes</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev43">Item 43: Prefer method references to lambdas</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev44">Item 44: Favor the use of standard functional interfaces</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev45">Item 45: Use streams judiciously</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev46">Item 46: Prefer side-effect-free functions in streams</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev47">Item 47: Prefer Collection to Stream as a return type</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev48">Item 48: Use caution when making streams parallel</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch8.xhtml#ch8">8 Methods</a>
      <ul>
        <li>
          <a href="ch8.xhtml#lev49">Item 49: Check parameters for validity</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev50">Item 50: Make defensive copies when needed</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev51">Item 51: Design method signatures carefully</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev52">Item 52: Use overloading judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev53">Item 53: Use varargs judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev54">Item 54: Return empty collections or arrays, not nulls</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev55">Item 55: Return optionals judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev56">Item 56: Write doc comments for all exposed API elements</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch9.xhtml#ch9">9 General Programming</a>
      <ul>
        <li>
          <a href="ch9.xhtml#lev57">Item 57: Minimize the scope of local variables</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev58">Item 58: Prefer for-each loops to traditional for loops</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev59">Item 59: Know and use the libraries</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev60">Item 60: Avoid float and double if exact answers are required</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev61">Item 61: Prefer primitive types to boxed primitives</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev62">Item 62: Avoid strings where other types are more appropriate</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev63">Item 63: Beware the performance of string concatenation</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev64">Item 64: Refer to objects by their interfaces</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev65">Item 65: Prefer interfaces to reflection</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev66">Item 66: Use native methods judiciously</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev67">Item 67: Optimize judiciously</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev68">Item 68: Adhere to generally accepted naming conventions</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch10.xhtml#ch10">10 Exceptions</a>
      <ul>
        <li>
          <a href="ch10.xhtml#lev69">Item 69: Use exceptions only for exceptional conditions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev70">Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev71">Item 71: Avoid unnecessary use of checked exceptions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev72">Item 72: Favor the use of standard exceptions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev73">Item 73: Throw exceptions appropriate to the abstraction</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev74">Item 74: Document all exceptions thrown by each method</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev75">Item 75: Include failure-capture information in detail messages</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev76">Item 76: Strive for failure atomicity</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev77">Item 77: Don’t ignore exceptions</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch11.xhtml#ch11">11 Concurrency</a>
      <ul>
        <li>
          <a href="ch11.xhtml#lev78">Item 78: Synchronize access to shared mutable data</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev79">Item 79: Avoid excessive synchronization</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev80">Item 80: Prefer executors, tasks, and streams to threads</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev81">Item 81: Prefer concurrency utilities to wait and notify</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev82">Item 82: Document thread safety</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev83">Item 83: Use lazy initialization judiciously</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev84">Item 84: Don’t depend on the thread scheduler</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch12.xhtml#ch12">12 Serialization</a>
      <ul>
        <li>
          <a href="ch12.xhtml#lev85">Item 85: Prefer alternatives to Java serialization</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev86">Item 86: Implement Serializable with great caution</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev87">Item 87: Consider using a custom serialized form</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev88">Item 88: Write readObject methods defensively</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev89">Item 89: For instance control, prefer enum types to readResolve</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev90">Item 90: Consider serialization proxies instead of serialized instances</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="app.xhtml#app">Items Corresponding to Second Edition</a>
    </li>
    <li>
      <a href="ref.xhtml#ref">References</a>
    </li>
    <li>
      <a href="index.xhtml#index">Index</a>
    </li>
    <li>
      <a href="ch2_images.xhtml#ch2_images">Code Snippets</a>
    </li>
  </ul>
</div>


  </div>
  

  <div class="calibreEbNav">
    
      <a href="ch12.xhtml" class="calibreAPrev">previous page
</a>
    

    <a href="../../../4bgup-l038f.html" class="calibreAHome">start
</a>

    
      <a href="ref.xhtml" class="calibreANext">next page
</a>
    
  </div>

</div>

</body>
</html>
