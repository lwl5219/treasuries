<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>

    <title>References</title>
    <meta content="urn:uuid:232c2138-be82-42d4-8a6b-b460372314a4" name="Adept.expected.resource"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <link href="../../stylesheet.css" rel="stylesheet" type="text/css"/>
<link href="../../page_styles.css" rel="stylesheet" type="text/css"/>

  


<link href="../../calibreHtmlOutBasicCss.css" type="text/css" rel="stylesheet" />

</head>
<body>

<div class="calibreMeta">
  <div class="calibreMetaTitle">
  
  
    
    <h1>
      <a href="../../../4bgup-l038f.html">Effective Java, Third Edition
</a>
    </h1>
    
    
  
  </div>
  <div class="calibreMetaAuthor">
    Joshua Bloch

  </div>
</div>

<div class="calibreMain">

  <div class="calibreEbookContent">
    
      <div class="calibreEbNavTop">
        
          <a href="app.xhtml" class="calibreAPrev">previous page
</a>
        

        
          <a href="index.xhtml" class="calibreANext">next page
</a>
        
      </div>
    

    
      
      <h2 class="h2f" id="ref"><span epub:type="pagebreak" id="page_371" class="calibre15"></span>References
      </h2>
      
      <p class="ref" id="rAsserts">[Asserts]</p>
      
      <p class="ref1"><em class="calibre9">Programming with Assertions</em>. 2002. Sun Microsystems. <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html" class="calibre8">http://docs.oracle.com/javase/8/docs/technotes/guides/language/assert.html</a></p>
      
      <p class="ref" id="rBeck04">[Beck04]</p>
      
      <p class="ref1">Beck, Kent. 2004. <em class="calibre9">JUnit Pocket Guide</em>. Sebastopol, CA: O’Reilly Media, Inc. ISBN: 0596007434.
      </p>
      
      <p class="ref" id="rBloch01">[Bloch01]</p>
      
      <p class="ref1">Bloch, Joshua. 2001. <em class="calibre9">Effective Java Programming Language Guide.</em> Boston: Addison-Wesley. ISBN: 0201310058.
      </p>
      
      <p class="ref" id="rBloch05">[Bloch05]</p>
      
      <p class="ref1">Bloch, Joshua, and Neal Gafter. 2005. <em class="calibre9">Java Puzzlers: Traps, Pitfalls, and Corner Cases.</em> Boston: Addison-Wesley.<br class="calibre7"/>ISBN: 032133678X.
      </p>
      
      <p class="ref" id="rBlum14">[Blum14]</p>
      
      <p class="ref1">Blum, Scott. 2014. “Faster RSA in Java with GMP.” <em class="calibre9">The Square Corner</em> (blog). Feb. 14, 2014. <a href="https://medium.com/square-corner-blog/faster-rsa-in-java-with-gmp-8b13c51c6ec4" class="calibre8">https://medium.com/square-corner-blog/faster-rsa-in-java-with-gmp-8b13c51c6ec4</a></p>
      
      <p class="ref" id="rBracha04">[Bracha04]</p>
      
      <p class="ref1">Bracha, Gilad. 2004. “Lesson: Generics” online supplement to <em class="calibre9">The Java Tutorial: A Short Course on the Basics,</em> 6th ed. Upper Saddle River, NJ: Addison-Wesley, 2014. <a href="https://docs.oracle.com/javase/tutorial/extra/generics/" class="calibre8">https://docs.oracle.com/javase/tutorial/extra/generics/</a></p>
      
      <p class="ref" id="rBurn01">[Burn01]</p>
      
      <p class="ref1">Burn, Oliver. 2001–2017. <em class="calibre9">Checkstyle.</em> <a href="http://checkstyle.sourceforge.net" class="calibre8">http://checkstyle.sourceforge.net</a></p>
      
      <p class="ref" id="rCoekaerts15"><span epub:type="pagebreak" id="page_372"></span>[Coekaerts15]
      </p>
      
      <p class="ref1">Coekaerts, Wouter (@WouterCoekaerts). 2015. “Billion-laughs-style DoS for Java serialization
         <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d" class="calibre8">https://gist.github.com/coekie/a27cc406fc9f3dc7a70d</a> … WONTFIX,” Twitter, November 9, 2015, 9:46 a.m. <a href="https://twitter.com/woutercoekaerts/status/663774695381078016" class="calibre8">https://twitter.com/woutercoekaerts/status/663774695381078016</a></p>
      
      <p class="ref" id="rCompSci17">[CompSci17]</p>
      
      <p class="ref1">Brief of Computer Scientists as Amici Curiae for the United States Court of Appeals
         for the Federal Circuit, Case No. 17-1118, Oracle America, Inc. v. Google, Inc. in
         Support of Defendant-Appellee. (2017)
      </p>
      
      <p class="ref" id="rDagger">[Dagger]</p>
      
      <p class="ref1"><em class="calibre9">Dagger</em>. 2013. Square, Inc. <a href="http://square.github.io/dagger/" class="calibre8">http://square.github.io/dagger/</a></p>
      
      <p class="ref" id="rGallagher16">[Gallagher16]</p>
      
      <p class="ref1">Gallagher, Sean. 2016. “Muni system hacker hit others by scanning for year-old Java
         vulnerability.” <em class="calibre9">Ars Technica,</em> November 29, 2016. <a href="https://arstechnica.com/information-technology/2016/11/san-francisco-transit-ransomware-attacker-likely-used-year-old-java-exploit/" class="calibre8">https://arstechnica.com/information-technology/2016/11/san-francisco-transit-ransomware-attacker-likely-used-year-old-java-exploit/</a></p>
      
      <p class="ref" id="rGamma95">[Gamma95]</p>
      
      <p class="ref1">Gamma, Erich, Richard Helm, Ralph Johnson, and John Vlissides. 1995. <em class="calibre9">Design Patterns: Elements of Reusable Object-Oriented Software.</em> Reading, MA: Addison-Wesley. ISBN: 0201633612.
      </p>
      
      <p class="ref" id="rGoetz06">[Goetz06]</p>
      
      <p class="ref1">Goetz, Brian. 2006. <em class="calibre9">Java Concurrency in Practice</em>. With Tim Peierls, Joshua Bloch, Joseph Bowbeer, David Holmes, and Doug Lea. Boston:
         Addison-Wesley. ISBN: 0321349601.
      </p>
      
      <p class="ref" id="rGosling97">[Gosling97]</p>
      
      <p class="ref1">Gosling, James. 1997. “The Feel of Java.” <em class="calibre9">Computer</em> 30 no. 6 (June 1997): 53-57. <a href="http://dx.doi.org/10.1109/2.587548" class="calibre8">http://dx.doi.org/10.1109/2.587548</a></p>
      
      <p class="ref" id="rGuava">[Guava]</p>
      
      <p class="ref1"><em class="calibre9">Guava</em>. 2017. Google Inc. <a href="https://github.com/google/guava" class="calibre8">https://github.com/google/guava</a></p>
      
      <p class="ref" id="rGuice">[Guice]</p>
      
      <p class="ref1"><em class="calibre9">Guice</em>. 2006. Google Inc. <a href="https://github.com/google/guice" class="calibre8">https://github.com/google/guice</a></p>
      
      <p class="ref" id="rHerlihy12">[Herlihy12]</p>
      
      <p class="ref1">Herlihy, Maurice, and Nir Shavit. 2012. <em class="calibre9">The Art of Multiprocessor Programming, Revised Reprint.</em> Waltham, MA: Morgan Kaufmann Publishers. ISBN: 0123973376.
      </p>
      
      <p class="ref" id="rJackson75"><span epub:type="pagebreak" id="page_373"></span>[Jackson75]
      </p>
      
      <p class="ref1">Jackson, M. A. 1975. <em class="calibre9">Principles of Program Design.</em> London: Academic Press. ISBN: 0123790506.
      </p>
      
      <p class="ref" id="rJava-secure">[Java-secure]</p>
      
      <p class="ref1"><em class="calibre9">Secure Coding Guidelines for Java SE</em>. 2017. Oracle. <a href="http://www.oracle.com/technetwork/java/seccodeguide-139067.html" class="calibre8">http://www.oracle.com/technetwork/java/seccodeguide-139067.html</a></p>
      
      <p class="ref" id="rJava8-feat">[Java8-feat]</p>
      
      <p class="ref1"><em class="calibre9">What’s New in JDK 8</em>. 2014. Oracle. <a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" class="calibre8">http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html</a></p>
      
      <p class="ref" id="rJava9-feat">[Java9-feat]</p>
      
      <p class="ref1"><em class="calibre9">Java Platform, Standard Edition What’s New in Oracle JDK 9</em>. 2017. Oracle. <a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm" class="calibre8">https://docs.oracle.com/javase/9/whatsnew/toc.htm</a></p>
      
      <p class="ref" id="rJava9-api">[Java9-api]</p>
      
      <p class="ref1"><em class="calibre9">Java Platform, Standard Edition &amp; Java Development Kit Version 9 API Specification</em>. 2017. Oracle. <a href="https://docs.oracle.com/javase/9/docs/api/overview-summary.html" class="calibre8">https://docs.oracle.com/javase/9/docs/api/overview-summary.html</a></p>
      
      <p class="ref" id="rJavadoc-guide">[Javadoc-guide]</p>
      
      <p class="ref1"><em class="calibre9">How to Write Doc Comments for the Javadoc Tool</em>. 2000–2004. Sun Microsystems. <a href="http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html" class="calibre8">http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html</a></p>
      
      <p class="ref" id="rJavadoc-ref">[Javadoc-ref]</p>
      
      <p class="ref1"><em class="calibre9">Javadoc Reference Guide.</em> 2014-2017. Oracle. <a href="https://docs.oracle.com/javase/9/javadoc/javadoc.htm" class="calibre8">https://docs.oracle.com/javase/9/javadoc/javadoc.htm</a></p>
      
      <p class="ref" id="rJLS">[JLS]</p>
      
      <p class="ref1">Gosling, James, Bill Joy, Guy Steele, and Gilad Bracha. 2014. <em class="calibre9">The Java Language Specification, Java SE 8 Edition</em>. Boston: Addison-Wesley. ISBN: 013390069X.
      </p>
      
      <p class="ref" id="rJMH">[JMH]</p>
      
      <p class="ref1"><em class="calibre9">Code Tools:</em> <code class="calibre12"><em class="calibre9">jmh</em></code>. 2014. Oracle. <a href="http://openjdk.java.net/projects/code-tools/jmh/" class="calibre8">http://openjdk.java.net/projects/code-tools/jmh/</a></p>
      
      <p class="ref" id="rJSON">[JSON]</p>
      
      <p class="ref1"><em class="calibre9">Introducing JSON</em>. 2013. Ecma International. <a href="https://www.json.org" class="calibre8">https://www.json.org</a></p>
      
      <p class="ref" id="rKahan91">[Kahan91]</p>
      
      <p class="ref1">Kahan, William, and J. W. Thomas. 1991. <em class="calibre9">Augmenting a Programming Language with Complex Arithmetic</em>.<br class="calibre7"/>UCB/CSD-91-667, University of California, Berkeley.
      </p>
      
      <p class="ref" id="rKnuth74"><span epub:type="pagebreak" id="page_374"></span>[Knuth74]
      </p>
      
      <p class="ref1">Knuth, Donald. 1974. Structured Programming with <code class="calibre12">go to</code> Statements. In <em class="calibre9">Computing Surveys</em> 6: 261–301.
      </p>
      
      <p class="ref" id="rLea14">[Lea14]</p>
      
      <p class="ref1">Lea, Doug. 2014. <em class="calibre9">When to use parallel streams</em>. <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html" class="calibre8">http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html</a></p>
      
      <p class="ref" id="rLieberman86">[Lieberman86]</p>
      
      <p class="ref1">Lieberman, Henry. 1986. Using Prototypical Objects to Implement Shared Behavior in
         Object-Oriented Systems. In <em class="calibre9">Proceedings of the First ACM Conference on Object-Oriented Programming Systems, Languages,
            and Applications</em>, pages 214–223, Portland, September 1986. ACM Press.
      </p>
      
      <p class="ref" id="rLiskov87">[Liskov87]</p>
      
      <p class="ref1">Liskov, B. 1988. Data Abstraction and Hierarchy. In <em class="calibre9">Addendum to the Proceedings of OOPSLA ’87</em> and <em class="calibre9">SIGPLAN Notices,</em> Vol. 23, No. 5: 17–34, May 1988.
      </p>
      
      <p class="ref" id="rNaftalin07">[Naftalin07]</p>
      
      <p class="ref1">Naftalin, Maurice, and Philip Wadler. 2007. <em class="calibre9">Java Generics and Collections</em>. Sebastopol, CA: O’Reilly Media, Inc.<br class="calibre7"/>ISBN: 0596527756.
      </p>
      
      <p class="ref" id="rParnas72">[Parnas72]</p>
      
      <p class="ref1">Parnas, D. L. 1972. On the Criteria to Be Used in Decomposing Systems into Modules.
         In <em class="calibre9">Communications of the ACM</em> 15: 1053–1058.
      </p>
      
      <p class="ref" id="rPOSIX">[POSIX]</p>
      
      <p class="ref1">9945-1:1996 (ISO/IEC) [IEEE/ANSI Std. 1003.1 1995 Edition] Information Technology—Portable
         Operating System Interface (POSIX)—Part 1: System Application: Program Interface (API)
         C Language] (ANSI), IEEE Standards Press, ISBN: 1559375736.
      </p>
      
      <p class="ref" id="rProtobuf">[Protobuf]</p>
      
      <p class="ref1"><em class="calibre9">Protocol Buffers</em>. 2017. Google Inc. <a href="https://developers.google.com/protocol-buffers" class="calibre8">https://developers.google.com/protocol-buffers</a></p>
      
      <p class="ref" id="rSchneider16">[Schneider16]</p>
      
      <p class="ref1">Schneider, Christian. 2016. SWAT (Serial Whitelist Application Trainer). <a href="https://github.com/cschneider4711/SWAT/" class="calibre8">https://github.com/cschneider4711/SWAT/</a></p>
      
      <p class="ref" id="rSeacord17"><span epub:type="pagebreak" id="page_375"></span>[Seacord17]
      </p>
      
      <p class="ref1">Seacord, Robert. 2017. <em class="calibre9">Combating Java Deserialization Vulnerabilities with Look-Ahead Object Input Streams
            (LAOIS)</em>. San Francisco: NCC Group Whitepaper. <a href="https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2017/june/ncc_group_combating_java_deserialization_vulnerabilities_with_look-ahead_object_input_streams1.pdf" class="calibre8">https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/2017/june/ncc_group_combating_java_deserialization_vulnerabilities_with_look-ahead_object_input_streams1.pdf</a></p>
      
      <p class="ref" id="rSerialization">[Serialization]</p>
      
      <p class="ref1"><em class="calibre9">Java Object Serialization Specification</em>. March 2005. Sun Microsystems. <a href="http://docs.oracle.com/javase/9/docs/specs/serialization/index.html" class="calibre8">http://docs.oracle.com/javase/9/docs/specs/serialization/index.html</a></p>
      
      <p class="ref" id="rSestoft16">[Sestoft16]</p>
      
      <p class="ref1">Sestoft, Peter. 2016. <em class="calibre9">Java Precisely</em>, 3rd ed. Cambridge, MA: The MIT Press. ISBN: 0262529076.
      </p>
      
      <p class="ref" id="rShipilëv16">[Shipilëv16]</p>
      
      <p class="ref1">Aleksey Shipilëv. 2016. <em class="calibre9">Arrays of Wisdom of the Ancients.</em> <a href="https://shipilev.net/blog/2016/arrays-wisdom-ancients/" class="calibre8">https://shipilev.net/blog/2016/arrays-wisdom-ancients/</a></p>
      
      <p class="ref" id="rSmith62">[Smith62]</p>
      
      <p class="ref1">Smith, Robert. 1962. Algorithm 116 Complex Division. In <em class="calibre9">Communications of the ACM</em> 5, no. 8 (August 1962): 435.
      </p>
      
      <p class="ref" id="rSnyder86">[Snyder86]</p>
      
      <p class="ref1">Snyder, Alan. 1986. “Encapsulation and Inheritance in Object-Oriented Programming
         Languages.” In <em class="calibre9">Object-Oriented Programming Systems, Languages, and Applications Conference Proceedings</em>, 38–45. New York, NY: ACM Press.
      </p>
      
      <p class="ref" id="rSpring">[Spring]</p>
      
      <p class="ref1"><em class="calibre9">Spring Framework</em>. Pivotal Software, Inc. 2017. <a href="https://projects.spring.io/spring-framework/" class="calibre8">https://projects.spring.io/spring-framework/</a></p>
      
      <p class="ref" id="rStroustrup">[Stroustrup]</p>
      
      <p class="ref1">Stroustrup, Bjarne. [ca. 2000]. “Is Java the language you would have designed if you
         didn’t have to be compatible with C?” <em class="calibre9">Bjarne Stroustrup’s FAQ</em>. Updated Ocober 1, 2017. <a href="http://www.stroustrup.com/bs_faq.html#Java" class="calibre8">http://www.stroustrup.com/bs_faq.html#Java</a></p>
      
      <p class="ref" id="rStroustrup95"><span epub:type="pagebreak" id="page_376"></span>[Stroustrup95]
      </p>
      
      <p class="ref1">Stroustrup, Bjarne. 1995. “Why C++ is not just an object-oriented programming language.”
         In <em class="calibre9">Addendum to the proceedings of the 10th annual conference on Object-oriented programming
            systems, languages, and applications</em>, edited by Steven Craig Bilow and Patricia S. Bilow New York, NY: ACM. <a href="http://dx.doi.org/10.1145/260094.260207" class="calibre8">http://dx.doi.org/10.1145/260094.260207</a></p>
      
      <p class="ref" id="rSvoboda16">[Svoboda16]</p>
      
      <p class="ref1">Svoboda, David. 2016. <em class="calibre9">Exploiting Java Serialization for Fun and Profit</em>. Software Engineering Institute, Carnegie Mellon University. <a href="https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=484347" class="calibre8">https://resources.sei.cmu.edu/library/asset-view.cfm?assetid=484347</a></p>
      
      <p class="ref" id="rThomas94">[Thomas94]</p>
      
      <p class="ref1">Thomas, Jim, and Jerome T. Coonen. 1994. “Issues Regarding Imaginary Types for C and
         C++.” In <em class="calibre9">The Journal of C Language Translation</em> 5, no. 3 (March 1994): 134–138.
      </p>
      
      <p class="ref" id="rThreadStop">[ThreadStop]</p>
      
      <p class="ref1"><em class="calibre9">Why Are</em> <code class="calibre12"><em class="calibre9">Thread.stop</em></code><em class="calibre9">,</em> <code class="calibre12"><em class="calibre9">Thread.suspend</em></code><em class="calibre9">,</em> <code class="calibre12"><em class="calibre9">Thread.resume</em></code> <em class="calibre9">and</em> <code class="calibre12"><em class="calibre9">Runtime.runFinalizersOnExit</em></code> <em class="calibre9">Deprecated?</em> 1999. Sun Microsystems. <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html" class="calibre8">https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html</a></p>
      
      <p class="ref" id="rViega01">[Viega01]</p>
      
      <p class="ref1">Viega, John, and Gary McGraw. 2001. <em class="calibre9">Building Secure Software: How to Avoid Security Problems the Right Way.</em> Boston: Addison-Wesley. ISBN: 020172152X.
      </p>
      
      <p class="ref" id="rW3C-validator">[W3C-validator]</p>
      
      <p class="ref1"><em class="calibre9">W3C Markup Validation Service</em>. 2007. World Wide Web Consortium. <a href="http://validator.w3.org/" class="calibre8">http://validator.w3.org/</a></p>
      
      <p class="ref" id="rWulf72">[Wulf72]</p>
      
      <p class="ref1">Wulf, W. A Case Against the GOTO. 1972. In <em class="calibre9">Proceedings of the 25th ACM National Conference</em> 2: 791–797. New York, NY: ACM Press.
      </p>
      
   
   


  </div>

  
  <div class="calibreToc">
    <h2><a href="../../../4bgup-l038f.html">Table of contents
</a></h2>
    <div>
  <ul>
    <li>
      <a href="cover.xhtml">Cover Page</a>
    </li>
    <li>
      <a href="pref00.xhtml">About This E-Book</a>
    </li>
    <li>
      <a href="title.xhtml">Title Page</a>
    </li>
    <li>
      <a href="copy.xhtml">Copyright Page</a>
    </li>
    <li>
      <a href="ded.xhtml">Dedication</a>
    </li>
    <li>
      <a href="contents.xhtml">Contents</a>
    </li>
    <li>
      <a href="foreword.xhtml#foreword">Foreword</a>
    </li>
    <li>
      <a href="preface.xhtml#preface">Preface</a>
    </li>
    <li>
      <a href="acknowledgments.xhtml#acknowledgments">Acknowledgments</a>
    </li>
    <li>
      <a href="ch1.xhtml#ch1">1 Introduction</a>
    </li>
    <li>
      <a href="ch2.xhtml#ch2">2 Creating and Destroying Objects</a>
      <ul>
        <li>
          <a href="ch2.xhtml#lev1">Item 1: Consider static factory methods instead of constructors</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev2">Item 2: Consider a builder when faced with many constructor parameters</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev3">Item 3: Enforce the singleton property with a private constructor or an enum type</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev4">Item 4: Enforce noninstantiability with a private constructor</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev5">Item 5: Prefer dependency injection to hardwiring resources</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev6">Item 6: Avoid creating unnecessary objects</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev7">Item 7: Eliminate obsolete object references</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev8">Item 8: Avoid finalizers and cleaners</a>
        </li>
        <li>
          <a href="ch2.xhtml#lev9">Item 9: Prefer try-with-resources to try-finally</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch3.xhtml#ch3">3 Methods Common to All Objects</a>
      <ul>
        <li>
          <a href="ch3.xhtml#lev10">Item 10: Obey the general contract when overriding equals</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev11">Item 11: Always override hashCode when you override equals</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev12">Item 12: Always override toString</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev13">Item 13: Override clone judiciously</a>
        </li>
        <li>
          <a href="ch3.xhtml#lev14">Item 14: Consider implementing Comparable</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch4.xhtml#ch4">4 Classes and Interfaces</a>
      <ul>
        <li>
          <a href="ch4.xhtml#lev15">Item 15: Minimize the accessibility of classes and members</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev16">Item 16: In public classes, use accessor methods, not public fields</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev17">Item 17: Minimize mutability</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev18">Item 18: Favor composition over inheritance</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev19">Item 19: Design and document for inheritance or else prohibit it</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev20">Item 20: Prefer interfaces to abstract classes</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev21">Item 21: Design interfaces for posterity</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev22">Item 22: Use interfaces only to define types</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev23">Item 23: Prefer class hierarchies to tagged classes</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev24">Item 24: Favor static member classes over nonstatic</a>
        </li>
        <li>
          <a href="ch4.xhtml#lev25">Item 25: Limit source files to a single top-level class</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch5.xhtml#ch5">5 Generics</a>
      <ul>
        <li>
          <a href="ch5.xhtml#lev26">Item 26: Don’t use raw types</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev27">Item 27: Eliminate unchecked warnings</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev28">Item 28: Prefer lists to arrays</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev29">Item 29: Favor generic types</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev30">Item 30: Favor generic methods</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev31">Item 31: Use bounded wildcards to increase API flexibility</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev32">Item 32: Combine generics and varargs judiciously</a>
        </li>
        <li>
          <a href="ch5.xhtml#lev33">Item 33: Consider typesafe heterogeneous containers</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch6.xhtml#ch6">6 Enums and Annotations</a>
      <ul>
        <li>
          <a href="ch6.xhtml#lev34">Item 34: Use enums instead of int constants</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev35">Item 35: Use instance fields instead of ordinals</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev36">Item 36: Use EnumSet instead of bit fields</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev37">Item 37: Use EnumMap instead of ordinal indexing</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev38">Item 38: Emulate extensible enums with interfaces</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev39">Item 39: Prefer annotations to naming patterns</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev40">Item 40: Consistently use the Override annotation</a>
        </li>
        <li>
          <a href="ch6.xhtml#lev41">Item 41: Use marker interfaces to define types</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch7.xhtml#ch7">7 Lambdas and Streams</a>
      <ul>
        <li>
          <a href="ch7.xhtml#lev42">Item 42: Prefer lambdas to anonymous classes</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev43">Item 43: Prefer method references to lambdas</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev44">Item 44: Favor the use of standard functional interfaces</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev45">Item 45: Use streams judiciously</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev46">Item 46: Prefer side-effect-free functions in streams</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev47">Item 47: Prefer Collection to Stream as a return type</a>
        </li>
        <li>
          <a href="ch7.xhtml#lev48">Item 48: Use caution when making streams parallel</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch8.xhtml#ch8">8 Methods</a>
      <ul>
        <li>
          <a href="ch8.xhtml#lev49">Item 49: Check parameters for validity</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev50">Item 50: Make defensive copies when needed</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev51">Item 51: Design method signatures carefully</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev52">Item 52: Use overloading judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev53">Item 53: Use varargs judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev54">Item 54: Return empty collections or arrays, not nulls</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev55">Item 55: Return optionals judiciously</a>
        </li>
        <li>
          <a href="ch8.xhtml#lev56">Item 56: Write doc comments for all exposed API elements</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch9.xhtml#ch9">9 General Programming</a>
      <ul>
        <li>
          <a href="ch9.xhtml#lev57">Item 57: Minimize the scope of local variables</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev58">Item 58: Prefer for-each loops to traditional for loops</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev59">Item 59: Know and use the libraries</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev60">Item 60: Avoid float and double if exact answers are required</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev61">Item 61: Prefer primitive types to boxed primitives</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev62">Item 62: Avoid strings where other types are more appropriate</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev63">Item 63: Beware the performance of string concatenation</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev64">Item 64: Refer to objects by their interfaces</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev65">Item 65: Prefer interfaces to reflection</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev66">Item 66: Use native methods judiciously</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev67">Item 67: Optimize judiciously</a>
        </li>
        <li>
          <a href="ch9.xhtml#lev68">Item 68: Adhere to generally accepted naming conventions</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch10.xhtml#ch10">10 Exceptions</a>
      <ul>
        <li>
          <a href="ch10.xhtml#lev69">Item 69: Use exceptions only for exceptional conditions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev70">Item 70: Use checked exceptions for recoverable conditions and runtime exceptions for programming errors</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev71">Item 71: Avoid unnecessary use of checked exceptions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev72">Item 72: Favor the use of standard exceptions</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev73">Item 73: Throw exceptions appropriate to the abstraction</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev74">Item 74: Document all exceptions thrown by each method</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev75">Item 75: Include failure-capture information in detail messages</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev76">Item 76: Strive for failure atomicity</a>
        </li>
        <li>
          <a href="ch10.xhtml#lev77">Item 77: Don’t ignore exceptions</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch11.xhtml#ch11">11 Concurrency</a>
      <ul>
        <li>
          <a href="ch11.xhtml#lev78">Item 78: Synchronize access to shared mutable data</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev79">Item 79: Avoid excessive synchronization</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev80">Item 80: Prefer executors, tasks, and streams to threads</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev81">Item 81: Prefer concurrency utilities to wait and notify</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev82">Item 82: Document thread safety</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev83">Item 83: Use lazy initialization judiciously</a>
        </li>
        <li>
          <a href="ch11.xhtml#lev84">Item 84: Don’t depend on the thread scheduler</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="ch12.xhtml#ch12">12 Serialization</a>
      <ul>
        <li>
          <a href="ch12.xhtml#lev85">Item 85: Prefer alternatives to Java serialization</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev86">Item 86: Implement Serializable with great caution</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev87">Item 87: Consider using a custom serialized form</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev88">Item 88: Write readObject methods defensively</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev89">Item 89: For instance control, prefer enum types to readResolve</a>
        </li>
        <li>
          <a href="ch12.xhtml#lev90">Item 90: Consider serialization proxies instead of serialized instances</a>
        </li>
      </ul>
    </li>
    <li>
      <a href="app.xhtml#app">Items Corresponding to Second Edition</a>
    </li>
    <li>
      <a href="ref.xhtml#ref">References</a>
    </li>
    <li>
      <a href="index.xhtml#index">Index</a>
    </li>
    <li>
      <a href="ch2_images.xhtml#ch2_images">Code Snippets</a>
    </li>
  </ul>
</div>


  </div>
  

  <div class="calibreEbNav">
    
      <a href="app.xhtml" class="calibreAPrev">previous page
</a>
    

    <a href="../../../4bgup-l038f.html" class="calibreAHome">start
</a>

    
      <a href="index.xhtml" class="calibreANext">next page
</a>
    
  </div>

</div>

</body>
</html>
