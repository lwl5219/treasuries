<div id="pf36e" class="pf w2 h11" data-page-no="36e"><div class="pc pc36e w2 h11"><img class="bi x0 y0 w1 h1" alt="" src="csapp/bg36e.png"/><div class="t m5 x1c9 h28 y9b ff6 fs1f fc2 sc0 ls0 ws0">Section<span class="_ _10"> </span>9.9<span class="_ _60"> </span>Dynamic<span class="_ _10"> </span>Memor<span class="_"> </span>y<span class="_ _10"> </span>Allocation<span class="_ _3e"> </span><span class="ffe fs1e">877</span></div><div class="t m5 x34 h2a y257 fff fs1c fc2 sc0 ls0 ws0">Aside<span class="_ _1b"> </span><span class="ff6 fs19">How<span class="_ _11"> </span>big<span class="_ _11"> </span>is<span class="_ _11"> </span>a<span class="_ _16"> </span>word?</span></div><div class="t m5 x34 h2b y258 ff7 fs1e fc2 sc0 ls0 ws0">Recall<span class="_ _10"> </span>from<span class="_ _11"> </span>our<span class="_ _11"> </span>discussion<span class="_"> </span>of<span class="_ _11"> </span>machine<span class="_ _11"> </span>code<span class="_"> </span>in<span class="_ _11"> </span>Chapter<span class="_ _11"> </span>3<span class="_ _10"> </span>that<span class="_ _11"> </span>Intel<span class="_ _10"> </span>refers<span class="_ _11"> </span>to<span class="_ _11"> </span>4-byte<span class="_ _10"> </span>objects<span class="_ _11"> </span>as<span class="_ _11"> </span><span class="ffa">double</span></div><div class="t m5 x34 h2b y259 ffa fs1e fc2 sc0 ls0 ws0">words<span class="ff7">.<span class="_ _15"> </span>However,<span class="_ _e"> </span>throughout<span class="_ _21"> </span>this<span class="_ _21"> </span>section,<span class="_ _e"> </span>we<span class="_ _21"> </span>will<span class="_ _f"> </span>assume<span class="_ _21"> </span>that<span class="_ _f"> </span></span>words<span class="_ _21"> </span><span class="ff7">are<span class="_ _21"> </span>4-byte<span class="_ _f"> </span>objects<span class="_ _f"> </span>and<span class="_ _21"> </span>that</span></div><div class="t m5 x34 h2b y25a ffa fs1e fc2 sc0 ls0 ws0">double<span class="_"> </span>words<span class="_"> </span><span class="ff7">are<span class="_"> </span>8-byte<span class="_"> </span>objects<span class="_ _3"></span>,<span class="_"> </span>which<span class="_"> </span>is<span class="_"> </span>consistent<span class="_"> </span>with<span class="_"> </span>conventional<span class="_"> </span>terminology<span class="_ _3"></span>.</span></div><div class="t m5 x17 h26 y71ce ff7 fs19 fc2 sc0 lsd ws0">Th<span class="_ _2"></span>e<span class="_ _10"> </span><span class="ffd ls0">malloc<span class="_ _13"> </span><span class="ff7">function<span class="_"> </span>returns<span class="_ _13"> </span>a<span class="_ _13"> </span>pointer<span class="_ _13"> </span>to<span class="_"> </span>a<span class="_ _13"> </span>block<span class="_ _13"> </span>of<span class="_"> </span>memory<span class="_ _13"> </span>of<span class="_ _13"> </span>at<span class="_ _13"> </span>least<span class="_"> </span></span>size<span class="_ _13"> </span><span class="ff7">bytes</span></span></div><div class="t m5 x17 h26 y71cf ff7 fs19 fc2 sc0 ls0 ws0">that<span class="_"> </span>is<span class="_"> </span>suitably<span class="_"> </span>aligned<span class="_"> </span>for<span class="_ _11"> </span>any<span class="_"> </span>kind<span class="_"> </span>of<span class="_"> </span>data<span class="_ _11"> </span>object<span class="_"> </span>that<span class="_"> </span>might<span class="_"> </span>be<span class="_ _11"> </span>contained<span class="_"> </span>in<span class="_"> </span>the</div><div class="t m5 x17 h26 y71d0 ff7 fs19 fc2 sc0 ls0 ws0">block.<span class="_"> </span>In<span class="_ _13"> </span>practice,<span class="_ _13"> </span>the<span class="_"> </span>alignment<span class="_"> </span>depends<span class="_ _13"> </span>on<span class="_"> </span>whether<span class="_"> </span>the<span class="_ _13"> </span>code<span class="_"> </span>is<span class="_"> </span>compiled<span class="_"> </span>to<span class="_ _13"> </span>run</div><div class="t m5 x17 h26 y71d1 ff7 fs19 fc2 sc0 ls0 ws0">in<span class="_ _16"> </span>32-bit<span class="_ _11"> </span>mode<span class="_ _16"> </span>(<span class="ffd">gcc<span class="_ _16"> </span>-m32</span>)<span class="_ _11"> </span>or<span class="_ _16"> </span>64-bit<span class="_ _16"> </span>mode<span class="_ _11"> </span>(the<span class="_ _16"> </span>default).<span class="_ _16"> </span>In<span class="_ _11"> </span>32-bit<span class="_ _16"> </span>mode<span class="_ _0"></span>,<span class="_ _16"> </span><span class="ffd">malloc</span></div><div class="t m5 x17 h26 y71d2 ff7 fs19 fc2 sc0 ls0 ws0">returns<span class="_ _13"> </span>a<span class="_ _6"> </span>block<span class="_ _13"> </span>whose<span class="_ _6"> </span>address<span class="_ _13"> </span>is<span class="_ _13"> </span>always<span class="_ _6"> </span>a<span class="_ _13"> </span>multiple<span class="_ _6"> </span>of<span class="_ _13"> </span>8.<span class="_ _13"> </span>In<span class="_ _6"> </span>64-bit<span class="_ _13"> </span>mode<span class="_ _1"></span>,<span class="_ _13"> </span>the<span class="_ _13"> </span>address</div><div class="t m5 x17 h26 y71d3 ff7 fs19 fc2 sc0 ls0 ws0">is<span class="_"> </span>always<span class="_"> </span>a<span class="_"> </span>multiple<span class="_"> </span>of<span class="_"> </span>16.</div><div class="t m5 x26 h26 y71d4 ff7 fs19 fc2 sc0 ls0 ws0">If<span class="_ _6"> </span><span class="ffd">malloc<span class="_ _13"> </span></span>encounters<span class="_ _a"> </span>a<span class="_ _13"> </span>problem<span class="_ _a"> </span>(e.g<span class="_ _0"></span>.,<span class="_ _13"> </span>the<span class="_ _a"> </span>program<span class="_ _13"> </span>requests<span class="_ _a"> </span>a<span class="_ _13"> </span>block<span class="_ _6"> </span>of<span class="_ _6"> </span>memory</div><div class="t m5 x17 h26 y71d5 ff7 fs19 fc2 sc0 ls0 ws0">that<span class="_ _11"> </span>is<span class="_ _11"> </span>larger<span class="_ _16"> </span>than<span class="_"> </span>the<span class="_ _16"> </span>available<span class="_ _11"> </span>virtual<span class="_ _11"> </span>memory),<span class="_ _16"> </span>then<span class="_"> </span>it<span class="_ _16"> </span>returns<span class="_ _11"> </span>NULL<span class="_ _11"> </span>and<span class="_ _11"> </span>sets</div><div class="t m5 x17 h26 y71d6 ffd fs19 fc2 sc0 ls0 ws0">errno<span class="ff7">.<span class="_ _11"> </span></span>Malloc<span class="_ _16"> </span><span class="ff7">does<span class="_ _16"> </span>not<span class="_ _11"> </span>initialize<span class="_ _16"> </span>the<span class="_ _11"> </span>memory<span class="_ _16"> </span>it<span class="_ _16"> </span>returns<span class="_ _3"></span>.<span class="_ _16"> </span>Applications<span class="_ _16"> </span>that<span class="_ _11"> </span>want</span></div><div class="t m5 x17 h26 y71d7 ff7 fs19 fc2 sc0 ls0 ws0">initialized<span class="_ _16"> </span>dynamic<span class="_ _16"> </span>memory<span class="_ _11"> </span>can<span class="_ _16"> </span>use<span class="_ _16"> </span><span class="ffd">calloc</span>,<span class="_ _16"> </span>a<span class="_ _16"> </span>thin<span class="_ _16"> </span>wrapper<span class="_ _16"> </span>around<span class="_ _16"> </span>the<span class="_ _11"> </span><span class="ffd">malloc</span></div><div class="t m5 x17 h26 y71d8 ff7 fs19 fc2 sc0 ls0 ws0">function<span class="_ _11"> </span>that<span class="_ _11"> </span>initializes<span class="_ _16"> </span>the<span class="_"> </span>allocated<span class="_ _16"> </span>memory<span class="_ _11"> </span>to<span class="_ _11"> </span>zero<span class="_ _0"></span>.<span class="_ _11"> </span>Applications<span class="_ _11"> </span>that<span class="_ _11"> </span>want<span class="_ _16"> </span>to</div><div class="t m5 x17 h26 y71d9 ff7 fs19 fc2 sc0 ls0 ws0">change<span class="_"> </span>the<span class="_"> </span>size<span class="_"> </span>of<span class="_"> </span>a<span class="_"> </span>previously<span class="_"> </span>allocated<span class="_"> </span>block<span class="_"> </span>can<span class="_"> </span>use<span class="_"> </span>the<span class="_"> </span><span class="ffd">realloc<span class="_ _10"> </span></span>function.</div><div class="t m5 x26 h26 y71da ff7 fs19 fc2 sc0 ls0 ws0">Dynamic<span class="_ _11"> </span>memory<span class="_ _11"> </span>allocators<span class="_ _16"> </span>such<span class="_"> </span>as<span class="_ _16"> </span><span class="ffd">malloc<span class="_ _11"> </span></span>can<span class="_ _11"> </span>allocate<span class="_ _11"> </span>or<span class="_ _16"> </span>deallocate<span class="_"> </span>heap</div><div class="t m5 x17 h26 y71db ff7 fs19 fc2 sc0 ls0 ws0">memory<span class="_ _16"> </span>explicitly<span class="_ _14"> </span>by<span class="_ _16"> </span>using<span class="_ _14"> </span>the<span class="_ _16"> </span><span class="ffd">mmap<span class="_ _16"> </span></span>and<span class="_ _14"> </span><span class="ffd">munmap<span class="_ _16"> </span></span>functions<span class="_ _1"></span>,<span class="_ _15"> </span>or<span class="_ _16"> </span>they<span class="_ _14"> </span>can<span class="_ _16"> </span>use<span class="_ _16"> </span>the</div><div class="t m5 x17 h26 y71dc ffd fs19 fc2 sc0 ls0 ws0">sbrk<span class="_ _10"> </span><span class="ff7">function:</span></div><div class="t m5 x31 h2d y71dd ffd fs1e fc2 sc0 ls0 ws0">#include<span class="_ _e"> </span>&lt;unistd.h&gt;</div><div class="t m5 x31 h2d y71de ffd fs1e fc2 sc0 ls0 ws0">void<span class="_ _e"> </span>*sbrk(intptr_t<span class="_ _1f"> </span>incr);</div><div class="t m5 x125 hf2 y71df ff7 fs1f fc2 sc0 ls0 ws0">Returns:<span class="_"> </span>old<span class="_"> </span><span class="ffd fs4e">brk<span class="_ _13"> </span></span>pointer<span class="_"> </span>on<span class="_"> </span>success<span class="_ _0"></span>,<span class="_"> </span><span class="ff12">−</span>1<span class="_ _13"> </span>on<span class="_"> </span>error</div><div class="t m5 x17 h26 y71e0 ff7 fs19 fc2 sc0 lsd ws0">Th<span class="_ _2"></span>e<span class="_ _16"> </span><span class="ffd ls0">sbrk<span class="_ _11"> </span><span class="ff7">function<span class="_ _11"> </span>grows<span class="_ _11"> </span>or<span class="_ _11"> </span>shrinks<span class="_ _11"> </span>the<span class="_ _11"> </span>heap<span class="_ _11"> </span>by<span class="_ _16"> </span>adding<span class="_"> </span></span>incr<span class="_ _11"> </span><span class="ff7">to<span class="_ _11"> </span>the<span class="_ _16"> </span>kernel’<span class="_ _0"></span>s<span class="_ _11"> </span><span class="ffd">brk</span></span></span></div><div class="t m5 x17 h46 y71e1 ff7 fs19 fc2 sc0 ls0 ws0">pointer.<span class="_"> </span>If<span class="_"> </span>successful,<span class="_ _11"> </span>it<span class="_ _11"> </span>returns<span class="_ _11"> </span>the<span class="_ _11"> </span>old<span class="_ _11"> </span>value<span class="_"> </span>of<span class="_ _11"> </span><span class="ffd">brk</span>,<span class="_ _11"> </span>otherwise<span class="_ _11"> </span>it<span class="_ _11"> </span>returns<span class="_ _11"> </span><span class="ff12">−</span>1<span class="_"> </span>and</div><div class="t m5 x17 h26 y71e2 ff7 fs19 fc2 sc0 ls0 ws0">sets<span class="_ _11"> </span><span class="ffd">errno<span class="_ _11"> </span></span>to<span class="_ _11"> </span>ENOMEM.<span class="_ _11"> </span>If<span class="_ _16"> </span><span class="ffd">incr<span class="_ _11"> </span></span>is<span class="_ _11"> </span>zero<span class="_ _1"></span>,<span class="_ _16"> </span>then<span class="_ _11"> </span><span class="ffd">sbrk<span class="_ _11"> </span></span>returns<span class="_ _11"> </span>the<span class="_ _11"> </span>current<span class="_ _11"> </span>value<span class="_ _16"> </span>of</div><div class="t m5 x17 h26 y71e3 ffd fs19 fc2 sc0 ls0 ws0">brk<span class="ff7">.<span class="_ _13"> </span>Calling<span class="_"> </span></span>sbrk<span class="_ _13"> </span><span class="ff7">with<span class="_ _13"> </span>a<span class="_"> </span>negative<span class="_ _13"> </span></span>incr<span class="_ _13"> </span><span class="ff7">is<span class="_"> </span>legal<span class="_ _13"> </span>but<span class="_"> </span>tricky<span class="_ _13"> </span>because<span class="_ _13"> </span>the<span class="_"> </span>return<span class="_ _13"> </span>value</span></div><div class="t m5 x17 h26 y71e4 ff7 fs19 fc2 sc0 ls0 ws0">(the<span class="_"> </span>old<span class="_"> </span>value<span class="_"> </span>of<span class="_"> </span><span class="ffd">brk</span>)<span class="_"> </span>points<span class="_"> </span>to<span class="_"> </span><span class="ffd">abs(incr)<span class="_ _10"> </span></span>bytes<span class="_"> </span>past<span class="_"> </span>the<span class="_"> </span>new<span class="_"> </span>top<span class="_"> </span>of<span class="_"> </span>the<span class="_"> </span>heap<span class="_ _1"></span>.</div><div class="t m5 x26 h26 y71e5 ff7 fs19 fc2 sc0 ls0 ws0">Programs<span class="_"> </span>free<span class="_"> </span>allocated<span class="_"> </span>heap<span class="_"> </span>blocks<span class="_"> </span>by<span class="_"> </span>calling<span class="_"> </span>the<span class="_"> </span><span class="ffd">free<span class="_ _10"> </span></span>function.</div><div class="t m5 x31 h2d y71e6 ffd fs1e fc2 sc0 ls0 ws0">#include<span class="_ _e"> </span>&lt;stdlib.h&gt;</div><div class="t m5 x31 h2d y71e7 ffd fs1e fc2 sc0 ls0 ws0">void<span class="_ _e"> </span>free(void<span class="_ _1f"> </span>*ptr);</div><div class="t m5 x6d hf1 y71e8 ff7 fs1f fc2 sc0 ls0 ws0">Returns:<span class="_"> </span>nothing</div><div class="t m5 x17 h26 y102b ff7 fs19 fc2 sc0 lsd ws0">Th<span class="_ _2"></span>e<span class="_ _21"> </span><span class="ffd ls0">ptr<span class="_ _15"> </span><span class="ff7">argument<span class="_ _15"> </span>must<span class="_ _15"> </span>point<span class="_ _14"> </span>to<span class="_ _15"> </span>the<span class="_ _15"> </span>beginning<span class="_ _15"> </span>of<span class="_ _15"> </span>an<span class="_ _15"> </span>allocated<span class="_ _15"> </span>block<span class="_ _14"> </span>that<span class="_ _15"> </span>was</span></span></div><div class="t m5 x17 h26 y102d ff7 fs19 fc2 sc0 ls0 ws0">obtained<span class="_ _15"> </span>from<span class="_ _15"> </span><span class="ffd">malloc</span>,<span class="_ _21"> </span><span class="ffd">calloc</span><span class="ls2c0">,o<span class="_ _12"></span>r<span class="_ _0"></span><span class="ffd ls0">realloc<span class="ff7">.<span class="_ _15"> </span>If<span class="_ _15"> </span>not,<span class="_ _21"> </span>then<span class="_ _15"> </span>the<span class="_ _15"> </span>behavior<span class="_ _15"> </span>of<span class="_ _15"> </span></span>free</span></span></div><div class="t m5 x17 h26 y102e ff7 fs19 fc2 sc0 ls0 ws0">is<span class="_ _14"> </span>undeﬁned.<span class="_ _15"> </span>Even<span class="_ _15"> </span>worse<span class="_ _1"></span>,<span class="_ _21"> </span>since<span class="_ _15"> </span>it<span class="_ _15"> </span>returns<span class="_ _14"> </span>nothing,<span class="_ _15"> </span><span class="ffd">free<span class="_ _15"> </span></span>gives<span class="_ _15"> </span>no<span class="_ _14"> </span>indication<span class="_ _15"> </span>to</div><div class="t m5 x17 h26 y102f ff7 fs19 fc2 sc0 ls0 ws0">the<span class="_"> </span>application<span class="_ _11"> </span>that<span class="_ _11"> </span>something<span class="_ _11"> </span>is<span class="_"> </span>wrong.<span class="_"> </span>As<span class="_ _11"> </span>we<span class="_ _11"> </span>shall<span class="_ _11"> </span>see<span class="_"> </span>in<span class="_ _11"> </span>Section<span class="_ _11"> </span>9.11,<span class="_ _11"> </span>this<span class="_ _11"> </span>can</div><div class="t m5 x17 h26 y1030 ff7 fs19 fc2 sc0 ls0 ws0">produce<span class="_"> </span>some<span class="_"> </span>bafﬂing<span class="_"> </span>run-time<span class="_"> </span>errors<span class="_ _1"></span>.</div></div><div class="pi" data-data='{"ctm":[2.000000,0.000000,0.000000,2.000000,0.000000,0.000000]}'></div></div>
