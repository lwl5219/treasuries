<div id="pf299" class="pf w4 h1f" data-page-no="299"><div class="pc pc299 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg299.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>17.2<span class="_ _2e1"> </span>UNIX <span class="_"> </span>Domain <span class="_"> </span>Sockets<span class="_ _1b"> </span><span class="ff18">631</span></div><div class="t m0 x35 h27 y12f ff16 fsf fc0 sc0 ls0 ws0">Example <span class="_ _84"></span>— <span class="_ _84"></span>Polling XSI Messa<span class="_ _0"></span><span class="ls1233">ge <span class="_ _0"></span>Q<span class="ls0">ueues with the Help of UNIX Domain Soc<span class="_ _0"></span>kets</span></span></div><div class="t m0 x32 h2a y131 ff19 fsf fc0 sc0 ls0 ws0">In Section <span class="_ _2"></span>15.6.4, <span class="_ _2"></span>we said <span class="_ _2"></span>one <span class="_ _2"></span>of <span class="_ _2"></span>the problems with <span class="_ _2"></span>using <span class="_ _2"></span>XSI <span class="_ _2"></span>message queues <span class="_ _2"></span>is <span class="_ _2"></span>that we</div><div class="t m0 x32 h26 y132 ff19 fsf fc0 sc0 ls0 ws0">can’t <span class="_ _44"> </span>use<span class="_ _54"> </span><span class="ff1a">poll<span class="_ _54"> </span></span>or<span class="_ _54"> </span><span class="ff1a">select<span class="_ _54"> </span></span>with <span class="_ _44"> </span>them, <span class="_ _44"> </span>because <span class="_ _35"> </span>they <span class="_ _44"> </span>aren’t <span class="_ _44"> </span>associated <span class="_ _44"> </span>with <span class="_ _44"> </span>ﬁle</div><div class="t m0 x32 h2b y133 ff19 fsf fc0 sc0 ls0 ws0">descriptors. <span class="_ _66"> </span>However<span class="_ _1"></span><span class="ls180">,s<span class="_ _4f"></span><span class="ls0">ockets<span class="_ _47"> </span><span class="ff1b">are<span class="_"> </span></span>associated <span class="_ _2"></span>with <span class="_ _3"></span>ﬁle <span class="_ _2"></span>descriptors, <span class="_ _2"></span>and <span class="_ _2"></span>we <span class="_ _3"></span>can <span class="_ _2"></span>use <span class="_ _2"></span>them</span></span></div><div class="t m0 x32 h2a y134 ff19 fsf fc0 sc0 ls0 ws0">to <span class="_ _53"> </span>notify <span class="_ _e"> </span>us <span class="_ _e"> </span>when <span class="_ _e"> </span>messages <span class="_ _e"> </span>arrive.<span class="_ _65"> </span><span class="ls5f">We<span class="_ _23"></span></span>’ll <span class="_ _53"> </span>use <span class="_ _e"> </span>one <span class="_ _e"> </span>thread <span class="_ _53"> </span>per <span class="_ _e"> </span>message <span class="_ _e"> </span>queue.<span class="_ _65"> </span>Each</div><div class="t m0 x32 h26 y135 ff19 fsf fc0 sc0 ls0 ws0">thread <span class="_ _2"></span>will <span class="_ _9"></span>block <span class="_ _3"></span>in <span class="_ _9"></span>a <span class="_ _3"></span>call <span class="_ _9"></span>to<span class="_ _47"> </span><span class="ff1a">msgrcv</span><span class="ls13a5">.W<span class="_ _1d"></span><span class="ls0">hen <span class="_ _3"></span>a <span class="_ _9"></span>message <span class="_ _3"></span>arrives, <span class="_ _3"></span>the <span class="_ _9"></span>thread <span class="_ _3"></span>will <span class="_ _3"></span>write <span class="_ _9"></span>it</span></span></div><div class="t m0 x32 h2a y136 ff19 fsf fc0 sc0 ls0 ws0">down <span class="_ _3"></span>one <span class="_ _3"></span>end <span class="_ _3"></span>of <span class="_ _3"></span>a <span class="_ _3"></span>UNIX <span class="_ _3"></span>domain <span class="_ _3"></span>socket.<span class="_ _61"> </span>Our <span class="_ _3"></span>application <span class="_ _3"></span>will <span class="_ _3"></span>use <span class="_ _3"></span>the <span class="_ _3"></span>other <span class="_ _3"></span>end <span class="_ _3"></span>of <span class="_ _9"></span>the</div><div class="t m0 x32 h26 y137 ff19 fsf fc0 sc0 ls0 ws0">socket to receive the message when<span class="_"> </span><span class="ff1a">poll<span class="_ _80"> </span></span>indicates data can be read fr<span class="_ _1"></span>om the socket.</div><div class="t m0 x3f h26 y138 ff19 fsf fc0 sc0 ls0 ws0">The program in Figur<span class="lsd9b">e1<span class="_ _d"></span><span class="ls0">7.3 illustrates <span class="_ _2"></span>this technique.<span class="_ _61"> </span>The<span class="_"> </span><span class="ff1a">main<span class="_ _66"> </span></span>function <span class="_ _2"></span>creates the</span></span></div><div class="t m0 x32 h2a y139 ff19 fsf fc0 sc0 ls0 ws0">message <span class="_ _2"></span>queues <span class="_ _2"></span>and <span class="_ _2"></span>UNIX <span class="_ _3"></span>domain <span class="_ _2"></span>sockets <span class="_ _2"></span>and <span class="_ _3"></span>starts <span class="_ _2"></span>one <span class="_ _2"></span>thread <span class="_ _2"></span>to <span class="_ _2"></span>service <span class="_ _2"></span>each <span class="_ _3"></span>queue.</div><div class="t m0 x32 h2a y13a ff19 fsf fc0 sc0 ls0 ws0">Then it <span class="_ _2"></span>uses <span class="_ _2"></span>an inﬁnite <span class="_ _2"></span>loop <span class="_ _2"></span>to <span class="_ _2"></span>poll one <span class="_ _2"></span>end <span class="_ _2"></span>of the <span class="_ _2"></span>sockets.<span class="_ _61"> </span>When a <span class="_ _2"></span>socket <span class="_ _2"></span>is <span class="_ _2"></span>readable, it</div><div class="t m0 x32 h2a y254 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">ads from the socket and writes the message on the standar<span class="ls44">do<span class="_ _4f"></span><span class="ls0">utput.</span></span></span></div><div class="t m0 x32 h4e y4b15 ff1a fs28 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h4e y4b16 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;poll.h&gt;</div><div class="t m0 x32 h4e y4b17 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h4e y4b18 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;sys/msg.h&gt;</div><div class="t m0 x32 h4e y4b19 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;sys/socket.h&gt;</div><div class="t m0 x32 h4e y4b1a ff1a fs28 fc0 sc0 ls0 ws0">#define NQ<span class="_ _189"> </span><span class="ls5d0">3/<span class="_ _1c2"></span><span class="ls1b6">*n<span class="_ _1d"></span><span class="ls0">umber of queues */</span></span></span></div><div class="t m0 x32 h4e y4b1b ff1a fs28 fc0 sc0 ls0 ws0">#define MAXMSZ<span class="_ _d9"> </span>512 <span class="_ _15"> </span>/*<span class="_"> </span>maximum message size */</div><div class="t m0 x32 h4e y4b1c ff1a fs28 fc0 sc0 ls0 ws0">#define KEY<span class="_ _8a"> </span>0x123 <span class="_ _d9"> </span>/*<span class="_"> </span>key for first message queue */</div><div class="t m0 x32 h4e y4b1d ff1a fs28 fc0 sc0 ls0 ws0">struct threadinfo {</div><div class="t m0 x8a h4e y4b1e ff1a fs28 fc0 sc0 ls0 ws0">int qid;</div><div class="t m0 x8a h4e y4b1f ff1a fs28 fc0 sc0 ls0 ws0">int fd;</div><div class="t m0 x32 h4e y4b20 ff1a fs28 fc0 sc0 ls0 ws0">};</div><div class="t m0 x32 h4e y4b21 ff1a fs28 fc0 sc0 ls0 ws0">struct mymesg {</div><div class="t m0 x8a h4e y4b22 ff1a fs28 fc0 sc0 ls0 ws0">long mtype;</div><div class="t m0 x8a h4e y4b23 ff1a fs28 fc0 sc0 ls0 ws0">char mtext[MAXMSZ];</div><div class="t m0 x32 h4e y4b24 ff1a fs28 fc0 sc0 ls0 ws0">};</div><div class="t m0 x32 h4e y4b25 ff1a fs28 fc0 sc0 ls0 ws0">void *</div><div class="t m0 x32 h4e y4b26 ff1a fs28 fc0 sc0 ls0 ws0">helper(void *arg)</div><div class="t m0 x32 h4e y4b27 ff1a fs28 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h4e y4b28 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _1e7"> </span>n;</div><div class="t m0 x8a h4e y4b29 ff1a fs28 fc0 sc0 ls0 ws0">struct mymesg<span class="_ _b7"> </span>m;</div><div class="t m0 x8a h4e y4b2a ff1a fs28 fc0 sc0 ls0 ws0">struct threadinfo<span class="_ _68"> </span>*tip = arg;</div><div class="t m0 x8a h4e y4b2b ff1a fs28 fc0 sc0 ls0 ws0">for(;;) {</div><div class="t m0 x9d h4e y4b2c ff1a fs28 fc0 sc0 ls0 ws0">memset(&amp;m, 0, sizeof(m));</div><div class="t m0 x9d h4e y4b2d ff1a fs28 fc0 sc0 ls0 ws0">if ((n = msgrcv(tip-&gt;qid, &amp;m, MAXMSZ, 0, MSG_NOERROR)) &lt; 0)</div><div class="t m0 x1f h4e y4b2e ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;msgrcv error&quot;);</div><div class="t m0 x9d h4e y4b2f ff1a fs28 fc0 sc0 ls0 ws0">if (write(tip-&gt;fd, m.mtext, n) &lt; 0)</div><div class="t m0 x1f h4e y4b30 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;write error&quot;);</div><div class="t m0 x8a h4e y4b31 ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h4e y4b32 ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h4e y4b33 ff1a fs28 fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h4e y4b34 ff1a fs28 fc0 sc0 ls0 ws0">main()</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
