<div id="pf1ae" class="pf w4 h1f" data-page-no="1ae"><div class="pc pc1ae w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1ae.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">396<span class="_ _1b"> </span><span class="ff19">Threads <span class="_ _24b"> </span>Chapter<span class="_ _78"> </span><span class="ls7ed">11</span></span></div><div class="t m0 x32 h2a y12f ff19 fsf fc0 sc0 ls0 ws0">Running the program in Figur<span class="_ _0"></span><span class="ls44">e1<span class="_ _8"></span><span class="ls0">1.5 on Linux or Solaris gives us</span></span></div><div class="t m0 x3f h57 yd36 ff1a fs2d fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x3f h57 y1e07 ff1a fs2d fc0 sc0 ls0 ws0">thread 1 start</div><div class="t m0 x3f h57 y1e08 ff1a fs2d fc0 sc0 ls0 ws0">thread 1 push complete</div><div class="t m0 x3f h57 y1e09 ff1a fs2d fc0 sc0 ls0 ws0">thread 2 start</div><div class="t m0 x3f h57 y1e0a ff1a fs2d fc0 sc0 ls0 ws0">thread 2 push complete</div><div class="t m0 x3f h57 y1e0b ff1a fs2d fc0 sc0 ls0 ws0">cleanup: thread 2 second handler</div><div class="t m0 x3f h57 y1e0c ff1a fs2d fc0 sc0 ls0 ws0">cleanup: thread 2 first handler</div><div class="t m0 x3f h57 y1e0d ff1a fs2d fc0 sc0 ls0 ws0">thread 1 exit code 1</div><div class="t m0 x3f h57 y1e0e ff1a fs2d fc0 sc0 ls0 ws0">thread 2 exit code 2</div><div class="t m0 x32 h2a y3278 ff19 fsf fc0 sc0 ls0 ws0">From <span class="_ _2"></span>the <span class="_ _3"></span>output, <span class="_ _2"></span>we <span class="_ _3"></span>can <span class="_ _3"></span>see <span class="_ _3"></span>that <span class="_ _3"></span>both <span class="_ _3"></span>threads <span class="_ _2"></span>start <span class="_ _3"></span>properly <span class="_ _2"></span>and <span class="_ _3"></span>exit, <span class="_ _3"></span>but <span class="_ _3"></span>that <span class="_ _2"></span>only <span class="_ _3"></span>the</div><div class="t m0 x32 h2a y3279 ff19 fsf fc0 sc0 ls0 ws0">second thread’s cleanup handlers <span class="_ _2"></span>ar<span class="lsdb8">ec<span class="_ _4f"></span><span class="ls0">alled. <span class="_ _66"> </span>Thus,<span class="_"> </span>if <span class="_ _2"></span>the thread terminates <span class="_ _2"></span>by returning</span></span></div><div class="t m0 x32 h2a y327a ff19 fsf fc0 sc0 ls0 ws0">from <span class="_ _2"></span>its <span class="_ _9"></span>start <span class="_ _3"></span>routine, <span class="_ _3"></span>its <span class="_ _9"></span>cleanup <span class="_ _3"></span>handlers <span class="_ _9"></span>ar<span class="ls4fc">en<span class="_ _b"></span><span class="ls0">ot <span class="_ _9"></span>called, <span class="_ _3"></span>although <span class="_ _9"></span>this <span class="_ _3"></span>behavior <span class="_ _3"></span>varies</span></span></div><div class="t m0 x32 h2a y327b ff19 fsf fc0 sc0 ls0 ws0">among <span class="_ _9"></span>implementations.<span class="_ _5a"> </span>Also <span class="_ _9"></span>note <span class="_ _9"></span>that <span class="_ _9"></span>the <span class="_ _9"></span>cleanup <span class="_ _23"></span>handlers <span class="_ _9"></span>ar<span class="lsc12">ec<span class="_ _b"></span><span class="ls0">alled <span class="_ _3"></span>in <span class="_ _9"></span>the <span class="_ _23"></span>r<span class="_ _0"></span>everse</span></span></div><div class="t m0 x32 h2a y327c ff19 fsf fc0 sc0 ls0 ws0">order fr<span class="_ _0"></span>om which they wer<span class="_ _0"></span><span class="ls44">ei<span class="_ _d"></span><span class="ls0">nstalled.</span></span></div><div class="t m0 x3f h2a y327d ff19 fsf fc0 sc0 ls0 ws0">If <span class="_ _42"> </span>we <span class="_ _42"> </span>run <span class="_ _23"> </span>the <span class="_ _42"> </span>same <span class="_ _42"> </span>program <span class="_ _42"> </span>on <span class="_ _42"> </span>FreeBSD <span class="_ _23"> </span>or <span class="_ _42"> </span>Mac <span class="_ _42"> </span>OS <span class="_ _42"> </span>X, <span class="_ _42"> </span>we <span class="_ _42"> </span>see <span class="_ _42"> </span>that <span class="_ _42"> </span>the <span class="_ _42"> </span>program</div><div class="t m0 x32 h2a y327e ff19 fsf fc0 sc0 ls0 ws0">incurs <span class="_ _45"> </span>a <span class="_ _35"> </span>segmentation <span class="_ _45"> </span>violation <span class="_ _45"> </span>and <span class="_ _35"> </span>drops <span class="_ _45"> </span>core. <span class="_ _5a"> </span>This<span class="_ _5a"> </span>happens <span class="_ _35"> </span>because <span class="_ _45"> </span>on <span class="_ _35"> </span>these</div><div class="t m0 x32 h26 y327f ff19 fsf fc0 sc0 ls0 ws0">systems,<span class="_"> </span><span class="ff1a">pthread_cleanup_push<span class="_ _66"> </span></span>is implemented as a <span class="_ _2"></span>macr<span class="lsdb9">ot<span class="_ _4f"></span><span class="ls0">hat stores some context</span></span></div><div class="t m0 x32 h26 y3280 ff19 fsf fc0 sc0 ls0 ws0">on <span class="_ _9"></span>the <span class="_ _9"></span>stack.<span class="_ _51"> </span>When <span class="_ _9"></span>thread <span class="_ _9"></span>1 <span class="_ _9"></span>returns <span class="_ _9"></span>in <span class="_ _9"></span>between <span class="_ _9"></span>the <span class="_ _23"></span>call <span class="_ _9"></span>to<span class="_ _45"> </span><span class="ff1a">pthread_cleanup_push</span></div><div class="t m0 x32 h26 y3281 ff19 fsf fc0 sc0 ls0 ws0">and <span class="_ _23"></span>the <span class="_ _23"></span>call <span class="_ _9"></span>to<span class="_ _35"> </span><span class="ff1a">pthread_cleanup_pop</span><span class="lsdba">,t<span class="_ _b"></span><span class="ls0">he <span class="_ _9"></span>stack <span class="_ _23"> </span>is <span class="_ _23"></span>overwritten <span class="_ _23"></span>and <span class="_ _23"></span>these <span class="_ _23"></span>platforms</span></span></div><div class="t m0 x32 h2a y3282 ff19 fsf fc0 sc0 ls0 ws0">try <span class="_ _3"></span>to <span class="_ _9"></span>use <span class="_ _3"></span>this <span class="_ _9"></span>(now <span class="_ _3"></span>corrupted) <span class="_ _9"></span>context <span class="_ _3"></span>when <span class="_ _9"></span>they <span class="_ _3"></span>invoke <span class="_ _9"></span>the <span class="_ _9"></span>cleanup <span class="_ _3"></span>handlers.<span class="_ _5a"> </span>In <span class="_ _3"></span>the</div><div class="t m0 x32 h2a y3283 ff19 fsf fc0 sc0 ls0 ws0">Single <span class="_ _47"> </span>UNIX <span class="_ _47"> </span>Speciﬁcation, <span class="_ _45"> </span>r<span class="_ _0"></span>eturning <span class="_ _47"> </span>while <span class="_ _47"> </span>in <span class="_ _47"> </span>between <span class="_ _45"> </span>a <span class="_ _47"> </span>matched <span class="_ _47"> </span>pair <span class="_ _47"> </span>of <span class="_ _45"> </span>calls <span class="_ _47"> </span>to</div><div class="t m0 x32 h26 y3284 ff1a fsf fc0 sc0 ls0 ws0">pthread_cleanup_push<span class="_ _3a"> </span><span class="ff19">and<span class="_ _141"> </span></span>pthread_cleanup_pop<span class="_ _141"> </span><span class="ff19 ls45">re<span class="ls0">sults <span class="_ _5c"> </span>in <span class="_ _5c"> </span>undeﬁned</span></span></div><div class="t m0 x32 h2a y3285 ff19 fsf fc0 sc0 ls0 ws0">behavior<span class="_ _6"></span><span class="lsdbb">.T<span class="_ _52"></span><span class="ls0">he <span class="_ _53"> </span>only <span class="_ _53"> </span>portable <span class="_ _42"> </span>way <span class="_ _53"> </span>to <span class="_ _53"> </span>return <span class="_ _42"> </span>in <span class="_ _53"> </span>between <span class="_ _53"> </span>these <span class="_ _42"> </span>two <span class="_ _53"> </span>functions <span class="_ _53"> </span>is <span class="_ _53"> </span>to <span class="_ _53"> </span>call</span></span></div><div class="t m0 x32 h26 y3286 ff1a fsf fc0 sc0 ls0 ws0">pthread_exit<span class="ff19">.</span></div><div class="t m0 x3f h49 y3287 ff19 fs26 fc0 sc0 ls0 ws0">By <span class="_ _9"></span>now<span class="_ _6"></span><span class="lsdbc">,y<span class="_ _b"></span><span class="ls0">ou <span class="_ _9"></span>should <span class="_ _9"></span>begin <span class="_ _9"></span>to <span class="_ _9"></span>see <span class="_ _9"></span>similarities <span class="_ _9"></span>between <span class="_ _9"></span>the <span class="_ _9"></span>thread <span class="_ _3"></span>functions <span class="_ _9"></span>and <span class="_ _9"></span>the</span></span></div><div class="t m0 x32 h49 y3288 ff19 fs26 fc0 sc0 ls0 ws0">process functions.<span class="_ _59"> </span>Figur<span class="lsd3">e1<span class="_ _b"></span><span class="ls0">1.6 summarizes the similar functions.</span></span></div><div class="t m0 x140 h2e y3289 ff19 fs11 fc0 sc0 ls0 ws0">Process primitive<span class="_ _171"> </span>Thread primitive<span class="_ _21f"> </span>Description</div><div class="t m0 x140 h6d y328a ff1a fs12 fc0 sc0 ls0 ws0">fork <span class="_ _1f0"> </span>pthread_create<span class="_ _7d"> </span><span class="ff19">create a new ﬂow of control</span></div><div class="t m0 x140 h6d y328b ff1a fs12 fc0 sc0 ls0 ws0">exit <span class="_ _1f0"> </span>pthread_exit<span class="_ _a0"> </span><span class="ff19">exit from an existing ﬂow of control</span></div><div class="t m0 x140 h6d y328c ff1a fs12 fc0 sc0 ls0 ws0">waitpid <span class="_ _1c7"> </span>pthread_join<span class="_ _a0"> </span><span class="ff19">get exit status from ﬂow of control</span></div><div class="t m0 x140 h6d y328d ff1a fs12 fc0 sc0 ls0 ws0">atexit <span class="_ _1c"> </span>pthread_cleanup_push<span class="_ _6e"> </span><span class="ff19 ls222">re<span class="ls0">gister function to be called at exit from ﬂow of control</span></span></div><div class="t m0 x140 h6d y328e ff1a fs12 fc0 sc0 ls0 ws0">getpid <span class="_ _1c"> </span>pthread_self<span class="_ _a0"> </span><span class="ff19">get ID for ﬂow of control</span></div><div class="t m0 x140 h6d y328f ff1a fs12 fc0 sc0 ls0 ws0">abort <span class="_ _165"> </span>pthread_cancel<span class="_ _6f"> </span><span class="ff19 ls222">re<span class="ls0">quest abnormal termination of ﬂow of control</span></span></div><div class="t m0 x25 h30 y3290 ff18 fs13 fc0 sc0 ls0 ws0">Figure 1<span class="_ _0"></span>1.6<span class="_ _5a"> </span><span class="ff19">Comparison of process and thread primitives</span></div><div class="t m0 x3f h64 y3291 ff19 fs31 fc0 sc0 ls0 ws0">By <span class="_ _23"> </span>default, <span class="_ _42"> </span>a <span class="_ _23"> </span>thread’s <span class="_ _23"> </span>termination <span class="_ _42"> </span>status <span class="_ _23"> </span>is <span class="_ _42"> </span>retained <span class="_ _23"> </span>until <span class="_ _42"> </span>we <span class="_ _23"> </span>call<span class="_ _35"> </span><span class="ff1a">pthread_join</span></div><div class="t m0 x32 h6e y3292 ff19 fs31 fc0 sc0 ls0 ws0">for <span class="_ _45"> </span>that <span class="_ _45"> </span>thread. <span class="_ _16"> </span>A<span class="_ _5a"> </span>thread’s <span class="_ _45"> </span>underlying <span class="_ _47"> </span>storage <span class="_ _45"> </span>can <span class="_ _45"> </span>be <span class="_ _45"> </span>reclaimed <span class="_ _45"> </span>immediately <span class="_ _45"> </span>on</div><div class="t m0 x32 h79 y3293 ff19 fs31 fc0 sc0 ls0 ws0">termination <span class="_ _2"></span>if <span class="_ _3"></span>the <span class="_ _2"></span>thread <span class="_ _2"></span>has <span class="_ _2"></span>been<span class="_ _47"> </span><span class="ff1b">detached</span><span class="lsdbd">.A<span class="_ _1d"></span><span class="ls0">fter <span class="_ _3"></span>a <span class="_ _2"></span>thread <span class="_ _2"></span>is <span class="_ _3"></span>detached, <span class="_ _2"></span>we <span class="_ _3"></span>can’t <span class="_ _2"></span>use <span class="_ _3"></span>the</span></span></div><div class="t m0 x32 h64 y3294 ff1a fs31 fc0 sc0 ls0 ws0">pthread_join<span class="_ _93"> </span><span class="ff19">function <span class="_ _65"> </span>to <span class="_ _65"> </span>wait <span class="_ _65"> </span>for <span class="_ _65"> </span>its <span class="_ _65"> </span>termination <span class="_ _65"> </span>status, <span class="_ _48"> </span>because <span class="_ _65"> </span>calling</span></div><div class="t m0 x32 h64 y3295 ff1a fs31 fc0 sc0 ls0 ws0">pthread_join<span class="_ _45"> </span><span class="ff19">for <span class="_ _9"></span>a <span class="_ _9"></span>detached <span class="_ _9"></span>thread <span class="_ _9"></span>results <span class="_ _9"></span>in <span class="_ _9"></span>undeﬁned <span class="_ _9"></span>behavior<span class="_ _1"></span><span class="lsdbe">.W<span class="_ _64"></span><span class="lsdbf">ec<span class="_ _8"></span><span class="ls0">an <span class="_ _9"></span>detach <span class="_ _9"></span>a</span></span></span></span></div><div class="t m0 x32 h64 y3296 ff19 fs31 fc0 sc0 ls0 ws0">thread by calling<span class="_"> </span><span class="ff1a">pthread_detach</span>.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
