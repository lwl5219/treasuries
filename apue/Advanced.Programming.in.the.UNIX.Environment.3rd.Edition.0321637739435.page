<div id="pf1b3" class="pf w4 h1f" data-page-no="1b3"><div class="pc pc1b3 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg1b3.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>1<span class="_ _1"></span>1.6 <span class="_ _284"> </span>Thread <span class="_"> </span>Synchr<span class="_ _0"></span>onization<span class="_ _1b"> </span><span class="ff18">401</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;stdlib.h&gt;</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h57 y13a0 ff1a fs2d fc0 sc0 ls0 ws0">struct foo {</div><div class="t m0 x8a h57 y846 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>f_count;</div><div class="t m0 x8a h57 y847 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_t f_lock;</div><div class="t m0 x8a h57 y13a1 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>f_id;</div><div class="t m0 x8a h57 y1fb8 ff1a fs2d fc0 sc0 ls0 ws0">/* ... more stuff here ... */</div><div class="t m0 x32 h57 y1fb9 ff1a fs2d fc0 sc0 ls0 ws0">};</div><div class="t m0 x32 h57 y849 ff1a fs2d fc0 sc0 ls0 ws0">struct foo *</div><div class="t m0 x32 h57 y84a ff1a fs2d fc0 sc0 ls0 ws0">foo_alloc(int id) /* allocate the object */</div><div class="t m0 x32 h57 y1fdc ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y331b ff1a fs2d fc0 sc0 ls0 ws0">struct foo *fp;</div><div class="t m0 x8a h57 y84d ff1a fs2d fc0 sc0 ls0 ws0">if ((fp = malloc(sizeof(struct foo))) != NULL) {</div><div class="t m0 x9d h57 y84e ff1a fs2d fc0 sc0 ls0 ws0">fp-&gt;f_count = 1;</div><div class="t m0 x9d h57 y84f ff1a fs2d fc0 sc0 ls0 ws0">fp-&gt;f_id = id;</div><div class="t m0 x9d h57 y850 ff1a fs2d fc0 sc0 ls0 ws0">if (pthread_mutex_init(&amp;fp-&gt;f_lock, NULL) != 0) {</div><div class="t m0 x1f h57 y851 ff1a fs2d fc0 sc0 ls0 ws0">free(fp);</div><div class="t m0 x1f h57 y852 ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x9d h57 y853 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9d h57 y854 ff1a fs2d fc0 sc0 ls0 ws0">/* ... continue initialization ... */</div><div class="t m0 x8a h57 y331c ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y331d ff1a fs2d fc0 sc0 ls0 ws0">return(fp);</div><div class="t m0 x32 h57 y331e ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y2aae ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y2aaf ff1a fs2d fc0 sc0 ls0 ws0">foo_hold(struct foo *fp) /* add a reference to the object */</div><div class="t m0 x32 h57 y2ba7 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y2ba8 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="t m0 x8a h57 y2ba9 ff1a fs2d fc0 sc0 ls0 ws0">fp-&gt;f_count++;</div><div class="t m0 x8a h57 y2baa ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="t m0 x32 h57 y331f ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y85f ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y3320 ff1a fs2d fc0 sc0 ls0 ws0">foo_rele(struct foo *fp) /* release a reference to the object */</div><div class="t m0 x32 h57 y3321 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y3322 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="t m0 x8a h57 y3323 ff1a fs2d fc0 sc0 ls0 ws0">if (--fp-&gt;f_count == 0) { /* last reference */</div><div class="t m0 x9d h57 y3324 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="t m0 x9d h57 y3325 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_destroy(&amp;fp-&gt;f_lock);</div><div class="t m0 x9d h57 y3326 ff1a fs2d fc0 sc0 ls0 ws0">free(fp);</div><div class="t m0 x8a h57 y3327 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse {</span></div><div class="t m0 x9d h57 y3328 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="t m0 x8a h57 y3329 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y332a ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x188 h2d y332b ff18 fs10 fc0 sc0 ls0 ws0">Figure 1<span class="_ _0"></span>1.10<span class="_ _54"> </span><span class="ff19">Using a mutex to protect a data structure</span></div><div class="t m0 x3f h49 y332c ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _59"> </span>l<span class="_ _9"></span><span class="ls0">ock <span class="_ _47"> </span>the <span class="_ _47"> </span>mutex <span class="_ _47"> </span>befor<span class="lsde7">ei<span class="_ _1d"></span><span class="ls0">ncrementing <span class="_ _66"> </span>the <span class="_ _47"> </span>reference <span class="_ _66"> </span>count, <span class="_ _47"> </span>decrementing <span class="_ _47"> </span>the</span></span></span></div><div class="t m0 x32 h49 y332d ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">ference <span class="_ _9"></span>count, <span class="_ _3"></span>and <span class="_ _9"></span>checking <span class="_ _9"></span>whether <span class="_ _9"></span>the <span class="_ _9"></span>refer<span class="_ _0"></span>ence <span class="_ _3"></span>count <span class="_ _9"></span>reaches <span class="_ _9"></span>zero. <span class="_ _47"> </span>No<span class="_ _45"> </span>locking <span class="_ _9"></span>is</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
