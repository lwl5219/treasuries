<div id="pf1c4" class="pf w4 h1f" data-page-no="1c4"><div class="pc pc1c4 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1c4.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">418<span class="_ _1b"> </span><span class="ff19">Threads <span class="_ _24b"> </span>Chapter<span class="_ _78"> </span><span class="ls7ed">11</span></span></div><div class="t m0 x3f h26 y12f ff19 fsf fc0 sc0 ls5f ws0">To <span class="_ _35"> </span>l<span class="_ _9"></span><span class="ls0">ock <span class="_ _53"> </span>the <span class="_ _53"> </span>spin <span class="_ _53"> </span>lock, <span class="_ _53"> </span>we <span class="_ _53"> </span>can <span class="_ _53"> </span>call <span class="_ _e"> </span>either<span class="_ _44"> </span><span class="ff1a">pthread_spin_lock</span><span class="lse46">,w<span class="_ _c"></span><span class="ls0">hich <span class="_ _e"> </span>will <span class="_ _53"> </span>spin</span></span></span></div><div class="t m0 x32 h26 y130 ff19 fsf fc0 sc0 ls0 ws0">until <span class="_ _23"></span>the <span class="_ _23"></span>lock <span class="_ _23"></span>is <span class="_ _23"></span>acquired, <span class="_ _9"></span>or<span class="_ _35"> </span><span class="ff1a">pthread_spin_trylock</span><span class="ls31a">,w<span class="_ _b"></span><span class="ls0">hich <span class="_ _9"></span>will <span class="_ _23"> </span>return <span class="_ _23"></span>the<span class="_ _35"> </span><span class="ff1a">EBUSY</span></span></span></div><div class="t m0 x32 h26 y131 ff19 fsf fc0 sc0 ls0 ws0">error <span class="_ _23"> </span>if <span class="_ _42"> </span>the <span class="_ _42"> </span>lock <span class="_ _42"> </span>can’t <span class="_ _42"> </span>be <span class="_ _42"> </span>acquired <span class="_ _42"> </span>immediately<span class="_ _4"></span><span class="ls9e5">.N<span class="_ _7"></span><span class="ls0">ote <span class="_ _42"> </span>that<span class="_ _44"> </span><span class="ff1a">pthread_spin_trylock</span></span></span></div><div class="t m0 x32 h2a y132 ff19 fsf fc0 sc0 ls0 ws0">doesn’t <span class="_ _9"></span>spin.<span class="_ _5a"> </span>Regardless <span class="_ _9"></span>of <span class="_ _23"></span>how <span class="_ _9"></span>it <span class="_ _9"></span>was <span class="_ _23"></span>locked, <span class="_ _9"></span>a <span class="_ _9"></span>spin <span class="_ _23"></span>lock <span class="_ _9"></span>can <span class="_ _9"></span>be <span class="_ _23"></span>unlocked <span class="_ _9"></span>by <span class="_ _9"></span>calling</div><div class="t m0 x32 h26 y133 ff1a fsf fc0 sc0 ls0 ws0">pthread_spin_unlock<span class="ff19">.</span></div><div class="t m0 x3f h57 y2280 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y34ca ff1a fs2d fc0 sc0 ls0 ws0">int pthread_spin_lock(pthread_spinlock_t *<span class="ff1b">lock</span>);</div><div class="t m0 x3f h57 y34cb ff1a fs2d fc0 sc0 ls0 ws0">int pthread_spin_trylock(pthread_spinlock_t *<span class="ff1b">lock</span>);</div><div class="t m0 x3f h57 y34cc ff1a fs2d fc0 sc0 ls0 ws0">int pthread_spin_unlock(pthread_spinlock_t *<span class="ff1b">lock</span>);</div><div class="t m0 x7f h5f y34cd ff19 fs2d fc0 sc0 ls0 ws0">All return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x3f h4d y34ce ff19 fs26 fc0 sc0 ls0 ws0">Note <span class="_"> </span>that <span class="_ _47"> </span>if <span class="_"> </span>a <span class="_ _66"> </span>spin <span class="_ _47"> </span>lock <span class="_"> </span>is <span class="_ _47"> </span>curr<span class="_ _0"></span>ently <span class="_"> </span>unlocked, <span class="_ _47"> </span>then <span class="_"> </span>the<span class="_ _61"> </span><span class="ff1a">pthread_spin_lock</span></div><div class="t m0 x32 h49 y34cf ff19 fs26 fc0 sc0 ls0 ws0">function <span class="_ _2"></span>can <span class="_ _2"></span>lock <span class="_ _2"></span>it <span class="_ _2"></span>without <span class="_ _2"></span>spinning.<span class="_ _61"> </span>If <span class="_ _2"></span>the <span class="_ _2"></span>thread <span class="_ _2"></span>already has <span class="_ _2"></span>it <span class="_ _2"></span>locked, <span class="_ _2"></span>the <span class="_ _2"></span>results <span class="_ _2"></span>are</div><div class="t m0 x32 h4d y34d0 ff19 fs26 fc0 sc0 ls0 ws0">undeﬁned. <span class="_ _44"> </span>The<span class="_ _44"> </span>call <span class="_ _53"> </span>to<span class="_ _44"> </span><span class="ff1a">pthread_spin_lock<span class="_ _4b"> </span></span>could <span class="_ _42"> </span>fail <span class="_ _53"> </span>with <span class="_ _53"> </span>the<span class="_ _44"> </span><span class="ff1a">EDEADLK<span class="_ _4b"> </span></span>error <span class="_ _42"> </span>(or</div><div class="t m0 x32 h49 y34d1 ff19 fs26 fc0 sc0 ls0 ws0">some <span class="_ _e"> </span>other <span class="_ _e"> </span>error), <span class="_ _53"> </span>or <span class="_ _e"> </span>the <span class="_ _e"> </span>call <span class="_"> </span>could <span class="_ _53"> </span>spin <span class="_ _e"> </span>indeﬁnitely<span class="_ _4"></span><span class="lse47">.T<span class="_ _64"></span><span class="ls0">he <span class="_"> </span>behavior <span class="_ _53"> </span>depends <span class="_ _e"> </span>on <span class="_ _e"> </span>the</span></span></div><div class="t m0 x32 h49 y34d2 ff19 fs26 fc0 sc0 ls0 ws0">implementation. <span class="_ _45"> </span>If<span class="_ _45"> </span>we <span class="_ _23"></span>try <span class="_ _9"></span>to <span class="_ _9"></span>unlock <span class="_ _23"></span>a <span class="_ _9"></span>spin <span class="_ _9"></span>lock <span class="_ _23"></span>that <span class="_ _9"></span>is <span class="_ _9"></span>not <span class="_ _23"></span>locked, <span class="_ _9"></span>the <span class="_ _9"></span>results <span class="_ _9"></span>ar<span class="lse48">ea<span class="_ _b"></span><span class="ls0">lso</span></span></div><div class="t m0 x32 h49 y34d3 ff19 fs26 fc0 sc0 ls0 ws0">undeﬁned.</div><div class="t m0 x3f h4d y34d4 ff19 fs26 fc0 sc0 ls0 ws0">If <span class="_ _53"> </span>either<span class="_ _4b"> </span><span class="ff1a">pthread_spin_lock<span class="_ _4b"> </span></span>or<span class="_ _4b"> </span><span class="ff1a">pthread_spin_trylock<span class="_ _4b"> </span></span><span class="lscc">re</span>turns <span class="_ _e"> </span>0, <span class="_ _53"> </span>then <span class="_ _e"> </span>the</div><div class="t m0 x32 h49 y34d5 ff19 fs26 fc0 sc0 ls0 ws0">spin <span class="_ _42"> </span>lock <span class="_ _23"> </span>is <span class="_ _42"> </span>locked.<span class="_ _54"> </span><span class="ls164">We <span class="_ _45"> </span>n<span class="_ _9"></span></span>eed <span class="_ _42"> </span>to <span class="_ _42"> </span>be <span class="_ _42"> </span>careful <span class="_ _23"></span>not <span class="_ _42"> </span>to <span class="_ _42"> </span>call <span class="_ _42"> </span>any <span class="_ _23"> </span>functions <span class="_ _42"> </span>that <span class="_ _42"> </span>might <span class="_ _42"> </span>sleep</div><div class="t m0 x32 h49 y34d6 ff19 fs26 fc0 sc0 ls0 ws0">while <span class="_ _2"></span>holding <span class="_ _2"></span>the <span class="_ _2"></span>spin <span class="_ _2"></span>lock.<span class="_ _61"> </span>If <span class="_ _2"></span>we <span class="_ _2"></span>do, <span class="_ _2"></span>then <span class="_ _2"></span>we’ll <span class="_ _2"></span>waste <span class="_ _2"></span>CPU <span class="_ _3"></span>resour<span class="_ _0"></span>ces by <span class="_ _2"></span>extending <span class="_ _3"></span>the</div><div class="t m0 x32 h49 y34d7 ff19 fs26 fc0 sc0 ls0 ws0">time other threads will spin if they try to acquir<span class="_ _0"></span><span class="lsd3">ei<span class="_ _d"></span><span class="ls0">t.</span></span></div><div class="t m0 x32 h4b y34d8 ff16 fs27 fc0 sc0 ls0 ws0">11.6.8 <span class="_ _54"> </span>Barriers</div><div class="t m0 x32 h49 y34d9 ff19 fs26 fc0 sc0 ls0 ws0">Barriers <span class="_"> </span>ar<span class="lscb2">eas<span class="_ _5b"></span><span class="ls0">ynchronization <span class="_"> </span>mechanism <span class="_ _66"> </span>that <span class="_ _66"> </span>can <span class="_ _66"> </span>be <span class="_ _47"> </span>used <span class="_"> </span>to <span class="_ _66"> </span>coordinate <span class="_"> </span>multiple</span></span></div><div class="t m0 x32 h49 y34da ff19 fs26 fc0 sc0 ls0 ws0">threads <span class="_ _3"></span>working <span class="_ _9"></span>in <span class="_ _23"></span>parallel.<span class="_ _16"> </span><span class="lse49">Ab<span class="_ _8"></span><span class="ls0">arrier <span class="_ _9"></span>allows <span class="_ _9"></span>each <span class="_ _9"></span>thread <span class="_ _9"></span>to <span class="_ _9"></span>wait <span class="_ _9"></span>until <span class="_ _9"></span>all <span class="_ _9"></span>cooperating</span></span></div><div class="t m0 x32 h49 y34db ff19 fs26 fc0 sc0 ls0 ws0">threads <span class="_ _9"></span>have <span class="_ _23"> </span>reached <span class="_ _23"></span>the <span class="_ _23"></span>same <span class="_ _23"></span>point, <span class="_ _23"> </span>and <span class="_ _23"> </span>then <span class="_ _23"> </span>continue <span class="_ _23"> </span>executing <span class="_ _23"> </span>from <span class="_ _23"></span>there. <span class="_ _45"> </span>W<span class="_ _6"></span>e’ve</div><div class="t m0 x32 h4d y34dc ff19 fs26 fc0 sc0 ls0 ws0">already <span class="_ _53"> </span>seen <span class="_"> </span>one <span class="_ _e"> </span>form <span class="_ _e"> </span>of <span class="_"> </span>barrier<span class="_ _3"></span><span class="ls161">—t<span class="_ _6"></span><span class="ls0">he<span class="_ _59"> </span><span class="ff1a">pthread_join<span class="_ _59"> </span></span>function <span class="_ _e"> </span>acts <span class="_"> </span>as <span class="_ _53"> </span>a <span class="_"> </span>barrier <span class="_ _53"> </span>to</span></span></div><div class="t m0 x32 h49 y34dd ff19 fs26 fc0 sc0 ls0 ws0">allow one thread to wait until another thr<span class="_ _0"></span>ead exits.</div><div class="t m0 x3f h49 y34de ff19 fs26 fc0 sc0 ls0 ws0">Barrier <span class="_ _45"> </span>objects <span class="_ _47"> </span>ar<span class="lse4a">em<span class="_ _62"></span><span class="ls0">or<span class="lse4a">eg<span class="_ _26"></span><span class="ls0">eneral <span class="_ _45"> </span>than <span class="_ _45"> </span>this, <span class="_ _47"> </span>however<span class="_ _1"></span><span class="lse4b">.T<span class="_ _56"></span><span class="ls0">hey <span class="_ _45"> </span>allow <span class="_ _47"> </span>an <span class="_ _45"> </span>arbitrary</span></span></span></span></span></span></div><div class="t m0 x32 h49 y34df ff19 fs26 fc0 sc0 ls0 ws0">number <span class="_ _23"></span>of <span class="_ _23"></span>threads <span class="_ _9"></span>to <span class="_ _23"> </span>wait <span class="_ _23"></span>until <span class="_ _23"></span>all <span class="_ _23"></span>of <span class="_ _23"></span>the <span class="_ _23"></span>thr<span class="_ _0"></span>eads <span class="_ _23"></span>have <span class="_ _23"></span>completed <span class="_ _23"></span>processing, <span class="_ _9"></span>but <span class="_ _23"></span>the</div><div class="t m0 x32 h49 y34e0 ff19 fs26 fc0 sc0 ls0 ws0">threads <span class="_ _9"></span>don’t <span class="_ _42"> </span>have <span class="_ _23"></span>to <span class="_ _23"></span>exit.<span class="_ _51"> </span>They <span class="_ _23"></span>can <span class="_ _23"> </span>continue <span class="_ _23"> </span>working <span class="_ _23"> </span>after <span class="_ _23"> </span>all <span class="_ _42"> </span>thr<span class="_ _0"></span>eads <span class="_ _23"> </span>have <span class="_ _23"> </span>reached</div><div class="t m0 x32 h49 y34e1 ff19 fs26 fc0 sc0 ls0 ws0">the barrier<span class="_ _6"></span>.</div><div class="t m0 x3f h4d y34e2 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _47"> </span>c<span class="_ _23"></span><span class="ls0">an <span class="_ _23"> </span>use <span class="_ _42"> </span>the<span class="_ _35"> </span><span class="ff1a">pthread_barrier_init<span class="_ _35"> </span></span>function <span class="_ _42"> </span>to <span class="_ _23"> </span>initialize <span class="_ _42"> </span>a <span class="_ _42"> </span>barrier<span class="_ _6"></span><span class="lse4c">,a<span class="_ _43"></span><span class="ls0">nd <span class="_ _42"> </span>we</span></span></span></div><div class="t m0 x32 h4d y34e3 ff19 fs26 fc0 sc0 ls0 ws0">can use the<span class="_"> </span><span class="ff1a">pthread_barrier_destroy<span class="_ _80"> </span></span>function to deinitialize a barrier<span class="_ _1"></span>.</div><div class="t m0 x3f h4e y34e4 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h4e y34e5 ff1a fs28 fc0 sc0 ls0 ws0">int pthread_barrier_init(pthread_barrier_t *restrict<span class="_"> </span><span class="ff1b">barrier</span>,</div><div class="t m0 x10 h4e y34e6 ff1a fs28 fc0 sc0 ls0 ws0">const pthread_barrierattr_t *restrict<span class="_"> </span><span class="ff1b">attr</span>,</div><div class="t m0 x10 h4e y34e7 ff1a fs28 fc0 sc0 ls0 ws0">unsigned int<span class="_"> </span><span class="ff1b">count</span>);</div><div class="t m0 x3f h4e y34e8 ff1a fs28 fc0 sc0 ls0 ws0">int pthread_barrier_destroy(pthread_barrier_t *<span class="ff1b">barrier</span>);</div><div class="t m0 xca h7c y34e9 ff19 fs28 fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:156.494092px;bottom:641.610930px;width:89.208008px;height:19.679993px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
