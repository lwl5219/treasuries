<div id="pf276" class="pf w4 h1f" data-page-no="276"><div class="pc pc276 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg276.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">596<span class="_ _1b"> </span><span class="ff19">Network <span class="_"> </span>IPC: <span class="_"> </span>Sockets<span class="_ _2c6"> </span>Chapter <span class="_"> </span>16</span></div><div class="t m0 x3f h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">struct sockaddr_in6 {</div><div class="t m0 xf4 h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">sa_family_t <span class="_ _15"> </span>sin6_family;<span class="_ _15"> </span>/* address family */</div><div class="t m0 xf4 h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">in_port_t <span class="_ _189"> </span>sin6_port;<span class="_ _189"> </span>/* port number */</div><div class="t m0 xf4 h57 y801 ff1a fs2d fc0 sc0 ls0 ws0">uint32_t <span class="_ _b7"> </span>sin6_flowinfo;<span class="_ _3a"> </span>/* traffic class and flow info */</div><div class="t m0 xf4 h57 y802 ff1a fs2d fc0 sc0 ls0 ws0">struct in6_addr sin6_addr;<span class="_ _189"> </span>/* IPv6 address */</div><div class="t m0 xf4 h57 y803 ff1a fs2d fc0 sc0 ls0 ws0">uint32_t <span class="_ _b7"> </span>sin6_scope_id;<span class="_ _3a"> </span>/* set of interfaces for scope */</div><div class="t m0 x3f h57 y804 ff1a fs2d fc0 sc0 ls0 ws0">};</div><div class="t m0 x32 h2a y4782 ff19 fsf fc0 sc0 ls0 ws0">These <span class="_ _35"> </span>ar<span class="ls1324">et<span class="_ _52"></span><span class="ls0">he <span class="_ _44"> </span>deﬁnitions <span class="_ _44"> </span>r<span class="_ _0"></span>equired <span class="_ _35"> </span>by <span class="_ _44"> </span>the <span class="_ _35"> </span>Single <span class="_ _44"> </span>UNIX <span class="_ _35"> </span>Speciﬁcation.<span class="_ _93"> </span>Individual</span></span></div><div class="t m0 x32 h26 y4783 ff19 fsf fc0 sc0 ls0 ws0">implementations ar<span class="ls5f4">ef<span class="_ _4f"></span><span class="ls45">re<span class="_ _2"></span><span class="ls0">e<span class="_ _66"> </span>to<span class="_ _66"> </span>add <span class="_ _2"></span>mor<span class="ls1325">eﬁ<span class="_ _4f"></span><span class="ls0">elds. <span class="_ _66"> </span>For<span class="_ _66"> </span>example, <span class="_ _2"></span>on <span class="_ _2"></span>Linux, <span class="_ _2"></span>the<span class="_"> </span><span class="ff1a">sockaddr_in</span></span></span></span></span></span></div><div class="t m0 x32 h2a y4784 ff19 fsf fc0 sc0 ls0 ws0">structur<span class="_ _0"></span>e<span class="_"> </span>is<span class="_"> </span>deﬁned as</div><div class="t m0 x3f h57 y4785 ff1a fs2d fc0 sc0 ls0 ws0">struct sockaddr_in {</div><div class="t m0 xf4 h57 y4786 ff1a fs2d fc0 sc0 ls0 ws0">sa_family_t <span class="_ _15"> </span>sin_family;<span class="_ _15"> </span>/* address family */</div><div class="t m0 xf4 h57 y4787 ff1a fs2d fc0 sc0 ls0 ws0">in_port_t <span class="_ _189"> </span>sin_port;<span class="_ _189"> </span>/* port number */</div><div class="t m0 xf4 h57 y4788 ff1a fs2d fc0 sc0 ls0 ws0">struct in_addr<span class="_ _d9"> </span>sin_addr; <span class="_ _8a"> </span>/*<span class="_"> </span>IPv4 address */</div><div class="t m0 xf4 h57 y4789 ff1a fs2d fc0 sc0 ls0 ws0">unsigned char<span class="_ _68"> </span>sin_zero[8]; <span class="_ _3a"> </span>/*<span class="_"> </span>filler */</div><div class="t m0 x3f h57 y478a ff1a fs2d fc0 sc0 ls0 ws0">};</div><div class="t m0 x32 h26 y478b ff19 fsf fc0 sc0 ls0 ws0">wher<span class="ls44">et<span class="_ _4f"></span><span class="ls0">he<span class="_"> </span><span class="ff1a">sin_zero<span class="_ _66"> </span></span>member is a ﬁller ﬁeld that should be set to all-zer<span class="ls44">ov<span class="_ _4f"></span><span class="ls0">alues.</span></span></span></span></div><div class="t m0 x3f h26 y478c ff19 fsf fc0 sc0 ls0 ws0">Note <span class="_"> </span>that <span class="_"> </span>although <span class="_ _e"> </span>the<span class="_ _46"> </span><span class="ff1a">sockaddr_in<span class="_ _59"> </span></span>and<span class="_ _59"> </span><span class="ff1a">sockaddr_in6<span class="_ _46"> </span></span>structures <span class="_ _e"> </span>ar<span class="ls1326">eq<span class="_ _4a"></span><span class="ls0">uite</span></span></div><div class="t m0 x32 h26 y478d ff19 fsf fc0 sc0 ls0 ws0">differ<span class="_ _0"></span>ent, <span class="_ _3"></span>they <span class="_ _23"></span>ar<span class="_ _0"></span><span class="ls97d">eb<span class="_ _b"></span><span class="ls0">oth <span class="_ _9"></span>passed <span class="_ _9"></span>to <span class="_ _9"></span>the <span class="_ _9"></span>socket <span class="_ _9"></span>routines <span class="_ _9"></span>cast <span class="_ _9"></span>to <span class="_ _9"></span>a<span class="_ _45"> </span><span class="ff1a">sockaddr<span class="_ _45"> </span></span>structur<span class="_ _0"></span>e. <span class="_ _45"> </span>In</span></span></div><div class="t m0 x32 h2a y478e ff19 fsf fc0 sc0 ls0 ws0">Section <span class="_ _2"></span>17.2, <span class="_ _2"></span>we <span class="_ _2"></span>will <span class="_ _2"></span>see <span class="_ _2"></span>that <span class="_ _2"></span>the <span class="_ _3"></span>structur<span class="_ _0"></span>e<span class="_ _66"> </span>of<span class="_ _47"> </span>a<span class="_ _66"> </span>UNIX <span class="_ _2"></span>domain <span class="_ _2"></span>socket <span class="_ _2"></span>address <span class="_ _2"></span>is <span class="_ _2"></span>different</div><div class="t m0 x32 h2a y478f ff19 fsf fc0 sc0 ls0 ws0">from both of the Internet domain socket addr<span class="_ _0"></span>ess formats.</div><div class="t m0 x3f h2a y4790 ff19 fsf fc0 sc0 ls0 ws0">It is sometimes <span class="_ _2"></span>necessary to print <span class="_ _2"></span>an address in a format <span class="_ _2"></span>that is understandable <span class="_ _2"></span>by a</div><div class="t m0 x32 h26 y4791 ff19 fsf fc0 sc0 ls0 ws0">person <span class="_ _3"></span>instead <span class="_ _3"></span>of <span class="_ _9"></span>a <span class="_ _3"></span>computer<span class="_ _6"></span><span class="ls785">.T<span class="_ _1d"></span><span class="ls0">he <span class="_ _9"></span>BSD <span class="_ _3"></span>networking <span class="_ _3"></span>softwar<span class="ls84">ei<span class="_ _b"></span><span class="ls0">ncluded <span class="_ _9"></span>the<span class="_ _47"> </span><span class="ff1a">inet_addr</span></span></span></span></span></div><div class="t m0 x32 h26 y4792 ff19 fsf fc0 sc0 ls0 ws0">and<span class="_"> </span><span class="ff1a">inet_ntoa<span class="_ _47"> </span></span>functions to <span class="_ _2"></span>convert <span class="_ _2"></span>between the <span class="_ _2"></span>binary <span class="_ _2"></span>address format <span class="_ _2"></span>and <span class="_ _2"></span>a <span class="_ _2"></span>string in</div><div class="t m0 x32 h2a y4793 ff19 fsf fc0 sc0 ls0 ws0">dotted-decimal <span class="_ _45"> </span>notation <span class="_ _47"> </span>(a.b.c.d).<span class="_ _1a3"> </span>These <span class="_ _45"> </span>functions, <span class="_ _47"> </span>however<span class="_ _1"></span><span class="ls731">,w<span class="_ _62"></span><span class="ls0">ork <span class="_ _45"> </span>only <span class="_ _45"> </span>with <span class="_ _47"> </span>IPv4</span></span></div><div class="t m0 x32 h26 y4794 ff19 fsf fc0 sc0 ls0 ws0">addresses. <span class="_ _50"> </span>T<span class="_ _6"></span>wo <span class="_ _16"> </span>new <span class="_ _16"> </span>functions<span class="_ _9"></span>—<span class="_ _9"></span><span class="ff1a">inet_ntop<span class="_ _5f"> </span></span>and<span class="_ _5f"> </span><span class="ff1a">inet_pton<span class="_ _9"></span></span><span class="ls9d">—s<span class="_ _6"></span><span class="ls0">upport <span class="_ _16"> </span>similar</span></span></div><div class="t m0 x32 h2a y4795 ff19 fsf fc0 sc0 ls0 ws0">functionality and work with both IPv4 and IPv6 addresses.</div><div class="t m0 x3f h57 y4796 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;arpa/inet.h&gt;</div><div class="t m0 x3f h57 y4797 ff1a fs2d fc0 sc0 ls0 ws0">const char *inet_ntop(int<span class="_"> </span><span class="ff1b">domain</span><span class="ls15c">,c<span class="_ _1d"></span><span class="ls0">onst void *restrict<span class="_"> </span><span class="ff1b">addr</span>,</span></span></div><div class="t m0 x146 h57 y4798 ff1a fs2d fc0 sc0 ls0 ws0">char *restrict<span class="_"> </span><span class="ff1b">str</span><span class="ls15c">,s<span class="_ _1d"></span><span class="ls0">ocklen_t<span class="_"> </span><span class="ff1b">size</span>);</span></span></div><div class="t m0 x128 h57 y4799 ff19 fs2d fc0 sc0 ls0 ws0">Returns: pointer to address string on success,<span class="_"> </span><span class="ff1a">NULL<span class="_ _e"> </span></span>on error</div><div class="t m0 x3f h57 y479a ff1a fs2d fc0 sc0 ls0 ws0">int inet_pton(int<span class="_"> </span><span class="ff1b">domain</span><span class="ls15c">,c<span class="_ _1d"></span><span class="ls0">onst char *restrict<span class="_"> </span><span class="ff1b">str</span>,</span></span></div><div class="t m0 xea h57 y479b ff1a fs2d fc0 sc0 ls0 ws0">void *restrict<span class="_"> </span><span class="ff1b">addr</span>);</div><div class="t m0 xb7 h5f y479c ff19 fs2d fc0 sc0 ls0 ws0">Returns: 1 on success, 0 if the format is invalid, or<span class="_"> </span><span class="ff20">−</span>1<span class="_"> </span>on<span class="_"> </span>error</div><div class="t m0 x3f h4d y479d ff19 fs26 fc0 sc0 ls0 ws0">The<span class="_ _35"> </span><span class="ff1a">inet_ntop<span class="_ _35"> </span></span>function <span class="_ _42"> </span>converts <span class="_ _42"> </span>a <span class="_ _23"> </span>binary <span class="_ _42"> </span>address <span class="_ _23"> </span>in <span class="_ _42"> </span>network <span class="_ _23"> </span>byte <span class="_ _42"> </span>order <span class="_ _23"> </span>into <span class="_ _42"> </span>a</div><div class="t m0 x32 h4d y479e ff19 fs26 fc0 sc0 ls0 ws0">text <span class="_ _53"> </span>string;<span class="_ _44"> </span><span class="ff1a">inet_pton<span class="_ _4b"> </span></span>converts <span class="_ _42"> </span>a <span class="_ _53"> </span>text <span class="_ _53"> </span>string <span class="_ _53"> </span>into <span class="_ _53"> </span>a <span class="_ _53"> </span>binary <span class="_ _53"> </span>address <span class="_ _53"> </span>in <span class="_ _53"> </span>network <span class="_ _53"> </span>byte</div><div class="t m0 x32 h4d y479f ff19 fs26 fc0 sc0 ls0 ws0">order<span class="_ _6"></span><span class="ls199">.O<span class="_ _4a"></span><span class="ls0">nly two<span class="_"> </span><span class="ff1b">domain<span class="_"> </span></span>values ar<span class="lsd3">es<span class="_ _4f"></span><span class="ls0">upported:<span class="_"> </span><span class="ff1a">AF_INET<span class="_ _66"> </span></span>and<span class="_"> </span><span class="ff1a">AF_INET6</span>.</span></span></span></span></div><div class="t m0 x3f h4d y47a0 ff19 fs26 fc0 sc0 ls0 ws0">For<span class="_ _45"> </span><span class="ff1a">inet_ntop</span><span class="ls1327">,t<span class="_ _b"></span><span class="ls0">he<span class="_ _45"> </span><span class="ff1b">size<span class="_ _45"> </span></span>parameter <span class="_ _9"></span>speciﬁes <span class="_ _9"></span>the <span class="_ _9"></span>size <span class="_ _23"></span>of <span class="_ _9"></span>the <span class="_ _9"></span>buffer <span class="_ _9"></span>(<span class="ff1b">str</span><span class="ls1327">)t<span class="_ _b"></span><span class="ls7bc">oh<span class="_ _b"></span><span class="ls0">old <span class="_ _9"></span>the</span></span></span></span></span></div><div class="t m0 x32 h4d y47a1 ff19 fs26 fc0 sc0 ls0 ws0">text <span class="_ _42"> </span>string.<span class="_ _51"> </span><span class="lsf94">Tw<span class="_ _23"></span><span class="ls1328">oc<span class="_ _43"></span><span class="ls0">onstants <span class="_ _23"> </span>ar<span class="ls1328">ed<span class="_ _43"></span><span class="ls0">eﬁned <span class="_ _23"> </span>to <span class="_ _42"> </span>make <span class="_ _42"> </span>our <span class="_ _42"> </span>job <span class="_ _42"> </span>easier:<span class="_ _35"> </span><span class="ff1a">INET_ADDRSTRLEN<span class="_ _44"> </span></span>is</span></span></span></span></span></div><div class="t m0 x32 h49 y47a2 ff19 fs26 fc0 sc0 ls0 ws0">large <span class="_ _5f"> </span>enough <span class="_ _5f"> </span>to <span class="_ _1a3"> </span>hold <span class="_ _5f"> </span>a <span class="_ _1a3"> </span>text <span class="_ _5f"> </span>string <span class="_ _1a3"> </span>repr<span class="_ _0"></span>esenting <span class="_ _5f"> </span>an <span class="_ _1a3"> </span>IPv4 <span class="_ _5f"> </span>address, <span class="_ _5f"> </span>and</div><div class="t m0 x32 h4d y47a3 ff1a fs26 fc0 sc0 ls0 ws0">INET6_ADDRSTRLEN<span class="_ _66"> </span><span class="ff19">is large enough <span class="_ _2"></span>to hold <span class="_ _2"></span>a <span class="_ _2"></span>text string <span class="_ _2"></span>repr<span class="_ _0"></span>esenting an <span class="_ _2"></span>IPv6 address.</span></div><div class="t m0 x32 h4d y47a4 ff19 fs26 fc0 sc0 ls0 ws0">For<span class="_ _35"> </span><span class="ff1a">inet_pton</span><span class="ls1329">,t<span class="_ _43"></span><span class="ls0">he<span class="_ _44"> </span><span class="ff1b">addr<span class="_ _35"> </span></span>buffer <span class="_ _23"> </span>needs <span class="_ _42"> </span>to <span class="_ _42"> </span>be <span class="_ _42"> </span>large <span class="_ _23"> </span>enough <span class="_ _42"> </span>to <span class="_ _42"> </span>hold <span class="_ _42"> </span>a <span class="_ _23"> </span>32</span></span></div><div class="t m0 x3b h49 y47a5 ff19 fs26 fc0 sc0 ls0 ws0">-</div><div class="t m0 x1e6 h49 y47a4 ff19 fs26 fc0 sc0 ls0 ws0">bit <span class="_ _42"> </span>address <span class="_ _23"></span>if</div><div class="t m0 x32 h4d y47a6 ff1b fs26 fc0 sc0 ls0 ws0">domain<span class="_"> </span><span class="ff19">is<span class="_"> </span><span class="ff1a">AF_INET<span class="_ _80"> </span></span>or large enough to hold a 128</span></div><div class="t m0 x93 h49 y47a7 ff19 fs26 fc0 sc0 ls0 ws0">-</div><div class="t m0 x94 h4d y47a6 ff19 fs26 fc0 sc0 ls0 ws0">bit address if<span class="_"> </span><span class="ff1b">domain<span class="_"> </span></span>is<span class="_"> </span><span class="ff1a">AF_INET6</span>.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
