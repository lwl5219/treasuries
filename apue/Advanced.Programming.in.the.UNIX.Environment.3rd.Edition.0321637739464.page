<div id="pf1d0" class="pf w4 h1f" data-page-no="1d0"><div class="pc pc1d0 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1d0.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">430<span class="_ _1b"> </span><span class="ff19">Thread <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _177"> </span>Chapter<span class="_ _44"> </span>12</span></div><div class="t m0 x3f h57 y1295 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y19f8 ff1a fs2d fc0 sc0 ls0 ws0">int pthread_attr_getstacksize(const pthread_attr_t *restrict<span class="_"> </span><span class="ff1b">attr</span>,</div><div class="t m0 x154 h57 y35ad ff1a fs2d fc0 sc0 ls0 ws0">size_t *restrict<span class="_"> </span><span class="ff1b">stacksize</span>);</div><div class="t m0 x3f h57 y35ae ff1a fs2d fc0 sc0 ls0 ws0">int pthread_attr_setstacksize(pthread_attr_t *<span class="ff1b">attr</span><span class="ls15c">,s<span class="_ _1d"></span><span class="ls0">ize_t<span class="_"> </span><span class="ff1b">stacksize</span>);</span></span></div><div class="t m0 xca h5f y35af ff19 fs2d fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x32 h4d y35b0 ff19 fs26 fc0 sc0 ls0 ws0">The<span class="_ _45"> </span><span class="ff1a">pthread_attr_setstacksize<span class="_ _45"> </span></span>function <span class="_ _3"></span>is <span class="_ _9"></span>useful <span class="_ _9"></span>when <span class="_ _9"></span>you <span class="_ _9"></span>want <span class="_ _9"></span>to <span class="_ _9"></span>change <span class="_ _9"></span>the</div><div class="t m0 x32 h49 y35b1 ff19 fs26 fc0 sc0 ls0 ws0">default <span class="_ _2"></span>stack <span class="_ _3"></span>size <span class="_ _2"></span>but <span class="_ _3"></span>don’t <span class="_ _2"></span>want <span class="_ _3"></span>to <span class="_ _2"></span>deal <span class="_ _3"></span>with <span class="_ _2"></span>allocating <span class="_ _3"></span>the <span class="_ _2"></span>thread <span class="_ _2"></span>stacks <span class="_ _3"></span>on <span class="_ _2"></span>your <span class="_ _3"></span>own.</div><div class="t m0 x32 h4a y35b2 ff19 fs26 fc0 sc0 ls0 ws0">When <span class="_ _4b"> </span>setting <span class="_ _59"> </span>the<span class="_ _48"> </span><span class="ff1b">stacksize<span class="_ _48"> </span></span>attribute, <span class="_ _59"> </span>the <span class="_ _4b"> </span>size <span class="_ _59"> </span>we <span class="_ _59"> </span>choose <span class="_ _4b"> </span>can’t <span class="_ _59"> </span>be <span class="_ _4b"> </span>smaller <span class="_ _59"> </span>than</div><div class="t m0 x32 h4d y35b3 ff1a fs26 fc0 sc0 ls0 ws0">PTHREAD_STACK_MIN<span class="ff19">.</span></div><div class="t m0 x3f h4a y35b4 ff19 fs26 fc0 sc0 ls0 ws0">The<span class="_"> </span><span class="ff1b">guardsize<span class="_"> </span></span>thread attribute <span class="_ _2"></span>controls the size of <span class="_ _2"></span>the memory extent <span class="_ _2"></span>after the <span class="_ _2"></span>end of</div><div class="t m0 x32 h49 y35b5 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _2"></span>thread’s <span class="_ _2"></span>stack <span class="_ _3"></span>to <span class="_ _3"></span>protect <span class="_ _2"></span>against <span class="_ _3"></span>stack <span class="_ _3"></span>overﬂow<span class="_ _6"></span><span class="lse7b">.I<span class="_ _1d"></span><span class="ls0">ts <span class="_ _3"></span>default <span class="_ _3"></span>value <span class="_ _2"></span>is <span class="_ _3"></span>implementation</span></span></div><div class="t m0 x32 h4a y35b6 ff19 fs26 fc0 sc0 ls0 ws0">deﬁned, <span class="_ _9"></span>but <span class="_ _9"></span>a <span class="_ _23"></span>commonly <span class="_ _9"></span>used <span class="_ _9"></span>value <span class="_ _23"></span>is <span class="_ _9"></span>the <span class="_ _9"></span>system <span class="_ _23"></span>page <span class="_ _9"></span>size.<span class="_ _5a"> </span><span class="ls164">We <span class="_ _66"> </span>c<span class="_ _23"></span></span>an <span class="_ _9"></span>set <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1b">guardsize</span></div><div class="t m0 x32 h49 y35b7 ff19 fs26 fc0 sc0 ls0 ws0">thread attribute to 0 to disable this feature: no guar<span class="lse7c">db<span class="_ _d"></span><span class="ls0">uffer will be provided in this case.</span></span></div><div class="t m0 x32 h4a y35b8 ff19 fs26 fc0 sc0 ls0 ws0">Also, <span class="_ _23"> </span>if <span class="_ _42"> </span>we <span class="_ _42"> </span>change <span class="_ _23"> </span>the<span class="_ _44"> </span><span class="ff1b">stackaddr<span class="_ _35"> </span></span>thread <span class="_ _23"></span>attribute, <span class="_ _42"> </span>the <span class="_ _23"> </span>system <span class="_ _42"> </span>assumes <span class="_ _23"> </span>that <span class="_ _42"> </span>we <span class="_ _42"> </span>will <span class="_ _23"> </span>be</div><div class="t m0 x32 h49 y35b9 ff19 fs26 fc0 sc0 ls0 ws0">managing <span class="_ _42"> </span>our <span class="_ _42"> </span>own <span class="_ _42"> </span>stacks <span class="_ _42"> </span>and <span class="_ _42"> </span>disables <span class="_ _42"> </span>stack <span class="_ _42"> </span>guar<span class="lse7d">db<span class="_ _43"></span><span class="ls0">uf<span class="_ _0"></span>fers, <span class="_ _42"> </span>just <span class="_ _42"> </span>as <span class="_ _42"> </span>if <span class="_ _42"> </span>we <span class="_ _42"> </span>had <span class="_ _42"> </span>set <span class="_ _42"> </span>the</span></span></div><div class="t m0 x32 h4a y35ba ff1b fs26 fc0 sc0 ls0 ws0">guardsize<span class="_"> </span><span class="ff19">thread attribute to 0.</span></div><div class="t m0 x3f h4e y35bb ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h4e y35bc ff1a fs28 fc0 sc0 ls0 ws0">int pthread_attr_getguardsize(const pthread_attr_t *restrict<span class="_"> </span><span class="ff1b">attr</span>,</div><div class="t m0 x18c h4e y35bd ff1a fs28 fc0 sc0 ls0 ws0">size_t *restrict<span class="_"> </span><span class="ff1b">guardsize</span>);</div><div class="t m0 x3f h4e y35be ff1a fs28 fc0 sc0 ls0 ws0">int pthread_attr_setguardsize(pthread_attr_t *<span class="ff1b">attr</span><span class="ls1b6">,s<span class="_ _1d"></span><span class="ls0">ize_t<span class="_"> </span><span class="ff1b">guardsize</span>);</span></span></div><div class="t m0 xca h7c y35bf ff19 fs28 fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x3f h60 y35c0 ff19 fs2c fc0 sc0 ls0 ws0">If <span class="_ _2"></span>the<span class="_ _66"> </span><span class="ff1b">guardsize<span class="_ _47"> </span></span>thread attribute <span class="_ _2"></span>is <span class="_ _2"></span>modiﬁed, <span class="_ _3"></span>the <span class="_ _2"></span>operating <span class="_ _2"></span>system <span class="_ _2"></span>might <span class="_ _2"></span>round <span class="_ _2"></span>it <span class="_ _2"></span>up</div><div class="t m0 x32 h55 y35c1 ff19 fs2c fc0 sc0 ls0 ws0">to <span class="_ _3"></span>an <span class="_ _3"></span>integral <span class="_ _3"></span>multiple <span class="_ _3"></span>of <span class="_ _9"></span>the <span class="_ _3"></span>page <span class="_ _3"></span>size.<span class="_ _16"> </span>If <span class="_ _3"></span>the <span class="_ _9"></span>thread’s <span class="_ _2"></span>stack <span class="_ _3"></span>pointer <span class="_ _3"></span>overﬂows <span class="_ _9"></span>into <span class="_ _3"></span>the</div><div class="t m0 x32 h55 y35c2 ff19 fs2c fc0 sc0 ls0 ws0">guar<span class="ls142">da<span class="_ _4f"></span><span class="ls150">re<span class="_ _2"></span><span class="ls0">a, the application will receive an err<span class="_ _0"></span>or<span class="_ _6"></span><span class="ls142">,p<span class="_ _5"></span><span class="ls0">ossibly with a signal.</span></span></span></span></span></div><div class="t m0 x3f h55 y35c3 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _47"> </span>Single <span class="_ _45"> </span>UNIX <span class="_ _47"> </span>Speciﬁcation <span class="_ _45"> </span>deﬁnes <span class="_ _47"> </span>several <span class="_ _45"> </span>other <span class="_ _47"> </span>optional <span class="_ _45"> </span>thread <span class="_ _47"> </span>attributes</div><div class="t m0 x32 h55 y35c4 ff19 fs2c fc0 sc0 ls0 ws0">intended for use by real-time applications.<span class="_ _59"> </span><span class="ls155">We <span class="_ _53"> </span>w<span class="_ _9"></span></span>ill not discuss them here.</div><div class="t m0 x3f h54 y35c5 ff19 fs2c fc0 sc0 ls0 ws0">Threads <span class="_ _9"></span>have <span class="_ _9"></span>other <span class="_ _23"></span>attributes <span class="_ _9"></span>not <span class="_ _23"></span>repr<span class="_ _1"></span>esented <span class="_ _23"></span>by <span class="_ _9"></span>the<span class="_ _35"> </span><span class="ff1a">pthread_attr_t<span class="_ _45"> </span></span>structur<span class="_ _0"></span>e:</div><div class="t m0 x32 h55 y35c6 ff19 fs2c fc0 sc0 ls0 ws0">the cancelability state and the cancelability type.<span class="_ _59"> </span><span class="ls155">We <span class="_ _e"> </span>d<span class="_ _9"></span></span>iscuss them in Section 12.7.</div><div class="t m0 x35 h99 y35c7 ff16 fs3b fc0 sc0 ls0 ws0">12.4 <span class="_ _93"> </span>Synchr<span class="_ _0"></span>onization <span class="_"> </span>Attrib<span class="_ _0"></span>utes</div><div class="t m0 x32 h55 y35c8 ff19 fs2c fc0 sc0 ls0 ws0">Just as <span class="_ _2"></span>threads have attributes, <span class="_ _2"></span>so too <span class="_ _2"></span>do their <span class="_ _2"></span>synchronization objects.<span class="_ _46"> </span>In Section <span class="_ _2"></span>1<span class="_ _1"></span>1.6.7,</div><div class="t m0 x32 h60 y35c9 ff19 fs2c fc0 sc0 ls0 ws0">we <span class="_ _53"> </span>saw <span class="_ _53"> </span>how <span class="_ _53"> </span>spin <span class="_ _53"> </span>locks <span class="_ _53"> </span>have <span class="_ _53"> </span>one <span class="_ _53"> </span>attribute <span class="_ _53"> </span>called <span class="_ _53"> </span>the<span class="_ _4b"> </span><span class="ff1b">process-shar<span class="_ _0"></span>ed<span class="_ _44"> </span><span class="ff19">attribute. <span class="_ _44"> </span>In<span class="_ _4b"> </span>this</span></span></div><div class="t m0 x32 h55 y35ca ff19 fs2c fc0 sc0 ls0 ws0">section, <span class="_ _23"></span>we <span class="_ _9"></span>discuss <span class="_ _23"> </span>the <span class="_ _23"> </span>attributes <span class="_ _23"> </span>of <span class="_ _23"></span>mutexes, <span class="_ _23"></span>reader–writer <span class="_ _9"></span>locks, <span class="_ _23"></span>condition <span class="_ _23"></span>variables,</div><div class="t m0 x32 h55 y35cb ff19 fs2c fc0 sc0 ls0 ws0">and barriers.</div><div class="t m0 x32 h99 y35cc ff16 fs3b fc0 sc0 ls0 ws0">12.4.1 <span class="_ _54"> </span>Mute<span class="lsb33">xA<span class="_ _52"></span><span class="ls0">ttrib<span class="_ _0"></span>utes</span></span></div><div class="t m0 x32 h54 y35cd ff19 fs2c fc0 sc0 ls0 ws0">Mutex <span class="_ _42"> </span>attributes <span class="_ _42"> </span>ar<span class="lse7e">er<span class="_ _c"></span><span class="ls0">epresented <span class="_ _42"> </span>by <span class="_ _42"> </span>a<span class="_ _44"> </span><span class="ff1a">pthread_mutexattr_t<span class="_ _44"> </span></span>structur<span class="_ _0"></span>e. <span class="_ _44"> </span>Whenever</span></span></div><div class="t m0 x32 h55 y35ce ff19 fs2c fc0 sc0 ls0 ws0">we <span class="_ _23"> </span>initialized <span class="_ _42"> </span>a <span class="_ _23"></span>mutex <span class="_ _23"> </span>in <span class="_ _42"> </span>Chapter <span class="_ _23"> </span>1<span class="_ _1"></span>1, <span class="_ _42"> </span>we <span class="_ _23"> </span>accepted <span class="_ _23"> </span>the <span class="_ _42"> </span>default <span class="_ _23"> </span>attributes <span class="_ _42"> </span>by <span class="_ _23"> </span>using <span class="_ _23"> </span>the</div><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:80.894508px;bottom:373.776913px;width:192.085816px;height:19.679992px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:156.496207px;bottom:189.816901px;width:140.951981px;height:19.680008px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
