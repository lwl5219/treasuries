<div id="pf115" class="pf w4 h1f" data-page-no="115"><div class="pc pc115 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg115.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h7a ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>8.6<span class="_ _225"> </span><span class="ff1a">wait<span class="_ _4b"> </span></span>and<span class="_ _4b"> </span><span class="ff1a">waitpid<span class="_ _4b"> </span></span>Functions<span class="_ _1b"> </span><span class="ff18">243</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;sys/wait.h&gt;</div><div class="t m0 x32 h57 y2012 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y2013 ff1a fs2d fc0 sc0 ls0 ws0">main(void)</div><div class="t m0 x32 h57 y2014 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y2015 ff1a fs2d fc0 sc0 ls0 ws0">pid_t <span class="_ _d9"> </span>pid;</div><div class="t m0 x8a h57 y1cc2 ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0) {</div><div class="t m0 x9d h57 y1cc3 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;fork error&quot;);</div><div class="t m0 x8a h57 y1cc4 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid == 0) {<span class="_ _88"> </span>/* first child */</span></div><div class="t m0 x9d h57 y1cc5 ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0)</div><div class="t m0 x1f h57 y2016 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;fork error&quot;);</div><div class="t m0 x9d h57 y2017 ff1a fs2d fc0 sc0 ls0 ws0">else if (pid &gt; 0)</div><div class="t m0 x1f h57 y2018 ff1a fs2d fc0 sc0 ls0 ws0">exit(0); <span class="_ _68"> </span>/*<span class="_"> </span>parent from second fork == first child */</div><div class="t m0 x9d h57 y2019 ff1a fs2d fc0 sc0 ls0 ws0">/*</div><div class="t m0 x175 h57 y201a ff1a fs2d fc0 sc0 ls15c ws0">*W<span class="_ _1d"></span><span class="ls0">e’re the second child; our parent becomes init as soon</span></div><div class="t m0 x175 h57 y201b ff1a fs2d fc0 sc0 ls0 ws0">*<span class="_"> </span>as<span class="_"> </span>our real parent calls exit() in the statement above.</div><div class="t m0 x175 h57 y201c ff1a fs2d fc0 sc0 ls15c ws0">*H<span class="_ _1d"></span><span class="ls0">ere’s where we’d continue executing, knowing that when</span></div><div class="t m0 x175 h57 y201d ff1a fs2d fc0 sc0 ls15c ws0">*w<span class="_ _1d"></span><span class="ls0">e’re done, init will reap our status.</span></div><div class="t m0 x175 h57 y201e ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x9d h57 y201f ff1a fs2d fc0 sc0 ls0 ws0">sleep(2);</div><div class="t m0 x9d h57 y2020 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;second child, parent pid = %ld\n&quot;, (long)getppid());</div><div class="t m0 x9d h57 y2021 ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x8a h57 y2022 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y2023 ff1a fs2d fc0 sc0 ls0 ws0">if (waitpid(pid, NULL, 0) != pid)<span class="_ _68"> </span>/* wait for first child */</div><div class="t m0 x9d h57 y2024 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;waitpid error&quot;);</div><div class="t m0 x8a h57 y2025 ff1a fs2d fc0 sc0 ls0 ws0">/*</div><div class="t m0 xe1 h57 y2026 ff1a fs2d fc0 sc0 ls15c ws0">*W<span class="_ _1d"></span><span class="ls0">e’re the parent (the original process); we continue executing,</span></div><div class="t m0 xe1 h57 y2027 ff1a fs2d fc0 sc0 ls15c ws0">*k<span class="_ _1d"></span><span class="ls0">nowing that we’re not the parent of the second child.</span></div><div class="t m0 xe1 h57 y2028 ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x8a h57 y2029 ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y202a ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x25 h5e y202b ff18 fs10 fc0 sc0 ls0 ws0">Figure 8.8<span class="_ _5a"> </span><span class="ff19 ls292">Av<span class="_ _9"></span><span class="ls0">oid zombie processes by calling<span class="_"> </span><span class="ff1a">fork<span class="_ _53"> </span></span>twice</span></span></div><div class="t m0 x3f h4d y202c ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _47"> </span>c<span class="_ _23"></span><span class="ls0">all<span class="_ _35"> </span><span class="ff1a">sleep<span class="_ _35"> </span></span>in <span class="_ _23"> </span>the <span class="_ _23"> </span>second <span class="_ _42"> </span>child <span class="_ _23"> </span>to <span class="_ _42"> </span>ensur<span class="ls9b2">et<span class="_ _43"></span><span class="ls0">hat <span class="_ _23"></span>the <span class="_ _23"> </span>ﬁrst <span class="_ _23"> </span>child <span class="_ _42"> </span>terminates <span class="_ _23"> </span>before</span></span></span></div><div class="t m0 x32 h4d y202d ff19 fs26 fc0 sc0 ls0 ws0">printing the <span class="_ _2"></span>parent process ID.<span class="_ _46"> </span>After <span class="_ _2"></span>a<span class="_ _66"> </span><span class="ff1a">fork</span><span class="ls18a">,e<span class="_ _d"></span><span class="ls0">ither <span class="_ _2"></span>the parent or <span class="_ _2"></span>the <span class="_ _2"></span>child can <span class="_ _2"></span>continue</span></span></div><div class="t m0 x32 h49 y202e ff19 fs26 fc0 sc0 ls0 ws0">executing; <span class="_"> </span>we <span class="_"> </span>never <span class="_ _e"> </span>know <span class="_"> </span>which <span class="_"> </span>will <span class="_ _e"> </span>resume <span class="_"> </span>execution <span class="_ _e"> </span>ﬁrst.<span class="_ _60"> </span>If <span class="_"> </span>we <span class="_"> </span>didn’t <span class="_ _e"> </span>put <span class="_"> </span>the</div><div class="t m0 x32 h4d y202f ff19 fs26 fc0 sc0 ls0 ws0">second <span class="_ _9"></span>child <span class="_ _9"></span>to <span class="_ _9"></span>sleep, <span class="_ _23"></span>and <span class="_ _9"></span>if <span class="_ _9"></span>it <span class="_ _9"></span>resumed <span class="_ _9"></span>execution <span class="_ _9"></span>after <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">fork<span class="_ _45"> </span></span>befor<span class="ls9b3">ei<span class="_ _b"></span><span class="ls0">ts <span class="_ _9"></span>parent, <span class="_ _9"></span>the</span></span></div><div class="t m0 x32 h49 y2030 ff19 fs26 fc0 sc0 ls0 ws0">parent pr<span class="_ _0"></span>ocess ID that it printed would be that of its par<span class="_ _0"></span>ent, not process ID 1.</div><div class="t m0 x3f h49 y2031 ff19 fs26 fc0 sc0 ls0 ws0">Executing the program in Figur<span class="_ _0"></span><span class="lsd3">e8<span class="_ _d"></span><span class="ls0">.8 gives us</span></span></div><div class="t m0 x3f h4e y2032 ff1a fs28 fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x3f h4e y2033 ff1a fs28 fc0 sc0 ls1b6 ws0">$s<span class="_ _1d"></span><span class="ls0">econd child, parent pid = 1</span></div><div class="t m0 x32 h49 y2034 ff19 fs26 fc0 sc0 ls0 ws0">Note <span class="_ _53"> </span>that <span class="_ _53"> </span>the <span class="_ _53"> </span>shell <span class="_ _53"> </span>prints <span class="_ _53"> </span>its <span class="_ _53"> </span>prompt <span class="_ _53"> </span>when <span class="_ _53"> </span>the <span class="_ _53"> </span>original <span class="_ _53"> </span>process <span class="_ _53"> </span>terminates, <span class="_ _53"> </span>which <span class="_ _53"> </span>is</div><div class="t m0 x32 h49 y2035 ff19 fs26 fc0 sc0 ls0 ws0">befor<span class="lsd3">et<span class="_ _4f"></span><span class="ls0">he second child prints its parent process ID.</span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
