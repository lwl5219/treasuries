<div id="pf20c" class="pf w4 h1f" data-page-no="20c"><div class="pc pc20c w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg20c.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">490<span class="_ _1b"> </span><span class="ff19">Advanced <span class="_"> </span>I/O<span class="_ _16b"> </span>Chapter <span class="_"> </span>14</span></div><div class="t m0 x8a h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">struct flock<span class="_ _15"> </span>lock;</div><div class="t m0 x8a h57 y1334 ff1a fs2d fc0 sc0 ls0 ws0">lock.l_type = type;<span class="_ _8a"> </span>/* F_RDLCK or F_WRLCK */</div><div class="t m0 x8a h57 y1307 ff1a fs2d fc0 sc0 ls0 ws0">lock.l_start = offset;<span class="_ _d9"> </span>/* byte offset, relative to l_whence */</div><div class="t m0 x8a h57 y1308 ff1a fs2d fc0 sc0 ls0 ws0">lock.l_whence = whence; /* SEEK_SET, SEEK_CUR, SEEK_END */</div><div class="t m0 x8a h57 y3508 ff1a fs2d fc0 sc0 ls0 ws0">lock.l_len = len;<span class="_ _b7"> </span>/* #bytes (0 means to EOF) */</div><div class="t m0 x8a h57 y130a ff1a fs2d fc0 sc0 ls0 ws0">if (fcntl(fd, F_GETLK, &amp;lock) &lt; 0)</div><div class="t m0 x9d h57 y130b ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;fcntl error&quot;);</div><div class="t m0 x8a h57 y1de5 ff1a fs2d fc0 sc0 ls0 ws0">if (lock.l_type == F_UNLCK)</div><div class="t m0 x9d h57 y3c15 ff1a fs2d fc0 sc0 ls0 ws0">return(0); <span class="_ _8a"> </span>/*<span class="_"> </span>false, region isn’t locked by another proc */</div><div class="t m0 x8a h57 y2e71 ff1a fs2d fc0 sc0 ls0 ws0">return(lock.l_pid); /* true, return pid of lock owner */</div><div class="t m0 x32 h57 y2e72 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x3c h2d y3c16 ff18 fs10 fc0 sc0 ls0 ws0">Figure 14.6<span class="_ _5a"> </span><span class="ff19">Function to test for a locking condition</span></div><div class="t m0 x32 h49 y3c17 ff19 fs26 fc0 sc0 ls0 ws0">If <span class="_ _23"></span>a <span class="_ _23"></span>lock <span class="_ _23"></span>exists <span class="_ _23"></span>that <span class="_ _23"></span>would <span class="_ _23"></span>block <span class="_ _9"></span>the <span class="_ _23"> </span>request <span class="_ _23"></span>speciﬁed <span class="_ _23"></span>by <span class="_ _23"></span>the <span class="_ _23"></span>arguments, <span class="_ _9"></span>this <span class="_ _23"> </span>function</div><div class="t m0 x32 h49 y3c18 ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">turns <span class="_ _2"></span>the process ID of <span class="_ _2"></span>the process holding the <span class="_ _2"></span>lock.<span class="_ _46"> </span>Otherwise, the <span class="_ _2"></span>function returns 0</span></div><div class="t m0 x32 h49 y3c19 ff19 fs26 fc0 sc0 ls0 ws0">(false). <span class="_ _46"> </span>W<span class="_ _6"></span><span class="lsa1f">en<span class="_ _4a"></span><span class="ls0">ormally <span class="_"> </span>call <span class="_ _66"> </span>this <span class="_ _47"> </span>function <span class="_"> </span>from <span class="_"> </span>the <span class="_ _47"> </span>following <span class="_"> </span>two <span class="_ _47"> </span>macr<span class="_ _0"></span>os <span class="_"> </span>(deﬁned <span class="_ _47"> </span>in</span></span></div><div class="t m0 x32 h4d y3c1a ff1a fs26 fc0 sc0 ls0 ws0">apue.h<span class="ff19">):</span></div><div class="t m0 x3f h4e y3c1b ff1a fs28 fc0 sc0 ls0 ws0">#define is_read_lockable(fd, offset, whence, len) \</div><div class="t m0 xf6 h4e y3c1c ff1a fs28 fc0 sc0 ls0 ws0">(lock_test((fd), F_RDLCK, (offset), (whence), (len)) == 0)</div><div class="t m0 x3f h4e y3c1d ff1a fs28 fc0 sc0 ls0 ws0">#define is_write_lockable(fd, offset, whence, len) \</div><div class="t m0 xf6 h4e y3c1e ff1a fs28 fc0 sc0 ls0 ws0">(lock_test((fd), F_WRLCK, (offset), (whence), (len)) == 0)</div><div class="t m0 x3f h4d y3c1f ff19 fs26 fc0 sc0 ls0 ws0">Note <span class="_ _9"></span>that <span class="_ _23"> </span>the<span class="_ _35"> </span><span class="ff1a">lock_test<span class="_ _45"> </span></span>function <span class="_ _9"></span>can’t <span class="_ _23"> </span>be <span class="_ _23"></span>used <span class="_ _9"></span>by <span class="_ _23"></span>a <span class="_ _23"></span>pr<span class="_ _0"></span>ocess <span class="_ _9"></span>to <span class="_ _23"> </span>see <span class="_ _23"></span>whether <span class="_ _9"></span>it <span class="_ _23"></span>is</div><div class="t m0 x32 h4d y3c20 ff19 fs26 fc0 sc0 ls0 ws0">currently <span class="_ _9"></span>holding <span class="_ _9"></span>a <span class="_ _23"> </span>portion <span class="_ _23"></span>of <span class="_ _9"></span>a <span class="_ _23"></span>ﬁle <span class="_ _9"></span>locked.<span class="_ _51"> </span>The <span class="_ _23"></span>deﬁnition <span class="_ _9"></span>of <span class="_ _23"></span>the<span class="_ _45"> </span><span class="ff1a">F_GETLK<span class="_ _35"> </span></span>command</div><div class="t m0 x32 h49 y3c21 ff19 fs26 fc0 sc0 ls0 ws0">states <span class="_ _23"></span>that <span class="_ _23"></span>the <span class="_ _23"></span>information <span class="_ _9"></span>returned <span class="_ _23"></span>applies <span class="_ _23"></span>to <span class="_ _23"></span>an <span class="_ _23"></span>existing <span class="_ _23"></span>lock <span class="_ _23"></span>that <span class="_ _9"></span>would <span class="_ _23"> </span>prevent <span class="_ _23"></span>us</div><div class="t m0 x32 h4d y3c22 ff19 fs26 fc0 sc0 ls0 ws0">from <span class="_ _53"> </span>creating <span class="_ _e"> </span>our <span class="_ _e"> </span>own <span class="_ _e"> </span>lock.<span class="_ _48"> </span>Since <span class="_"> </span>the<span class="_ _44"> </span><span class="ff1a">F_SETLK<span class="_ _59"> </span></span>and<span class="_ _4b"> </span><span class="ff1a">F_SETLKW<span class="_ _59"> </span></span>commands <span class="_ _e"> </span>always</div><div class="t m0 x32 h49 y3c23 ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">place <span class="_ _9"></span>a <span class="_ _23"></span>process’s <span class="_ _3"></span>existing <span class="_ _9"></span>lock <span class="_ _23"></span>if <span class="_ _9"></span>it <span class="_ _9"></span>exists, <span class="_ _9"></span>we <span class="_ _9"></span>can <span class="_ _9"></span>never <span class="_ _23"></span>block <span class="_ _9"></span>on <span class="_ _9"></span>our <span class="_ _9"></span>own <span class="_ _9"></span>lock; <span class="_ _9"></span>thus,</span></div><div class="t m0 x32 h4d y3c24 ff19 fs26 fc0 sc0 ls0 ws0">the<span class="_"> </span><span class="ff1a">F_GETLK<span class="_ _80"> </span></span>command will never report our own lock.</div><div class="t m0 x35 h61 y3c25 ff16 fs2c fc0 sc0 ls0 ws0">Example <span class="_ _84"></span>— <span class="_ _84"></span>Deadlock</div><div class="t m0 x32 h55 y3c26 ff19 fs2c fc0 sc0 ls0 ws0">Deadlock <span class="_ _3"></span>occurs <span class="_ _3"></span>when <span class="_ _9"></span>two <span class="_ _3"></span>processes <span class="_ _2"></span>ar<span class="lsfec">ee<span class="_ _8"></span><span class="ls0">ach <span class="_ _3"></span>waiting <span class="_ _3"></span>for <span class="_ _9"></span>a <span class="_ _3"></span>resour<span class="_ _0"></span>ce <span class="_ _3"></span>that <span class="_ _3"></span>the <span class="_ _9"></span>other <span class="_ _3"></span>has</span></span></div><div class="t m0 x32 h55 y3c27 ff19 fs2c fc0 sc0 ls0 ws0">locked. <span class="_"> </span>The<span class="_ _66"> </span>potential <span class="_ _2"></span>for deadlock <span class="_ _2"></span>exists <span class="_ _2"></span>if a <span class="_ _2"></span>process that controls a <span class="_ _2"></span>locked region is <span class="_ _2"></span>put</div><div class="t m0 x32 h55 y3c28 ff19 fs2c fc0 sc0 ls0 ws0">to sleep when it tries to lock another region that is contr<span class="_ _0"></span>olled by a dif<span class="_ _0"></span>ferent pr<span class="_ _0"></span>ocess.</div><div class="t m0 x3f h55 y3c29 ff19 fs2c fc0 sc0 ls0 ws0">Figur<span class="lsfed">e1<span class="_ _43"></span><span class="ls0">4.7 <span class="_ _23"></span>shows <span class="_ _23"></span>an <span class="_ _9"></span>example <span class="_ _23"></span>of <span class="_ _23"></span>deadlock.<span class="_ _5a"> </span>The <span class="_ _23"></span>child <span class="_ _23"></span>locks <span class="_ _9"></span>byte <span class="_ _23"></span>0 <span class="_ _23"></span>and <span class="_ _9"></span>the <span class="_ _23"></span>parent</span></span></div><div class="t m0 x32 h55 y3c2a ff19 fs2c fc0 sc0 ls0 ws0">locks <span class="_"> </span>byte <span class="_"> </span>1.<span class="_ _50"> </span>Each <span class="_"> </span>then <span class="_ _66"> </span>tries <span class="_"> </span>to <span class="_ _66"> </span>lock <span class="_ _66"> </span>the <span class="_ _66"> </span>other<span class="_ _9"></span>’s <span class="_"> </span>already <span class="_"> </span>locked <span class="_"> </span>byte.<span class="_ _50"> </span><span class="ls155">We <span class="_ _4b"> </span>u<span class="_ _9"></span></span>se <span class="_"> </span>the</div><div class="t m0 x32 h54 y3c2b ff19 fs2c fc0 sc0 ls0 ws0">parent–child <span class="_ _9"></span>synchronization <span class="_ _9"></span>routines <span class="_ _3"></span>from <span class="_ _9"></span>Section <span class="_ _23"></span>8.9 <span class="_ _9"></span>(<span class="ff1a">TELL_xxx<span class="_ _35"> </span></span>and<span class="_ _45"> </span><span class="ff1a">WAIT_xxx</span><span class="ls72a">)s<span class="_ _b"></span><span class="ls0">o</span></span></div><div class="t m0 x32 h55 y3c2c ff19 fs2c fc0 sc0 ls0 ws0">that each process can wait for the other to obtain its lock.</div><div class="t m0 x32 h62 y3c2d ff1a fs30 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h62 y3c2e ff1a fs30 fc0 sc0 ls0 ws0">#include &lt;fcntl.h&gt;</div><div class="t m0 x32 h62 y3c2f ff1a fs30 fc0 sc0 ls0 ws0">static void</div><div class="t m0 x32 h62 y3c30 ff1a fs30 fc0 sc0 ls0 ws0">lockabyte(const char *name, int fd, off_t offset)</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
