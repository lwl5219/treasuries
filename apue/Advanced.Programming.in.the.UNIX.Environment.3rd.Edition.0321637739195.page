<div id="pfc3" class="pf w4 h1f" data-page-no="c3"><div class="pc pcc3 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bgc3.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>5.1<span class="_ _1"></span><span class="ls6ec">1F<span class="_ _1dd"></span><span class="ls0">ormatted <span class="_"> </span>I/O<span class="_ _1b"> </span><span class="ff18">161</span></span></span></div><div class="t m0 x14a h51 y597 ff19 fs2a fc0 sc0 ls0 ws0">Conversion <span class="_ _1e0"> </span>Description</div><div class="t m0 xe1 h51 y598 ff19 fs2a fc0 sc0 ls0 ws0">type</div><div class="t m0 x14a h5e y59a ff1a fs10 fc0 sc0 ls0 ws0">d,i<span class="_ _13b"> </span><span class="ff19">signed decimal</span></div><div class="t m0 x14a h5e y59b ff1a fs10 fc0 sc0 ls0 ws0">o<span class="_ _173"> </span><span class="ff19">unsigned octal</span></div><div class="t m0 x14a h5e y59c ff1a fs10 fc0 sc0 ls0 ws0">u<span class="_ _173"> </span><span class="ff19">unsigned decimal</span></div><div class="t m0 x14a h5e y59d ff1a fs10 fc0 sc0 ls0 ws0">x,X<span class="_ _13b"> </span><span class="ff19">unsigned hexadecimal</span></div><div class="t m0 x14a h5e y59e ff1a fs10 fc0 sc0 ls0 ws0">f,F <span class="_ _dd"> </span>double<span class="_ _53"> </span><span class="ff19">ﬂoating-point number</span></div><div class="t m0 x14a h5e y59f ff1a fs10 fc0 sc0 ls0 ws0">e,E <span class="_ _dd"> </span>double<span class="_ _53"> </span><span class="ff19">ﬂoating-point number in exponential format</span></div><div class="t m0 x14a h5e y5a0 ff1a fs10 fc0 sc0 ls0 ws0">g,G<span class="_ _13b"> </span><span class="ff19">interpreted as f, F<span class="_ _6"></span>,<span class="_"> </span>e,<span class="_"> </span>or<span class="_"> </span>E,<span class="_"> </span>depending on value converted</span></div><div class="t m0 x14a h5e y5a1 ff1a fs10 fc0 sc0 ls0 ws0">a,A <span class="_ _dd"> </span>double<span class="_ _53"> </span><span class="ff19">ﬂoating-point number in hexadecimal exponential format</span></div><div class="t m0 x14a h5e y5a2 ff1a fs10 fc0 sc0 ls0 ws0">c<span class="_ _173"> </span><span class="ff19">character (with<span class="_"> </span></span>l<span class="_ _e"> </span><span class="ff19">length modiﬁer<span class="_ _1"></span><span class="ls136">,w<span class="_ _84"></span><span class="ls0">ide character)</span></span></span></div><div class="t m0 x14a h5e y5a3 ff1a fs10 fc0 sc0 ls0 ws0">s<span class="_ _173"> </span><span class="ff19">string (with<span class="_"> </span></span>l<span class="_ _e"> </span><span class="ff19">length modiﬁer<span class="_ _1"></span><span class="ls136">,w<span class="_ _84"></span><span class="ls0">ide character string)</span></span></span></div><div class="t m0 x14a h5e y5a4 ff1a fs10 fc0 sc0 ls0 ws0">p<span class="_ _173"> </span><span class="ff19">pointer to a<span class="_"> </span></span>void</div><div class="t m0 x14a h5e y5a5 ff1a fs10 fc0 sc0 ls0 ws0">n<span class="_ _173"> </span><span class="ff19">pointer to a signed integer into which is written the number of characters written so far</span></div><div class="t m0 x14a h5e y5a6 ff1a fs10 fc0 sc0 ls0 ws0">%<span class="_ _173"> </span><span class="ff19 ls136">a%c<span class="_ _84"></span><span class="ls0">haracter</span></span></div><div class="t m0 x14a h5e y5a7 ff1a fs10 fc0 sc0 ls0 ws0">C<span class="_ _173"> </span><span class="ff19">wide character</span></div><div class="t m0 x39 h2d y166b ff19 fs10 fc0 sc0 ls0 ws0">(</div><div class="t m0 x13c h5e y5a7 ff19 fs10 fc0 sc0 ls0 ws0">XSI option, equivalent to<span class="_"> </span><span class="ff1a">lc</span></div><div class="t m0 x1c5 h2d y166b ff19 fs10 fc0 sc0 ls0 ws0">)</div><div class="t m0 x14a h5e y5a8 ff1a fs10 fc0 sc0 ls0 ws0">S<span class="_ _173"> </span><span class="ff19">wide character string</span></div><div class="t m0 x4b h2d y166c ff19 fs10 fc0 sc0 ls0 ws0">(</div><div class="t m0 x13 h5e y5a8 ff19 fs10 fc0 sc0 ls0 ws0">XSI option, equivalent to<span class="_"> </span><span class="ff1a">ls</span></div><div class="t m0 x1cb h2d y166c ff19 fs10 fc0 sc0 ls0 ws0">)</div><div class="t m0 x53 h2e y166d ff18 fs11 fc0 sc0 ls0 ws0">Figure 5.9<span class="_ _5a"> </span><span class="ff19">The conversion type component of a conversion speciﬁcation</span></div><div class="t m0 x32 h60 y166e ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">presenting <span class="_ _2"></span>the<span class="_ _47"> </span><span class="ff1b">n</span>th <span class="_ _3"></span>argument. <span class="_ _66"> </span>Note,<span class="_ _47"> </span>however<span class="_ _1"></span><span class="ls6f7">,t<span class="_ _4f"></span><span class="ls0">hat <span class="_ _2"></span>the <span class="_ _3"></span>two <span class="_ _3"></span>syntaxes <span class="_ _2"></span>can’t <span class="_ _3"></span>be <span class="_ _3"></span>mixed <span class="_ _3"></span>in</span></span></span></div><div class="t m0 x32 h55 y166f ff19 fs2c fc0 sc0 ls0 ws0">the <span class="_ _42"> </span>same <span class="_ _53"> </span>format <span class="_ _53"> </span>speciﬁcation.<span class="_ _54"> </span><span class="ls6a4">Wi<span class="_ _3"></span></span>th <span class="_ _53"> </span>the <span class="_ _53"> </span>alternative <span class="_ _53"> </span>syntax, <span class="_ _42"> </span>arguments <span class="_ _42"> </span>ar<span class="ls6f8">en<span class="_ _c"></span><span class="ls0">umbered</span></span></div><div class="t m0 x32 h55 y1670 ff19 fs2c fc0 sc0 ls0 ws0">starting <span class="_ _3"></span>at <span class="_ _9"></span>one.<span class="_ _5a"> </span>If <span class="_ _3"></span>either <span class="_ _9"></span>the <span class="_ _9"></span>ﬁeld <span class="_ _3"></span>width <span class="_ _9"></span>or <span class="_ _9"></span>precision <span class="_ _3"></span>is <span class="_ _9"></span>to <span class="_ _3"></span>be <span class="_ _9"></span>supplied <span class="_ _9"></span>by <span class="_ _3"></span>an <span class="_ _9"></span>argument,</div><div class="t m0 x32 h60 y1671 ff19 fs2c fc0 sc0 ls0 ws0">the <span class="_ _9"></span>asterisk <span class="_ _23"></span>syntax <span class="_ _9"></span>is <span class="_ _23"></span>modiﬁed <span class="_ _9"></span>to<span class="_ _35"> </span><span class="ff1b">*m$</span><span class="ls6f9">,w<span class="_ _b"></span><span class="ls0">her<span class="_ _0"></span>e<span class="_ _45"> </span><span class="ff1b">m<span class="_ _45"> </span></span>speciﬁes <span class="_ _23"></span>the <span class="_ _9"></span>position <span class="_ _23"> </span>of <span class="_ _23"></span>the <span class="_ _9"></span>argument</span></span></div><div class="t m0 x32 h55 y1672 ff19 fs2c fc0 sc0 ls0 ws0">supplying the value.</div><div class="t m0 x3f h54 y1673 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _23"></span>following <span class="_ _23"></span>ﬁve <span class="_ _23"></span>variants <span class="_ _23"></span>of <span class="_ _23"></span>the<span class="_ _35"> </span><span class="ff1a">printf<span class="_ _35"> </span></span>family <span class="_ _23"></span>ar<span class="_ _0"></span><span class="ls6fa">es<span class="_ _43"></span><span class="ls0">imilar <span class="_ _23"> </span>to <span class="_ _23"> </span>the <span class="_ _23"> </span>previous <span class="_ _23"> </span>ﬁve,</span></span></div><div class="t m0 x32 h54 y1674 ff19 fs2c fc0 sc0 ls0 ws0">but the variable argument list (<span class="ff1a">...</span>)<span class="_"> </span>is<span class="_"> </span>r<span class="_ _0"></span>eplaced with<span class="_"> </span><span class="ff1b">ar<span class="_ _0"></span>g<span class="ff19">.</span></span></div><div class="t m0 x3f h5d y1675 ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;stdarg.h&gt;</div><div class="t m0 x3f h5d y1676 ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;stdio.h&gt;</div><div class="t m0 x3f h5d y1677 ff1a fs2f fc0 sc0 ls0 ws0">int vprintf(const char *restrict<span class="_"> </span><span class="ff1b">format</span><span class="ls395">,v<span class="_ _1d"></span><span class="ls0">a_list<span class="_"> </span><span class="ff1b">arg</span>);</span></span></div><div class="t m0 x3f h5d y1678 ff1a fs2f fc0 sc0 ls0 ws0">int vfprintf(FILE *restrict<span class="_"> </span><span class="ff1b">fp</span><span class="ls395">,c<span class="_ _1d"></span><span class="ls0">onst char *restrict<span class="_"> </span><span class="ff1b">format</span>,</span></span></div><div class="t m0 xf0 h5d y1679 ff1a fs2f fc0 sc0 ls0 ws0">va_list<span class="_"> </span><span class="ff1b">arg</span>);</div><div class="t m0 x3f h5d y167a ff1a fs2f fc0 sc0 ls0 ws0">int vdprintf(int<span class="_"> </span><span class="ff1b">fd</span><span class="ls395">,c<span class="_ _1d"></span><span class="ls0">onst char *restrict<span class="_"> </span><span class="ff1b">format</span><span class="ls395">,v<span class="_ _5b"></span><span class="ls0">a_list<span class="_"> </span><span class="ff1b">arg</span>);</span></span></span></span></div><div class="t m0 x7c hc2 y167b ff19 fs2f fc0 sc0 ls0 ws0">All three r<span class="_ _0"></span>eturn: number of characters output if OK, negative value if output error</div><div class="t m0 x3f h5d y167c ff1a fs2f fc0 sc0 ls0 ws0">int vsprintf(char *restrict<span class="_"> </span><span class="ff1b">buf</span><span class="ls395">,c<span class="_ _1d"></span><span class="ls0">onst char *restrict<span class="_"> </span><span class="ff1b">format</span>,</span></span></div><div class="t m0 xf0 h5d y167d ff1a fs2f fc0 sc0 ls0 ws0">va_list<span class="_"> </span><span class="ff1b">arg</span>);</div><div class="t m0 x52 hc2 y167e ff19 fs2f fc0 sc0 ls0 ws0">Returns: number of characters stored in array if OK, negative value if encoding err<span class="_ _0"></span>or</div><div class="t m0 x3f h5d y167f ff1a fs2f fc0 sc0 ls0 ws0">int vsnprintf(char *restrict<span class="_"> </span><span class="ff1b">buf</span><span class="ls395">,s<span class="_ _1d"></span><span class="ls0">ize_t<span class="_"> </span><span class="ff1b">n</span>,</span></span></div><div class="t m0 xea h5d y1680 ff1a fs2f fc0 sc0 ls0 ws0">const char *restrict<span class="_"> </span><span class="ff1b">format</span><span class="ls395">,v<span class="_ _1d"></span><span class="ls0">a_list<span class="_"> </span><span class="ff1b">arg</span>);</span></span></div><div class="t m0 xab hc2 y1681 ff19 fs2f fc0 sc0 ls0 ws0">Returns: number of characters that would have been stored in array</div><div class="t m0 x11b hc2 y1682 ff19 fs2f fc0 sc0 ls0 ws0">if buffer was lar<span class="_ _0"></span>ge enough, negative value if encoding error</div><div class="t m0 x32 h5c y1683 ff19 fs29 fc0 sc0 lse2 ws0">We <span class="_ _53"> </span>u<span class="_ _9"></span><span class="ls0">se the<span class="_"> </span><span class="ff1a">vsnprintf<span class="_ _66"> </span></span>function in the error r<span class="_ _1"></span>outines in Appendix B.</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
