<div id="pf1c3" class="pf w4 h1f" data-page-no="1c3"><div class="pc pc1c3 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1c3.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>1<span class="_ _1"></span>1.6 <span class="_ _284"> </span>Thread <span class="_"> </span>Synchr<span class="_ _0"></span>onization<span class="_ _1b"> </span><span class="ff18">417</span></div><div class="t m0 x32 h53 y12f ff16 fs2b fc0 sc0 ls0 ws0">11.6.7 <span class="_ _54"> </span>Spin<span class="_ _54"> </span>Locks</div><div class="t m0 x32 h2a y1403 ff19 fsf fc0 sc0 lse3a ws0">As<span class="_ _43"></span><span class="ls0">pin <span class="_ _23"> </span>lock <span class="_ _23"> </span>is <span class="_ _23"> </span>like <span class="_ _23"> </span>a <span class="_ _23"></span>mutex, <span class="_ _23"></span>except <span class="_ _23"></span>that <span class="_ _23"></span>instead <span class="_ _23"></span>of <span class="_ _9"></span>blocking <span class="_ _23"> </span>a <span class="_ _23"> </span>process <span class="_ _23"></span>by <span class="_ _23"></span>sleeping, <span class="_ _9"></span>the</span></div><div class="t m0 x32 h2a y1404 ff19 fsf fc0 sc0 ls0 ws0">process <span class="_ _23"></span>is <span class="_ _23"> </span>blocked <span class="_ _42"> </span>by <span class="_ _23"> </span>busy-waiting <span class="_ _42"> </span>(spinning) <span class="_ _42"> </span>until <span class="_ _23"> </span>the <span class="_ _42"> </span>lock <span class="_ _23"> </span>can <span class="_ _42"> </span>be <span class="_ _23"> </span>acquired. <span class="_ _35"> </span>A<span class="_ _44"> </span>spin</div><div class="t m0 x32 h2a y1405 ff19 fsf fc0 sc0 ls0 ws0">lock <span class="_ _42"> </span>could <span class="_ _42"> </span>be <span class="_ _42"> </span>used <span class="_ _42"> </span>in <span class="_ _53"> </span>situations <span class="_ _42"> </span>wher<span class="lsb26">el<span class="_ _c"></span><span class="ls0">ocks <span class="_ _42"> </span>ar<span class="lsb26">eh<span class="_ _43"></span><span class="ls0">eld <span class="_ _23"> </span>for <span class="_ _42"> </span>short <span class="_ _53"> </span>periods <span class="_ _42"> </span>of <span class="_ _42"> </span>times <span class="_ _42"> </span>and</span></span></span></span></div><div class="t m0 x32 h2a y34a5 ff19 fsf fc0 sc0 ls0 ws0">threads don’t want to incur the cost of being descheduled.</div><div class="t m0 x3f h2a y34a6 ff19 fsf fc0 sc0 ls0 ws0">Spin <span class="_ _2"></span>locks <span class="_ _3"></span>ar<span class="lsc6f">eo<span class="_ _8"></span><span class="ls0">ften <span class="_ _3"></span>used <span class="_ _2"></span>as <span class="_ _3"></span>low-level <span class="_ _3"></span>primitives <span class="_ _2"></span>to <span class="_ _3"></span>implement <span class="_ _3"></span>other <span class="_ _3"></span>types <span class="_ _2"></span>of <span class="_ _3"></span>locks.</span></span></div><div class="t m0 x32 h2a y34a7 ff19 fsf fc0 sc0 ls0 ws0">Depending <span class="_ _9"></span>on <span class="_ _23"></span>the <span class="_ _9"></span>system <span class="_ _23"></span>ar<span class="_ _0"></span>chitecture, <span class="_ _9"></span>they <span class="_ _9"></span>can <span class="_ _23"></span>be <span class="_ _9"></span>implemented <span class="_ _9"></span>efﬁciently <span class="_ _9"></span>using <span class="_ _23"></span>test-</div><div class="t m0 x32 h2a y34a8 ff19 fsf fc0 sc0 ls0 ws0">and-set <span class="_ _2"></span>instructions. <span class="_ _47"> </span>Although<span class="_ _47"> </span>efﬁcient, <span class="_ _2"></span>they <span class="_ _3"></span>can <span class="_ _3"></span>lead <span class="_ _3"></span>to <span class="_ _2"></span>wasting <span class="_ _3"></span>CPU <span class="_ _3"></span>resources: while</div><div class="t m0 x32 h2a y34a9 ff19 fsf fc0 sc0 lsc59 ws0">at<span class="_ _4a"></span><span class="ls0">hread <span class="_"> </span>is <span class="_ _53"> </span>spinning <span class="_"> </span>and <span class="_ _e"> </span>waiting <span class="_"> </span>for <span class="_ _53"> </span>a <span class="_"> </span>lock <span class="_ _e"> </span>to <span class="_"> </span>become <span class="_ _53"> </span>available, <span class="_"> </span>the <span class="_ _e"> </span>CPU <span class="_"> </span>can’t <span class="_ _53"> </span>do</span></div><div class="t m0 x32 h2a y34aa ff19 fsf fc0 sc0 ls0 ws0">anything else.<span class="_ _59"> </span>This is why spin locks should be held only for short periods of time.</div><div class="t m0 x3f h2a y34ab ff19 fsf fc0 sc0 ls0 ws0">Spin <span class="_ _42"> </span>locks <span class="_ _42"> </span>ar<span class="lse3b">eu<span class="_ _c"></span><span class="ls0">seful <span class="_ _42"> </span>when <span class="_ _42"> </span>used <span class="_ _53"> </span>in <span class="_ _42"> </span>a <span class="_ _42"> </span>nonpreemptive <span class="_ _42"> </span>kernel: <span class="_ _42"> </span>besides <span class="_ _42"> </span>providing <span class="_ _23"> </span>a</span></span></div><div class="t m0 x32 h2a y34ac ff19 fsf fc0 sc0 ls0 ws0">mutual <span class="_ _45"> </span>exclusion <span class="_ _45"> </span>mechanism, <span class="_ _45"> </span>they <span class="_ _45"> </span>block <span class="_ _45"> </span>interrupts <span class="_ _45"> </span>so <span class="_ _45"> </span>an <span class="_ _45"> </span>interrupt <span class="_ _45"> </span>handler <span class="_ _45"> </span>can’t</div><div class="t m0 x32 h2a y34ad ff19 fsf fc0 sc0 ls0 ws0">deadlock <span class="_ _42"> </span>the <span class="_ _42"> </span>system <span class="_ _42"> </span>by <span class="_ _42"> </span>trying <span class="_ _42"> </span>to <span class="_ _42"> </span>acquir<span class="lse3c">eas<span class="_ _c"></span><span class="ls0">pin <span class="_ _42"> </span>lock <span class="_ _42"> </span>that <span class="_ _42"> </span>is <span class="_ _42"> </span>already <span class="_ _42"> </span>locked <span class="_ _42"> </span>(think <span class="_ _42"> </span>of</span></span></div><div class="t m0 x32 h2a y34ae ff19 fsf fc0 sc0 ls0 ws0">interrupts <span class="_ _2"></span>as <span class="_ _3"></span>another <span class="_ _3"></span>type <span class="_ _3"></span>of <span class="_ _3"></span>preemption). <span class="_ _47"> </span>In<span class="_ _47"> </span>these <span class="_ _3"></span>types <span class="_ _3"></span>of <span class="_ _3"></span>kernels, <span class="_ _3"></span>interrupt <span class="_ _2"></span>handlers</div><div class="t m0 x32 h2a y34af ff19 fsf fc0 sc0 ls0 ws0">can’t sleep, so the only synchronization primitives they can use ar<span class="_ _0"></span><span class="ls44">es<span class="_ _d"></span><span class="ls0">pin locks.</span></span></div><div class="t m0 x3f h2a y34b0 ff19 fsf fc0 sc0 ls0 ws0">However<span class="_ _6"></span>,<span class="_ _47"> </span>at<span class="_"> </span>user <span class="_ _2"></span>level, <span class="_ _2"></span>spin <span class="_ _2"></span>locks <span class="_ _2"></span>ar<span class="lsa96">en<span class="_ _4f"></span><span class="ls0">ot <span class="_ _2"></span>as useful <span class="_ _2"></span>unless <span class="_ _2"></span>you <span class="_ _2"></span>ar<span class="ls47d">er<span class="_ _4f"></span><span class="ls0">unning <span class="_ _2"></span>in a <span class="_ _2"></span>real-</span></span></span></span></div><div class="t m0 x32 h2a y34d ff19 fsf fc0 sc0 ls0 ws0">time <span class="_ _23"> </span>scheduling <span class="_ _42"> </span>class <span class="_ _23"></span>that <span class="_ _23"> </span>doesn’t <span class="_ _42"> </span>allow <span class="_ _23"> </span>preemption. <span class="_ _35"> </span>User-level <span class="_ _23"></span>threads <span class="_ _9"></span>running <span class="_ _42"> </span>in <span class="_ _23"> </span>a</div><div class="t m0 x32 h2a y34b1 ff19 fsf fc0 sc0 ls0 ws0">time-sharing <span class="_ _3"></span>scheduling <span class="_ _9"></span>class <span class="_ _9"></span>can <span class="_ _3"></span>be <span class="_ _9"></span>descheduled <span class="_ _3"></span>when <span class="_ _9"></span>their <span class="_ _9"></span>time <span class="_ _3"></span>quantum <span class="_ _9"></span>expires <span class="_ _3"></span>or</div><div class="t m0 x32 h2a y34b2 ff19 fsf fc0 sc0 ls0 ws0">when <span class="_ _3"></span>a <span class="_ _3"></span>thread <span class="_ _3"></span>with <span class="_ _3"></span>a <span class="_ _3"></span>higher <span class="_ _3"></span>scheduling <span class="_ _9"></span>priority <span class="_ _3"></span>becomes <span class="_ _3"></span>runnable. <span class="_ _47"> </span>In<span class="_ _47"> </span>these <span class="_ _9"></span>cases, <span class="_ _3"></span>if <span class="_ _3"></span>a</div><div class="t m0 x32 h2a y34b3 ff19 fsf fc0 sc0 ls0 ws0">thread <span class="_ _9"></span>is <span class="_ _23"></span>holding <span class="_ _9"></span>a <span class="_ _23"> </span>spin <span class="_ _23"></span>lock, <span class="_ _23"></span>it <span class="_ _9"></span>will <span class="_ _23"> </span>be <span class="_ _23"></span>put <span class="_ _23"></span>to <span class="_ _9"></span>sleep <span class="_ _23"> </span>and <span class="_ _23"></span>other <span class="_ _23"></span>thr<span class="_ _0"></span>eads <span class="_ _23"></span>blocked <span class="_ _9"></span>on <span class="_ _23"></span>the</div><div class="t m0 x32 h2a y34b4 ff19 fsf fc0 sc0 ls0 ws0">lock will continue spinning longer than intended.</div><div class="t m0 x3f h2a y34b5 ff19 fsf fc0 sc0 ls0 ws0">Many <span class="_ _9"></span>mutex <span class="_ _9"></span>implementations <span class="_ _23"></span>are<span class="_ _47"> </span>so<span class="_ _35"> </span>e<span class="ls45">fﬁ</span>cient <span class="_ _9"></span>that <span class="_ _23"></span>the <span class="_ _9"></span>performance <span class="_ _9"></span>of <span class="_ _9"></span>applications</div><div class="t m0 x32 h2a y34b6 ff19 fsf fc0 sc0 ls0 ws0">using <span class="_ _42"> </span>mutex <span class="_ _23"> </span>locks <span class="_ _42"> </span>is <span class="_ _42"> </span>equivalent <span class="_ _42"> </span>to <span class="_ _23"> </span>their <span class="_ _42"> </span>performance <span class="_ _42"> </span>if <span class="_ _42"> </span>they <span class="_ _23"> </span>had <span class="_ _42"> </span>used <span class="_ _42"> </span>spin <span class="_ _42"> </span>locks.<span class="_ _51"> </span>In</div><div class="t m0 x32 h2a y34b7 ff19 fsf fc0 sc0 ls0 ws0">fact, <span class="_ _e"> </span>some <span class="_"> </span>mutex <span class="_ _53"> </span>implementations <span class="_"> </span>will <span class="_ _e"> </span>spin <span class="_ _e"> </span>for <span class="_"> </span>a <span class="_ _53"> </span>limited <span class="_"> </span>amount <span class="_ _e"> </span>of <span class="_"> </span>time <span class="_ _53"> </span>trying <span class="_"> </span>to</div><div class="t m0 x32 h2a y34b8 ff19 fsf fc0 sc0 ls0 ws0">acquir<span class="lse3d">et<span class="_ _55"></span><span class="ls0">he <span class="_ _53"> </span>mutex, <span class="_ _53"> </span>and <span class="_ _53"> </span>only <span class="_ _53"> </span>sleep <span class="_ _53"> </span>when <span class="_ _53"> </span>the <span class="_ _53"> </span>spin <span class="_ _e"> </span>count <span class="_ _53"> </span>threshold <span class="_ _42"> </span>is <span class="_ _53"> </span>reached. <span class="_ _44"> </span>These</span></span></div><div class="t m0 x32 h2a y34b9 ff19 fsf fc0 sc0 ls0 ws0">factors, <span class="_"> </span>combined <span class="_ _66"> </span>with <span class="_ _66"> </span>advances <span class="_ _66"> </span>in <span class="_ _66"> </span>modern <span class="_ _66"> </span>processors <span class="_"> </span>that <span class="_ _66"> </span>allow <span class="_ _66"> </span>them <span class="_ _66"> </span>to <span class="_ _66"> </span>context</div><div class="t m0 x32 h2a y25d7 ff19 fsf fc0 sc0 ls0 ws0">switch at faster and faster rates, make spin locks useful only in limited circumstances.</div><div class="t m0 x3f h2a y34ba ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _23"></span>interfaces <span class="_ _23"></span>for <span class="_ _23"></span>spin <span class="_ _23"></span>locks <span class="_ _23"></span>ar<span class="lse3e">es<span class="_ _43"></span><span class="ls0">imilar <span class="_ _23"></span>to <span class="_ _23"></span>those <span class="_ _23"></span>for <span class="_ _23"></span>mutexes, <span class="_ _23"></span>making <span class="_ _23"></span>it <span class="_ _23"></span>relatively</span></span></div><div class="t m0 x32 h2a y34bb ff19 fsf fc0 sc0 ls0 ws0">easy <span class="_ _46"> </span>to <span class="_ _61"> </span>replace <span class="_ _46"> </span>one <span class="_ _46"> </span>with <span class="_ _61"> </span>the <span class="_ _61"> </span>other<span class="_ _6"></span><span class="lse3f">.W<span class="_ _96"></span><span class="lse40">ec<span class="_ _49"></span><span class="ls0">an <span class="_ _61"> </span>initialize <span class="_ _46"> </span>a <span class="_ _61"> </span>spin <span class="_ _61"> </span>lock <span class="_ _46"> </span>with <span class="_ _61"> </span>the</span></span></span></div><div class="t m0 x32 h26 y34bc ff1a fsf fc0 sc0 ls0 ws0">pthread_spin_init<span class="_ _1a3"> </span><span class="ff19">function. <span class="_ _1a3"> </span>T<span class="_ _6"></span><span class="lse41">od<span class="_ _95"></span><span class="ls0">einitialize <span class="_ _5a"> </span>a <span class="_ _5a"> </span>spin <span class="_ _5a"> </span>lock, <span class="_ _5a"> </span>we <span class="_ _5a"> </span>can <span class="_ _5a"> </span>call <span class="_ _5a"> </span>the</span></span></span></div><div class="t m0 x32 h26 y34bd ff1a fsf fc0 sc0 ls0 ws0">pthread_spin_destroy<span class="_ _80"> </span><span class="ff19">function.</span></div><div class="t m0 x3f h57 y34be ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y34bf ff1a fs2d fc0 sc0 ls0 ws0">int pthread_spin_init(pthread_spinlock_t *<span class="ff1b">lock</span><span class="ls15c">,i<span class="_ _1d"></span><span class="ls0">nt<span class="_"> </span><span class="ff1b">pshared</span>);</span></span></div><div class="t m0 x3f h57 y34c0 ff1a fs2d fc0 sc0 ls0 ws0">int pthread_spin_destroy(pthread_spinlock_t *<span class="ff1b">lock</span>);</div><div class="t m0 xca h5f y34c1 ff19 fs2d fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x32 h49 y34c2 ff19 fs26 fc0 sc0 ls0 ws0">Only <span class="_ _47"> </span>one <span class="_ _47"> </span>attribute <span class="_ _47"> </span>is <span class="_ _47"> </span>speciﬁed <span class="_ _47"> </span>for <span class="_ _47"> </span>spin <span class="_ _47"> </span>locks, <span class="_ _47"> </span>which <span class="_ _66"> </span>matters <span class="_ _47"> </span>only <span class="_ _47"> </span>if <span class="_ _47"> </span>the <span class="_ _47"> </span>platform</div><div class="t m0 x32 h49 y34c3 ff19 fs26 fc0 sc0 ls0 ws0">supports <span class="_ _e"> </span>the <span class="_"> </span>Thr<span class="_ _0"></span>ead <span class="_ _e"> </span>Process-Shared <span class="_ _53"> </span>Synchronization <span class="_"> </span>option <span class="_ _53"> </span>(now <span class="_"> </span>mandatory <span class="_ _e"> </span>in <span class="_"> </span>the</div><div class="t m0 x32 h4a y34c4 ff19 fs26 fc0 sc0 ls0 ws0">Single <span class="_ _47"> </span>UNIX <span class="_ _66"> </span>Speciﬁcation; <span class="_ _47"> </span>recall <span class="_ _47"> </span>Figur<span class="lse42">e2<span class="_ _62"></span><span class="ls0">.5). <span class="_ _16"> </span>The<span class="_ _61"> </span><span class="ff1b">pshared<span class="_ _61"> </span></span>argument <span class="_ _47"> </span>r<span class="_ _0"></span>epresents <span class="_ _66"> </span>the</span></span></div><div class="t m0 x32 h4a y34c5 ff1b fs26 fc0 sc0 ls0 ws0">process-shar<span class="_ _0"></span>ed<span class="_"> </span><span class="ff19">attribute, <span class="_ _2"></span>which <span class="_ _2"></span>indicates <span class="_ _3"></span>how <span class="_ _2"></span>the <span class="_ _2"></span>spin <span class="_ _2"></span>lock <span class="_ _2"></span>will <span class="_ _2"></span>be <span class="_ _2"></span>acquired. <span class="_"> </span>If<span class="_ _47"> </span>it is <span class="_ _2"></span>set <span class="_ _2"></span>to</span></div><div class="t m0 x32 h4d y34c6 ff1a fs26 fc0 sc0 ls0 ws0">PTHREAD_PROCESS_SHARED<span class="ff19 lse43">,t<span class="_ _b"></span><span class="ls0">hen <span class="_ _9"></span>the <span class="_ _9"></span>spin <span class="_ _23"></span>lock <span class="_ _9"></span>can <span class="_ _9"></span>be <span class="_ _9"></span>acquired <span class="_ _9"></span>by <span class="_ _9"></span>threads <span class="_ _9"></span>that <span class="_ _9"></span>have</span></span></div><div class="t m0 x32 h49 y34c7 ff19 fs26 fc0 sc0 ls0 ws0">access <span class="_ _45"> </span>to <span class="_ _47"> </span>the <span class="_ _45"> </span>lock’s <span class="_ _45"> </span>underlying <span class="_ _45"> </span>memory<span class="_ _4"></span><span class="lse44">,e<span class="_ _62"></span><span class="ls0">ven <span class="_ _45"> </span>if <span class="_ _45"> </span>those <span class="_ _45"> </span>threads <span class="_ _47"> </span>ar<span class="lse45">ef<span class="_ _26"></span><span class="lscc">ro<span class="_ _2"></span><span class="lse45">md<span class="_ _62"></span><span class="ls0">ifferent</span></span></span></span></span></span></div><div class="t m0 x32 h4d y34c8 ff19 fs26 fc0 sc0 ls0 ws0">processes. <span class="_"> </span>Otherwise,<span class="_"> </span>the<span class="_"> </span><span class="ff1b">pshared<span class="_"> </span></span>argument is set <span class="_ _2"></span>to<span class="_"> </span><span class="ff1a">PTHREAD_PROCESS_PRIVATE<span class="_ _66"> </span></span>and</div><div class="t m0 x32 h49 y34c9 ff19 fs26 fc0 sc0 ls0 ws0">the spin lock can be accessed only from thr<span class="_ _0"></span>eads within the pr<span class="_ _0"></span>ocess that initialized it.</div><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:156.492009px;bottom:1236.288916px;width:110.483994px;height:19.679993px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
