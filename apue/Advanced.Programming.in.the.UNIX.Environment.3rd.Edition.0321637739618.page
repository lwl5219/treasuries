<div id="pf26a" class="pf w4 h1f" data-page-no="26a"><div class="pc pc26a w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg26a.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">584<span class="_ _1b"> </span><span class="ff19">Interprocess <span class="_"> </span>Communication<span class="_ _2c"> </span>Chapter <span class="_"> </span>15</span></div><div class="t m0 x32 h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">s_alloc()</div><div class="t m0 x32 h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">struct slock *sp;</div><div class="t m0 x8a h57 y801 ff1a fs2d fc0 sc0 ls0 ws0">static int cnt;</div><div class="t m0 x8a h57 y23c8 ff1a fs2d fc0 sc0 ls0 ws0">if ((sp = malloc(sizeof(struct slock))) == NULL)</div><div class="t m0 x9d h57 y23c9 ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x8a h57 y23ca ff1a fs2d fc0 sc0 ls0 ws0">do {</div><div class="t m0 x9d h57 y23cb ff1a fs2d fc0 sc0 ls0 ws0">snprintf(sp-&gt;name, sizeof(sp-&gt;name), &quot;/%ld.%d&quot;, (long)getpid(),</div><div class="t m0 x76 h57 y86e ff1a fs2d fc0 sc0 ls0 ws0">cnt++);</div><div class="t m0 x9d h57 y86f ff1a fs2d fc0 sc0 ls0 ws0">sp-&gt;semp = sem_open(sp-&gt;name, O_CREAT|O_EXCL, S_IRWXU, 1);</div><div class="t m0 x8a h57 y870 ff1a fs2d fc0 sc0 ls15c ws0">}w<span class="_ _1d"></span><span class="ls0">hile ((sp-&gt;semp == SEM_FAILED) &amp;&amp; (errno == EEXIST));</span></div><div class="t m0 x8a h57 y871 ff1a fs2d fc0 sc0 ls0 ws0">if (sp-&gt;semp == SEM_FAILED) {</div><div class="t m0 x9d h57 y36a3 ff1a fs2d fc0 sc0 ls0 ws0">free(sp);</div><div class="t m0 x9d h57 y36a4 ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x8a h57 y36a5 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y36a6 ff1a fs2d fc0 sc0 ls0 ws0">sem_unlink(sp-&gt;name);</div><div class="t m0 x8a h57 y36a7 ff1a fs2d fc0 sc0 ls0 ws0">return(sp);</div><div class="t m0 x32 h57 y465b ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y878 ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y879 ff1a fs2d fc0 sc0 ls0 ws0">s_free(struct slock *sp)</div><div class="t m0 x32 h57 y87a ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y87b ff1a fs2d fc0 sc0 ls0 ws0">sem_close(sp-&gt;semp);</div><div class="t m0 x8a h57 y87c ff1a fs2d fc0 sc0 ls0 ws0">free(sp);</div><div class="t m0 x32 h57 y87d ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y1701 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y1702 ff1a fs2d fc0 sc0 ls0 ws0">s_lock(struct slock *sp)</div><div class="t m0 x32 h57 y1703 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y1704 ff1a fs2d fc0 sc0 ls0 ws0">return(sem_wait(sp-&gt;semp));</div><div class="t m0 x32 h57 y3359 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y23ed ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y23ee ff1a fs2d fc0 sc0 ls0 ws0">s_trylock(struct slock *sp)</div><div class="t m0 x32 h57 y23ef ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y23f0 ff1a fs2d fc0 sc0 ls0 ws0">return(sem_trywait(sp-&gt;semp));</div><div class="t m0 x32 h57 y23f1 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y465c ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y465d ff1a fs2d fc0 sc0 ls0 ws0">s_unlock(struct slock *sp)</div><div class="t m0 x32 h57 y465e ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y465f ff1a fs2d fc0 sc0 ls0 ws0">return(sem_post(sp-&gt;semp));</div><div class="t m0 x32 h57 y4660 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x25 h2d y4661 ff18 fs10 fc0 sc0 ls0 ws0">Figure 15.35<span class="_ _5a"> </span><span class="ff19">Mutual exclusion using a POSIX semaphore</span></div><div class="t m0 x3f h49 y4662 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _53"> </span>c<span class="_ _9"></span><span class="lscc">re<span class="_ _2"></span><span class="ls0">ate <span class="_ _2"></span>a name <span class="_ _2"></span>based on the <span class="_ _2"></span>process ID and <span class="_ _2"></span>a counter<span class="_ _1"></span><span class="ls12bf">.W<span class="_ _26"></span><span class="ls12c0">ed<span class="_ _d"></span><span class="ls0">on’t bother <span class="_ _2"></span>to protect</span></span></span></span></span></div><div class="t m0 x32 h4d y4663 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _3"></span>counter <span class="_ _3"></span>with <span class="_ _3"></span>a <span class="_ _3"></span>mutex, <span class="_ _3"></span>because <span class="_ _3"></span>if <span class="_ _3"></span>two <span class="_ _3"></span>racing <span class="_ _3"></span>threads <span class="_ _2"></span>call<span class="_ _45"> </span><span class="ff1a">s_alloc<span class="_ _47"> </span></span>at <span class="_ _2"></span>the <span class="_ _3"></span>same <span class="_ _3"></span>time</div><div class="t m0 x32 h4d y4664 ff19 fs26 fc0 sc0 ls0 ws0">and <span class="_ _23"></span>end <span class="_ _9"></span>up <span class="_ _23"> </span>with <span class="_ _23"></span>the <span class="_ _9"></span>same <span class="_ _23"> </span>name, <span class="_ _23"></span>using <span class="_ _23"></span>the<span class="_ _45"> </span><span class="ff1a">O_EXCL<span class="_ _35"> </span></span>ﬂag <span class="_ _9"></span>in <span class="_ _23"> </span>the <span class="_ _23"></span>call <span class="_ _23"></span>to<span class="_ _45"> </span><span class="ff1a">sem_open<span class="_ _35"> </span></span>will</div><div class="t m0 x32 h4d y4665 ff19 fs26 fc0 sc0 ls0 ws0">cause <span class="_ _3"></span>one <span class="_ _9"></span>to <span class="_ _3"></span>succeed <span class="_ _9"></span>and <span class="_ _3"></span>one <span class="_ _9"></span>to <span class="_ _9"></span>fail <span class="_ _3"></span>with<span class="_ _45"> </span><span class="ff1a">errno<span class="_ _47"> </span></span>set <span class="_ _9"></span>to<span class="_ _45"> </span><span class="ff1a">EEXIST</span>,<span class="_ _47"> </span>so<span class="_ _45"> </span>we<span class="_ _47"> </span>just <span class="_ _9"></span>retry <span class="_ _2"></span>if <span class="_ _9"></span>this</div><div class="t m0 x32 h49 y4666 ff19 fs26 fc0 sc0 ls0 ws0">happens. <span class="_ _47"> </span>Note<span class="_ _45"> </span>that <span class="_ _2"></span>we <span class="_ _9"></span>unlink <span class="_ _3"></span>the <span class="_ _3"></span>semaphor<span class="ls6b2">ea<span class="_ _8"></span><span class="ls0">fter <span class="_ _3"></span>opening <span class="_ _3"></span>it.<span class="_ _5a"> </span>This <span class="_ _3"></span>destroys <span class="_ _3"></span>the <span class="_ _3"></span>name</span></span></div><div class="t m0 x32 h49 y4667 ff19 fs26 fc0 sc0 ls0 ws0">so that no other process can access it and simpliﬁes cleanup when the pr<span class="_ _0"></span>ocess ends.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
