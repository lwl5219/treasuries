<div id="pf70" class="pf w4 h1f" data-page-no="70"><div class="pc pc70 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg70.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">78<span class="_ _1b"> </span><span class="ff19">File <span class="_"> </span>I/O<span class="_ _169"> </span>Chapter <span class="_"> </span>3</span></div><div class="t m0 x32 h2a y12f ff19 fsf fc0 sc0 ls0 ws0">This <span class="_ _23"> </span>works <span class="_ _23"> </span>ﬁne <span class="_ _23"> </span>for <span class="_ _42"> </span>a <span class="_ _23"></span>single <span class="_ _23"> </span>process, <span class="_ _23"></span>but <span class="_ _23"> </span>problems <span class="_ _23"></span>arise <span class="_ _23"> </span>if <span class="_ _23"> </span>multiple <span class="_ _42"> </span>pr<span class="_ _0"></span>ocesses <span class="_ _23"> </span>use <span class="_ _23"> </span>this</div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">technique to append to the same ﬁle.<span class="_ _46"> </span>(This scenario can arise if multiple instances of the</div><div class="t m0 x32 h2a y131 ff19 fsf fc0 sc0 ls0 ws0">same program ar<span class="_ _0"></span><span class="ls44">ea<span class="_ _d"></span><span class="ls0">ppending messages to a log ﬁle, for example.)</span></span></div><div class="t m0 x3f h2a y132 ff19 fsf fc0 sc0 ls0 ws0">Assume <span class="_ _9"></span>that <span class="_ _9"></span>two <span class="_ _9"></span>independent <span class="_ _23"></span>processes, <span class="_ _3"></span>A <span class="_ _9"></span>and <span class="_ _23"></span>B, <span class="_ _9"></span>ar<span class="ls3e5">ea<span class="_ _b"></span><span class="ls0">ppending <span class="_ _3"></span>to <span class="_ _23"></span>the <span class="_ _9"></span>same <span class="_ _9"></span>ﬁle.</span></span></div><div class="t m0 x32 h26 y133 ff19 fsf fc0 sc0 ls0 ws0">Each <span class="_ _2"></span>has <span class="_ _2"></span>opened <span class="_ _2"></span>the <span class="_ _3"></span>ﬁle <span class="_ _2"></span>but<span class="_ _47"> </span><span class="ff1b">without<span class="_ _66"> </span></span>the<span class="_ _47"> </span><span class="ff1a">O_APPEND<span class="_ _66"> </span></span>ﬂag. <span class="_ _47"> </span>This<span class="_ _66"> </span>gives <span class="_ _3"></span>us <span class="_ _2"></span>the <span class="_ _2"></span>same <span class="_ _2"></span>picture</div><div class="t m0 x32 h2a y134 ff19 fsf fc0 sc0 ls0 ws0">as <span class="_ _9"></span>Figur<span class="ls3e6">e3<span class="_ _b"></span><span class="ls0">.8. <span class="_ _45"> </span>Each<span class="_ _45"> </span>process <span class="_ _3"></span>has <span class="_ _23"></span>its <span class="_ _9"></span>own <span class="_ _9"></span>ﬁle <span class="_ _9"></span>table <span class="_ _23"></span>entry<span class="_ _4"></span><span class="ls3e6">,b<span class="_ _b"></span><span class="ls0">ut <span class="_ _9"></span>they <span class="_ _23"></span>shar<span class="_ _0"></span><span class="ls3e6">eas<span class="_ _b"></span><span class="ls0">ingle <span class="_ _9"></span>v-node</span></span></span></span></span></span></div><div class="t m0 x32 h26 y135 ff19 fsf fc0 sc0 ls0 ws0">table <span class="_ _3"></span>entry<span class="_ _4"></span><span class="ls3e7">.A<span class="_ _1d"></span><span class="ls0">ssume <span class="_ _3"></span>that <span class="_ _3"></span>process <span class="_ _3"></span>A <span class="_ _3"></span>does <span class="_ _3"></span>the<span class="_ _47"> </span><span class="ff1a">lseek<span class="_ _47"> </span></span>and <span class="_ _3"></span>that <span class="_ _3"></span>this <span class="_ _3"></span>sets <span class="_ _3"></span>the <span class="_ _3"></span>current <span class="_ _3"></span>offset</span></span></div><div class="t m0 x32 h2a y136 ff19 fsf fc0 sc0 ls0 ws0">for <span class="_ _9"></span>the <span class="_ _23"> </span>ﬁle <span class="_ _23"></span>for <span class="_ _9"></span>process <span class="_ _9"></span>A <span class="_ _23"> </span>to <span class="_ _23"></span>byte <span class="_ _9"></span>offset <span class="_ _9"></span>1,500 <span class="_ _23"></span>(the <span class="_ _23"></span>curr<span class="_ _0"></span>ent <span class="_ _9"></span>end <span class="_ _23"> </span>of <span class="_ _23"></span>ﬁle).<span class="_ _5a"> </span>Then <span class="_ _23"></span>the <span class="_ _9"></span>kernel</div><div class="t m0 x32 h26 y137 ff19 fsf fc0 sc0 ls0 ws0">switches <span class="_ _42"> </span>processes, <span class="_ _23"></span>and <span class="_ _42"> </span>B <span class="_ _42"> </span>continues <span class="_ _23"> </span>running. <span class="_ _44"> </span>Process <span class="_ _23"></span>B <span class="_ _42"> </span>then <span class="_ _42"> </span>does <span class="_ _23"> </span>the<span class="_ _44"> </span><span class="ff1a">lseek</span><span class="ls3e8">,w<span class="_ _43"></span><span class="ls0">hich</span></span></div><div class="t m0 x32 h2a y138 ff19 fsf fc0 sc0 ls0 ws0">sets <span class="_ _3"></span>the <span class="_ _3"></span>current <span class="_ _3"></span>offset <span class="_ _3"></span>for <span class="_ _3"></span>the <span class="_ _3"></span>ﬁle <span class="_ _9"></span>for <span class="_ _3"></span>process <span class="_ _2"></span>B <span class="_ _9"></span>to <span class="_ _3"></span>byte <span class="_ _3"></span>offset <span class="_ _3"></span>1,500 <span class="_ _3"></span>also <span class="_ _9"></span>(the <span class="_ _3"></span>current <span class="_ _3"></span>end</div><div class="t m0 x32 h26 y139 ff19 fsf fc0 sc0 ls0 ws0">of <span class="_ _2"></span>ﬁle).<span class="_ _61"> </span>Then <span class="_ _2"></span>B <span class="_ _2"></span>calls<span class="_ _47"> </span><span class="ff1a">write</span><span class="ls3e9">,w<span class="_ _4f"></span><span class="ls0">hich <span class="_ _2"></span>increments <span class="_ _2"></span>B’s <span class="_ _2"></span>current ﬁle <span class="_ _3"></span>offset for <span class="_ _2"></span>the <span class="_ _3"></span>ﬁle <span class="_ _2"></span>to <span class="_ _2"></span>1,600.</span></span></div><div class="t m0 x32 h2a y13a ff19 fsf fc0 sc0 ls0 ws0">Because <span class="_ _2"></span>the <span class="_ _3"></span>ﬁle’s <span class="_ _2"></span>size <span class="_ _3"></span>has <span class="_ _2"></span>been <span class="_ _3"></span>extended, <span class="_ _2"></span>the <span class="_ _3"></span>kernel <span class="_ _3"></span>also <span class="_ _2"></span>updates <span class="_ _3"></span>the <span class="_ _2"></span>current <span class="_ _2"></span>ﬁle <span class="_ _2"></span>size <span class="_ _3"></span>in</div><div class="t m0 x32 h2a y254 ff19 fsf fc0 sc0 ls0 ws0">the <span class="_ _3"></span>v-node <span class="_ _9"></span>to <span class="_ _3"></span>1,600.<span class="_ _16"> </span>Then <span class="_ _9"></span>the <span class="_ _3"></span>kernel <span class="_ _9"></span>switches <span class="_ _3"></span>processes <span class="_ _3"></span>and <span class="_ _9"></span>A <span class="_ _3"></span>resumes. <span class="_ _47"> </span>When<span class="_ _45"> </span><span class="ls3ea">Ac<span class="_ _b"></span><span class="ls0">alls</span></span></div><div class="t m0 x32 h26 y255 ff1a fsf fc0 sc0 ls0 ws0">write<span class="ff19 lsbb">,t<span class="_ _b"></span><span class="ls0">he <span class="_ _9"></span>data <span class="_ _23"></span>is <span class="_ _23"></span>written <span class="_ _9"></span>starting <span class="_ _23"> </span>at <span class="_ _23"></span>the <span class="_ _23"></span>curr<span class="_ _0"></span>ent <span class="_ _23"></span>ﬁle <span class="_ _9"></span>offset <span class="_ _23"></span>for <span class="_ _9"></span>A, <span class="_ _23"> </span>which <span class="_ _23"></span>is <span class="_ _23"></span>byte <span class="_ _9"></span>offset</span></span></div><div class="t m0 x32 h2a y13b ff19 fsf fc0 sc0 ls0 ws0">1,500. <span class="_"> </span>This<span class="_"> </span>overwrites the data that B wrote to the ﬁle.</div><div class="t m0 x3f h2a y13c ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _23"> </span>problem <span class="_ _23"> </span>here<span class="_ _35"> </span>is<span class="_ _35"> </span>that <span class="_ _42"> </span>our <span class="_ _23"> </span>logical <span class="_ _42"> </span>operation <span class="_ _23"> </span>of <span class="_ _42"> </span>‘<span class="_ _0"></span>‘position <span class="_ _23"> </span>to <span class="_ _42"> </span>the <span class="_ _23"> </span>end <span class="_ _42"> </span>of <span class="_ _23"> </span>ﬁle <span class="_ _42"> </span>and</div><div class="t m0 x32 h2a y256 ff19 fsf fc0 sc0 ls0 ws0">write’<span class="_ _0"></span><span class="ls3eb">’r<span class="_ _b"></span><span class="ls0">equires <span class="_ _2"></span>two <span class="_ _3"></span>separate <span class="_ _3"></span>function <span class="_ _3"></span>calls <span class="_ _3"></span>(as <span class="_ _3"></span>we’ve <span class="_ _2"></span>shown <span class="_ _3"></span>it).<span class="_ _16"> </span>The <span class="_ _3"></span>solution <span class="_ _3"></span>is <span class="_ _3"></span>to <span class="_ _2"></span>have</span></span></div><div class="t m0 x32 h2a y257 ff19 fsf fc0 sc0 ls0 ws0">the <span class="_ _42"> </span>positioning <span class="_ _53"> </span>to <span class="_ _53"> </span>the <span class="_ _53"> </span>current <span class="_ _42"> </span>end <span class="_ _53"> </span>of <span class="_ _42"> </span>ﬁle <span class="_ _53"> </span>and <span class="_ _53"> </span>the <span class="_ _53"> </span>write <span class="_ _53"> </span>be <span class="_ _42"> </span>an <span class="_ _53"> </span>atomic <span class="_ _53"> </span>operation <span class="_ _53"> </span>with</div><div class="t m0 x32 h2a y258 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">gard<span class="_ _4b"> </span>to<span class="_ _59"> </span>other <span class="_ _e"> </span>processes. <span class="_ _4b"> </span>Any<span class="_ _59"> </span>operation <span class="_ _e"> </span>that <span class="_"> </span>r<span class="_ _1"></span>equires <span class="_ _e"> </span>mor<span class="ls3ec">et<span class="_ _55"></span><span class="ls0">han <span class="_ _e"> </span>one <span class="_ _e"> </span>function <span class="_"> </span>call</span></span></span></div><div class="t m0 x32 h2a y161 ff19 fsf fc0 sc0 ls0 ws0">cannot <span class="_ _23"> </span>be <span class="_ _42"> </span>atomic, <span class="_ _23"></span>as <span class="_ _23"> </span>there<span class="_ _35"> </span>is<span class="_ _35"> </span>always <span class="_ _23"> </span>the <span class="_ _42"> </span>possibility <span class="_ _23"> </span>that <span class="_ _23"> </span>the <span class="_ _42"> </span>kernel <span class="_ _23"> </span>might <span class="_ _42"> </span>temporarily</div><div class="t m0 x32 h2a y162 ff19 fsf fc0 sc0 ls0 ws0">suspend the process between the two function calls (as we assumed pr<span class="_ _0"></span>eviously).</div><div class="t m0 x3f h2a y1db ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _66"> </span>UNIX <span class="_ _47"> </span>System <span class="_"> </span>provides <span class="_ _66"> </span>an <span class="_ _47"> </span>atomic <span class="_"> </span>way <span class="_ _47"> </span>to <span class="_ _66"> </span>do <span class="_ _47"> </span>this <span class="_"> </span>operation <span class="_ _47"> </span>if <span class="_ _66"> </span>we <span class="_ _47"> </span>set <span class="_"> </span>the</div><div class="t m0 x32 h26 y25a ff1a fsf fc0 sc0 ls0 ws0">O_APPEND<span class="_ _44"> </span><span class="ff19">ﬂag <span class="_ _42"> </span>when <span class="_ _42"> </span>a <span class="_ _42"> </span>ﬁle <span class="_ _42"> </span>is <span class="_ _53"> </span>opened.<span class="_ _54"> </span>As <span class="_ _42"> </span>we <span class="_ _42"> </span>described <span class="_ _53"> </span>in <span class="_ _42"> </span>the <span class="_ _42"> </span>previous <span class="_ _42"> </span>section, <span class="_ _42"> </span>this</span></div><div class="t m0 x32 h26 y164 ff19 fsf fc0 sc0 ls0 ws0">causes <span class="_ _2"></span>the <span class="_ _2"></span>kernel <span class="_ _3"></span>to <span class="_ _2"></span>position <span class="_ _3"></span>the <span class="_ _2"></span>ﬁle <span class="_ _2"></span>to <span class="_ _3"></span>its <span class="_ _2"></span>current <span class="_ _2"></span>end <span class="_ _2"></span>of <span class="_ _3"></span>ﬁle <span class="_ _2"></span>befor<span class="ls3ed">ee<span class="_ _4f"></span><span class="ls0">ach<span class="_ _66"> </span><span class="ff1a">write</span><span class="ls3ee">.W<span class="_ _26"></span><span class="ls3ed">en<span class="_ _4f"></span><span class="ls0">o</span></span></span></span></span></div><div class="t m0 x32 h26 y25b ff19 fsf fc0 sc0 ls0 ws0">longer have to call<span class="_"> </span><span class="ff1a">lseek<span class="_ _80"> </span></span>befor<span class="ls44">ee<span class="_ _d"></span><span class="ls0">ach<span class="_"> </span><span class="ff1a">write</span>.</span></span></div><div class="t m0 x35 h26 yc2b ff1f fsf fc0 sc0 ls0 ws0">pread<span class="_ _66"> </span><span class="ff16">and<span class="_"> </span></span>pwrite<span class="_ _47"> </span><span class="ff16">Functions</span></div><div class="t m0 x32 h2a y5e5 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _42"> </span>Single <span class="_ _23"> </span>UNIX <span class="_ _42"> </span>Speciﬁcation <span class="_ _42"> </span>includes <span class="_ _42"> </span>two <span class="_ _42"> </span>functions <span class="_ _42"> </span>that <span class="_ _42"> </span>allow <span class="_ _23"> </span>applications <span class="_ _42"> </span>to <span class="_ _42"> </span>seek</div><div class="t m0 x32 h26 y5e6 ff19 fsf fc0 sc0 ls0 ws0">and perform I/O atomically:<span class="_"> </span><span class="ff1a">pread<span class="_ _80"> </span></span>and<span class="_"> </span><span class="ff1a">pwrite</span>.</div><div class="t m0 x3f h57 yc2c ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;unistd.h&gt;</div><div class="t m0 x3f h57 yc2d ff1a fs2d fc0 sc0 ls0 ws0">ssize_t pread(int<span class="_"> </span><span class="ff1b">fd</span><span class="ls15c">,v<span class="_ _1d"></span><span class="ls0">oid *<span class="ff1b">buf</span><span class="ls15c">,s<span class="_ _5b"></span><span class="ls0">ize_t<span class="_"> </span><span class="ff1b">nbytes</span><span class="ls15c">,o<span class="_ _1d"></span><span class="ls0">ff_t<span class="_"> </span><span class="ff1b">offset</span>);</span></span></span></span></span></span></div><div class="t m0 x4b h5f yc2e ff19 fs2d fc0 sc0 ls0 ws0">Returns: number of bytes read, 0 if end of ﬁle,<span class="_"> </span><span class="ff20">−</span>1<span class="_"> </span>on<span class="_"> </span>err<span class="_ _0"></span>or</div><div class="t m0 x3f h57 yc2f ff1a fs2d fc0 sc0 ls0 ws0">ssize_t pwrite(int<span class="_"> </span><span class="ff1b">fd</span><span class="ls15c">,c<span class="_ _1d"></span><span class="ls0">onst void *<span class="ff1b">buf</span><span class="ls15c">,s<span class="_ _5b"></span><span class="ls0">ize_t<span class="_"> </span><span class="ff1b">nbytes</span><span class="ls15c">,o<span class="_ _1d"></span><span class="ls0">ff_t<span class="_"> </span><span class="ff1b">offset</span>);</span></span></span></span></span></span></div><div class="t m0 x84 h5f yc30 ff19 fs2d fc0 sc0 ls0 ws0">Returns: number of bytes written if OK,<span class="_"> </span><span class="ff20">−</span>1<span class="_"> </span>on<span class="_"> </span>error</div><div class="t m0 x3f h4d yc31 ff19 fs26 fc0 sc0 ls0 ws0">Calling<span class="_ _45"> </span><span class="ff1a">pread<span class="_ _45"> </span></span>is <span class="_ _9"></span>equivalent <span class="_ _9"></span>to <span class="_ _9"></span>calling<span class="_ _45"> </span><span class="ff1a">lseek<span class="_ _45"> </span></span>followed <span class="_ _9"></span>by <span class="_ _23"></span>a <span class="_ _9"></span>call <span class="_ _9"></span>to<span class="_ _45"> </span><span class="ff1a">read</span><span class="ls3ef">,w<span class="_ _b"></span><span class="ls0">ith <span class="_ _9"></span>the</span></span></div><div class="t m0 x32 h49 yc32 ff19 fs26 fc0 sc0 ls0 ws0">following exceptions.</div><div class="t m0 x3f h4d yc33 ff19 fs26 fc0 sc0 ls15d ws0">•T<span class="_ _4d"></span><span class="ls0">here<span class="_"> </span>is<span class="_"> </span>no<span class="_"> </span>way to interr<span class="_ _0"></span>upt the two operations that occur when we call<span class="_"> </span><span class="ff1a">pread</span>.</span></div><div class="t m0 x3f h49 yc34 ff19 fs26 fc0 sc0 ls15d ws0">•T<span class="_ _4d"></span><span class="ls0">he current ﬁle of<span class="_ _0"></span>fset is not updated.</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
