<div id="pf233" class="pf w4 h1f" data-page-no="233"><div class="pc pc233 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg233.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>14.8<span class="_ _2b0"> </span>Memory-Mapped <span class="_"> </span>I/O<span class="_ _1b"> </span><span class="ff18">529</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;fcntl.h&gt;</div><div class="t m0 x32 h57 y845 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;sys/mman.h&gt;</div><div class="t m0 x32 h57 y3c2 ff1a fs2d fc0 sc0 ls0 ws0">#define COPYINCR (1024*1024*1024)<span class="_ _68"> </span>/* 1 GB */</div><div class="t m0 x32 h57 y1d34 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y158d ff1a fs2d fc0 sc0 ls0 ws0">main(int argc, char *argv[])</div><div class="t m0 x32 h57 y158e ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y158f ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _186"> </span>fdin,<span class="_"> </span>fdout;</div><div class="t m0 x8a h57 y3c7 ff1a fs2d fc0 sc0 ls0 ws0">void <span class="_ _b7"> </span>*src,<span class="_"> </span>*dst;</div><div class="t m0 x8a h57 y3c8 ff1a fs2d fc0 sc0 ls0 ws0">size_t <span class="_ _8a"> </span>copysz;</div><div class="t m0 x8a h57 y3c9 ff1a fs2d fc0 sc0 ls0 ws0">struct stat sbuf;</div><div class="t m0 x8a h57 y3ca ff1a fs2d fc0 sc0 ls0 ws0">off_t <span class="_ _189"> </span>fsz<span class="_"> </span><span class="ls15c">=0<span class="_ _5b"></span><span class="ls0">;</span></span></div><div class="t m0 x8a h57 y3cb ff1a fs2d fc0 sc0 ls0 ws0">if (argc != 3)</div><div class="t m0 x9d h57 y3cc ff1a fs2d fc0 sc0 ls0 ws0">err_quit(&quot;usage: %s &lt;fromfile&gt; &lt;tofile&gt;&quot;, argv[0]);</div><div class="t m0 x8a h57 y24c6 ff1a fs2d fc0 sc0 ls0 ws0">if ((fdin = open(argv[1], O_RDONLY)) &lt; 0)</div><div class="t m0 x9d h57 y24c7 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;can’t open %s for reading&quot;, argv[1]);</div><div class="t m0 x8a h57 y1d3c ff1a fs2d fc0 sc0 ls0 ws0">if ((fdout = open(argv[2], O_RDWR | O_CREAT | O_TRUNC,</div><div class="t m0 x194 h57 y1d3d ff1a fs2d fc0 sc0 ls0 ws0">FILE_MODE)) &lt; 0)</div><div class="t m0 x9d h57 y1d3e ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;can’t creat %s for writing&quot;, argv[2]);</div><div class="t m0 x8a h57 y27ed ff1a fs2d fc0 sc0 ls0 ws0">if (fstat(fdin, &amp;sbuf) &lt; 0)<span class="_ _176"> </span>/* need size of input file */</div><div class="t m0 x9d h57 y24c8 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;fstat error&quot;);</div><div class="t m0 x8a h57 y40a4 ff1a fs2d fc0 sc0 ls0 ws0">if (ftruncate(fdout, sbuf.st_size) &lt; 0) /* set output file size */</div><div class="t m0 x9d h57 y24c9 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;ftruncate error&quot;);</div><div class="t m0 x8a h57 y40a5 ff1a fs2d fc0 sc0 ls0 ws0">while (fsz &lt; sbuf.st_size) {</div><div class="t m0 x9d h57 y24cb ff1a fs2d fc0 sc0 ls0 ws0">if ((sbuf.st_size - fsz) &gt; COPYINCR)</div><div class="t m0 x1f h57 y24cc ff1a fs2d fc0 sc0 ls0 ws0">copysz = COPYINCR;</div><div class="t m0 x9d h57 y40a6 ff1a fs2d fc0 sc0 ls0 ws0">else</div><div class="t m0 x1f h57 y40a7 ff1a fs2d fc0 sc0 ls0 ws0">copysz = sbuf.st_size - fsz;</div><div class="t m0 x9d h57 y24cf ff1a fs2d fc0 sc0 ls0 ws0">if ((src = mmap(0, copysz, PROT_READ, MAP_SHARED,</div><div class="t m0 x76 h57 y40a8 ff1a fs2d fc0 sc0 ls0 ws0">fdin, fsz)) == MAP_FAILED)</div><div class="t m0 x1f h57 y40a9 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;mmap error for input&quot;);</div><div class="t m0 x9d h57 y40aa ff1a fs2d fc0 sc0 ls0 ws0">if ((dst = mmap(0, copysz, PROT_READ | PROT_WRITE,</div><div class="t m0 x76 h57 y40ab ff1a fs2d fc0 sc0 ls0 ws0">MAP_SHARED, fdout, fsz)) == MAP_FAILED)</div><div class="t m0 x1f h57 y40ac ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;mmap error for output&quot;);</div><div class="t m0 x9d h57 y865 ff1a fs2d fc0 sc0 ls0 ws0">memcpy(dst, src, copysz);<span class="_ _68"> </span>/* does the file copy */</div><div class="t m0 x9d h57 y866 ff1a fs2d fc0 sc0 ls0 ws0">munmap(src, copysz);</div><div class="t m0 x9d h57 y2e9a ff1a fs2d fc0 sc0 ls0 ws0">munmap(dst, copysz);</div><div class="t m0 x9d h57 y2e9b ff1a fs2d fc0 sc0 ls0 ws0">fsz += copysz;</div><div class="t m0 x8a h57 y2e9c ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y2e9d ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y2e9e ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x108 h2d y1ce1 ff18 fs10 fc0 sc0 ls0 ws0">Figure 14.27<span class="_ _5a"> </span><span class="ff19">Copy a ﬁle using memory-mapped I/O</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
