<div id="pf20e" class="pf w4 h1f" data-page-no="20e"><div class="pc pc20e w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg20e.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">492<span class="_ _1b"> </span><span class="ff19">Advanced <span class="_"> </span>I/O<span class="_ _16b"> </span>Chapter <span class="_"> </span>14</span></div><div class="t m0 x35 h27 y12f ff16 fsf fc0 sc0 ls0 ws0">Implied Inheritance and Release of Locks</div><div class="t m0 x32 h2a yce9 ff19 fsf fc0 sc0 ls0 ws0">Three r<span class="_ _0"></span>ules govern the automatic inheritance and release of r<span class="_ _0"></span>ecor<span class="ls44">dl<span class="_ _4f"></span><span class="ls0">ocks.</span></span></div><div class="t m0 x32 h2a y3194 ff19 fsf fc0 sc0 ls0 ws0">1. <span class="_ _51"> </span>Locks<span class="_"> </span>ar<span class="lsa6f">ea<span class="_ _d"></span><span class="ls0">ssociated with a process and a ﬁle.<span class="_ _59"> </span>This has two implications.<span class="_ _46"> </span>The ﬁrst is</span></span></div><div class="t m0 x150 h2a y284b ff19 fsf fc0 sc0 ls0 ws0">obvious: when a <span class="_ _2"></span>process terminates, all its <span class="_ _2"></span>locks ar<span class="lsff2">er<span class="_ _4f"></span><span class="ls0">eleased. <span class="_"> </span>The<span class="_ _66"> </span>second <span class="_ _2"></span>is far from</span></span></div><div class="t m0 x150 h2a y284c ff19 fsf fc0 sc0 ls0 ws0">obvious: <span class="_ _42"> </span>whenever <span class="_ _23"> </span>a <span class="_ _42"> </span>descriptor <span class="_ _42"> </span>is <span class="_ _42"> </span>closed, <span class="_ _23"> </span>any <span class="_ _42"> </span>locks <span class="_ _42"> </span>on <span class="_ _42"> </span>the <span class="_ _23"> </span>ﬁle <span class="_ _42"> </span>referenced <span class="_ _23"> </span>by <span class="_ _42"> </span>that</div><div class="t m0 x150 h2a y39a5 ff19 fsf fc0 sc0 ls0 ws0">descriptor for that process ar<span class="_ _0"></span><span class="ls44">er<span class="_ _4f"></span><span class="ls0">eleased. <span class="_"> </span>This<span class="_"> </span>means that if we make the calls</span></span></div><div class="t m0 x41 h57 y3c3e ff1a fs2d fc0 sc0 ls0 ws0">fd1 = open(pathname, ...);</div><div class="t m0 x41 h57 y3c3f ff1a fs2d fc0 sc0 ls0 ws0">read_lock(fd1, ...);</div><div class="t m0 x41 h57 y3c40 ff1a fs2d fc0 sc0 ls0 ws0">fd2 = dup(fd1);</div><div class="t m0 x41 h57 y3c41 ff1a fs2d fc0 sc0 ls0 ws0">close(fd2);</div><div class="t m0 x150 h26 y3c42 ff19 fsf fc0 sc0 ls0 ws0">after <span class="_ _42"> </span>the<span class="_ _44"> </span><span class="ff1a">close(fd2)</span><span class="lsff3">,t<span class="_ _43"></span><span class="ls0">he <span class="_ _23"> </span>lock <span class="_ _53"> </span>that <span class="_ _42"> </span>was <span class="_ _42"> </span>obtained <span class="_ _42"> </span>on<span class="_ _44"> </span><span class="ff1a">fd1<span class="_ _44"> </span></span>is <span class="_ _53"> </span>released. <span class="_ _35"> </span>The<span class="_ _44"> </span>same</span></span></div><div class="t m0 x150 h26 y3c43 ff19 fsf fc0 sc0 ls0 ws0">thing would happen if we replaced the<span class="_"> </span><span class="ff1a">dup<span class="_ _80"> </span></span>with<span class="_"> </span><span class="ff1a">open</span>,<span class="_"> </span>as<span class="_"> </span>in</div><div class="t m0 x41 h57 y3c44 ff1a fs2d fc0 sc0 ls0 ws0">fd1 = open(pathname, ...);</div><div class="t m0 x41 h57 y3c45 ff1a fs2d fc0 sc0 ls0 ws0">read_lock(fd1, ...);</div><div class="t m0 x41 h57 y3c46 ff1a fs2d fc0 sc0 ls0 ws0">fd2 = open(pathname, ...)</div><div class="t m0 x41 h57 y3c47 ff1a fs2d fc0 sc0 ls0 ws0">close(fd2);</div><div class="t m0 x150 h2a y3c48 ff19 fsf fc0 sc0 ls0 ws0">to open the same ﬁle on another descriptor<span class="_ _6"></span>.</div><div class="t m0 x32 h26 y3c49 ff19 fsf fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>Locks<span class="_ _45"> </span>ar<span class="lsff4">en<span class="_ _b"></span><span class="ls0">ever <span class="_ _9"></span>inherited <span class="_ _9"></span>by <span class="_ _9"></span>the <span class="_ _9"></span>child <span class="_ _23"></span>across <span class="_ _3"></span>a<span class="_ _45"> </span><span class="ff1a">fork</span><span class="lsff5">.T<span class="_ _62"></span><span class="ls0">his <span class="_ _9"></span>means <span class="_ _23"></span>that <span class="_ _9"></span>if <span class="_ _9"></span>a <span class="_ _9"></span>process</span></span></span></span></div><div class="t m0 x150 h26 y3c4a ff19 fsf fc0 sc0 ls0 ws0">obtains <span class="_ _53"> </span>a <span class="_ _53"> </span>lock <span class="_ _53"> </span>and <span class="_ _53"> </span>then <span class="_ _53"> </span>calls<span class="_ _4b"> </span><span class="ff1a">fork</span><span class="lsff6">,t<span class="_ _c"></span><span class="ls0">he <span class="_ _53"> </span>child <span class="_ _53"> </span>is <span class="_ _53"> </span>considered <span class="_ _53"> </span>another <span class="_ _53"> </span>process <span class="_ _42"> </span>with</span></span></div><div class="t m0 x150 h26 ya4d ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">gard<span class="_ _45"> </span>to<span class="_ _45"> </span>the <span class="_ _9"></span>lock <span class="_ _9"></span>that <span class="_ _9"></span>was <span class="_ _23"></span>obtained <span class="_ _9"></span>by <span class="_ _9"></span>the <span class="_ _9"></span>parent. <span class="_ _45"> </span>The<span class="_ _45"> </span>child <span class="_ _9"></span>has <span class="_ _9"></span>to <span class="_ _23"></span>call<span class="_ _45"> </span><span class="ff1a">fcntl<span class="_ _45"> </span></span>to</span></div><div class="t m0 x150 h26 y3c4b ff19 fsf fc0 sc0 ls0 ws0">obtain <span class="_ _23"></span>its <span class="_ _23"></span>own <span class="_ _9"></span>locks <span class="_ _23"> </span>on <span class="_ _23"> </span>any <span class="_ _23"> </span>descriptors <span class="_ _23"></span>that <span class="_ _23"></span>wer<span class="ls866">ei<span class="_ _43"></span><span class="ls0">nherited <span class="_ _23"></span>across <span class="_ _9"></span>the<span class="_ _35"> </span><span class="ff1a">fork</span><span class="lsff7">.T<span class="_ _26"></span><span class="ls0">his</span></span></span></span></div><div class="t m0 x150 h2a y3c4c ff19 fsf fc0 sc0 ls0 ws0">constraint <span class="_ _3"></span>makes <span class="_ _3"></span>sense <span class="_ _9"></span>because <span class="_ _3"></span>locks <span class="_ _9"></span>ar<span class="lsff8">em<span class="_ _b"></span><span class="ls0">eant <span class="_ _3"></span>to <span class="_ _9"></span>prevent <span class="_ _2"></span>multiple <span class="_ _9"></span>processes <span class="_ _2"></span>from</span></span></div><div class="t m0 x150 h26 y3c4d ff19 fsf fc0 sc0 ls0 ws0">writing <span class="_ _2"></span>to <span class="_ _3"></span>the <span class="_ _3"></span>same <span class="_ _3"></span>ﬁle <span class="_ _2"></span>at <span class="_ _3"></span>the <span class="_ _3"></span>same <span class="_ _3"></span>time.<span class="_ _61"> </span>If <span class="_ _3"></span>the <span class="_ _3"></span>child <span class="_ _3"></span>inherited <span class="_ _3"></span>locks <span class="_ _2"></span>across <span class="_ _2"></span>a<span class="_ _47"> </span><span class="ff1a">fork</span>,</div><div class="t m0 x150 h2a y3c4e ff19 fsf fc0 sc0 ls0 ws0">both the parent and the child could write to the same ﬁle at the same time.</div><div class="t m0 x32 h26 y3a8e ff19 fsf fc0 sc0 ls0 ws0">3. <span class="_ _51"> </span>Locks<span class="_ _35"> </span>ar<span class="_ _0"></span><span class="ls3cd">ei<span class="_ _b"></span><span class="ls0">nherited <span class="_ _9"></span>by <span class="_ _23"></span>a <span class="_ _23"></span>new <span class="_ _23"></span>pr<span class="_ _0"></span>ogram <span class="_ _23"></span>across <span class="_ _9"></span>an<span class="_ _35"> </span><span class="ff1a">exec</span><span class="lsff9">.N<span class="_ _7"></span><span class="ls0">ote, <span class="_ _23"> </span>however<span class="_ _1"></span><span class="lsffa">,t<span class="_ _b"></span><span class="ls0">hat <span class="_ _9"></span>if <span class="_ _23"></span>the</span></span></span></span></span></span></div><div class="t m0 x150 h2a y3a8f ff19 fsf fc0 sc0 ls0 ws0">close-on-exec <span class="_ _53"> </span>ﬂag <span class="_"> </span>is <span class="_ _42"> </span>set <span class="_"> </span>for <span class="_ _53"> </span>a <span class="_ _53"> </span>ﬁle <span class="_"> </span>descriptor<span class="_ _6"></span><span class="lsffb">,a<span class="_ _55"></span><span class="ls0">ll <span class="_ _e"> </span>locks <span class="_ _53"> </span>for <span class="_"> </span>the <span class="_ _53"> </span>underlying <span class="_ _53"> </span>ﬁle <span class="_"> </span>ar<span class="_ _1"></span>e</span></span></div><div class="t m0 x150 h26 y3c4f ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">leased when the descriptor is closed as part of an<span class="_"> </span><span class="ff1a">exec</span>.</span></div><div class="t m0 x35 h27 y3c50 ff16 fsf fc0 sc0 ls0 ws0">FreeBSD Implementation</div><div class="t m0 x32 h2a y3c51 ff19 fsf fc0 sc0 ls0 ws0">Let’s <span class="_ _3"></span>take <span class="_ _3"></span>a <span class="_ _3"></span>brief <span class="_ _9"></span>look <span class="_ _3"></span>at <span class="_ _3"></span>the <span class="_ _3"></span>data <span class="_ _9"></span>structur<span class="_ _0"></span>es <span class="_ _3"></span>used <span class="_ _3"></span>in <span class="_ _3"></span>the <span class="_ _9"></span>FreeBSD <span class="_ _2"></span>implementation.<span class="_ _16"> </span>This</div><div class="t m0 x32 h2a y3c52 ff19 fsf fc0 sc0 ls0 ws0">should <span class="_ _23"></span>help <span class="_ _23"></span>clarify <span class="_ _23"></span>rule <span class="_ _9"></span>1, <span class="_ _23"> </span>which <span class="_ _23"> </span>states <span class="_ _23"> </span>that <span class="_ _23"> </span>locks <span class="_ _23"> </span>ar<span class="lsed3">ea<span class="_ _b"></span><span class="ls0">ssociated <span class="_ _9"></span>with <span class="_ _23"> </span>a <span class="_ _23"> </span>process <span class="_ _23"></span>and <span class="_ _23"></span>a</span></span></div><div class="t m0 x32 h2a y3c53 ff19 fsf fc0 sc0 ls0 ws0">ﬁle.</div><div class="t m0 x3f h2a y3c54 ff19 fsf fc0 sc0 ls0 ws0">Consider a process that executes the following statements (ignoring err<span class="_ _0"></span>or r<span class="_ _0"></span>eturns):</div><div class="t m0 x3f h57 y3c55 ff1a fs2d fc0 sc0 ls0 ws0">fd1 = open(pathname, ...);</div><div class="t m0 x3f h57 y3c56 ff1a fs2d fc0 sc0 ls0 ws0">write_lock(fd1, 0, SEEK_SET, 1);<span class="_ _15"> </span>/* parent write locks byte 0 */</div><div class="t m0 x3f h57 y3c57 ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &gt; 0) {<span class="_ _bd"> </span>/* parent */</div><div class="t m0 xc2 h57 y3c58 ff1a fs2d fc0 sc0 ls0 ws0">fd2 = dup(fd1);</div><div class="t m0 xc2 h57 y3c59 ff1a fs2d fc0 sc0 ls0 ws0">fd3 = open(pathname, ...);</div><div class="t m0 x3f h57 y3c5a ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid == 0) {</span></div><div class="t m0 xc2 h57 y3c5b ff1a fs2d fc0 sc0 ls0 ws0">read_lock(fd1, 1, SEEK_SET, 1); /* child read locks byte 1 */</div><div class="t m0 x3f h57 y3c5c ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x3f h57 y3c5d ff1a fs2d fc0 sc0 ls0 ws0">pause();</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
