<div id="pf28d" class="pf w4 h1f" data-page-no="28d"><div class="pc pc28d w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg28d.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>16.5<span class="_ _2db"> </span>Data <span class="_"> </span>T<span class="_ _6"></span>ransfer<span class="_ _1b"> </span><span class="ff18">619</span></div><div class="t m0 x8a h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">hint.ai_addr = NULL;</div><div class="t m0 x8a h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">hint.ai_next = NULL;</div><div class="t m0 x8a h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">if ((err = getaddrinfo(host, &quot;ruptime&quot;, &amp;hint, &amp;ailist)) != 0) {</div><div class="t m0 x9d h57 y801 ff1a fs2d fc0 sc0 ls0 ws0">syslog(LOG_ERR, &quot;ruptimed: getaddrinfo error: %s&quot;,</div><div class="t m0 x76 h57 y802 ff1a fs2d fc0 sc0 ls0 ws0">gai_strerror(err));</div><div class="t m0 x9d h57 y803 ff1a fs2d fc0 sc0 ls0 ws0">exit(1);</div><div class="t m0 x8a h57 y804 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y805 ff1a fs2d fc0 sc0 ls0 ws0">for (aip = ailist; aip != NULL; aip = aip-&gt;ai_next) {</div><div class="t m0 x9d h57 y806 ff1a fs2d fc0 sc0 ls0 ws0">if ((sockfd = initserver(SOCK_STREAM, aip-&gt;ai_addr,</div><div class="t m0 x76 h57 y807 ff1a fs2d fc0 sc0 ls0 ws0">aip-&gt;ai_addrlen, QLEN)) &gt;= 0) {</div><div class="t m0 x1f h57 y808 ff1a fs2d fc0 sc0 ls0 ws0">serve(sockfd);</div><div class="t m0 x1f h57 y809 ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x9d h57 y80a ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y80b ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y80c ff1a fs2d fc0 sc0 ls0 ws0">exit(1);</div><div class="t m0 x32 h57 y80d ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x227 h2d y4a0a ff18 fs10 fc0 sc0 ls0 ws0">Figure 16.18<span class="_ _5a"> </span><span class="ff19">Server program illustrating command writing directly to socket</span></div><div class="t m0 x32 h4d y4a0b ff19 fs26 fc0 sc0 ls0 ws0">Instead <span class="_ _3"></span>of <span class="_ _9"></span>using<span class="_ _45"> </span><span class="ff1a">popen<span class="_ _47"> </span></span>to <span class="_ _9"></span>run <span class="_ _3"></span>the<span class="_ _45"> </span><span class="ff1a">uptime<span class="_ _47"> </span></span>command <span class="_ _9"></span>and <span class="_ _9"></span>reading <span class="_ _3"></span>the <span class="_ _3"></span>output <span class="_ _9"></span>from <span class="_ _3"></span>the</div><div class="t m0 x32 h4d y4a0c ff19 fs26 fc0 sc0 ls0 ws0">pipe <span class="_"> </span>connected <span class="_"> </span>to <span class="_"> </span>the <span class="_"> </span>command’s <span class="_"> </span>standar<span class="ls136f">do<span class="_ _5b"></span><span class="ls0">utput, <span class="_"> </span>we <span class="_"> </span>use<span class="_ _46"> </span><span class="ff1a">fork<span class="_ _46"> </span></span>to <span class="_"> </span>create <span class="_"> </span>a <span class="_"> </span>child</span></span></div><div class="t m0 x32 h4d y4a0d ff19 fs26 fc0 sc0 ls0 ws0">process and then use<span class="_"> </span><span class="ff1a">dup2<span class="_ _80"> </span></span>to arrange that the child’s <span class="_ _2"></span>copy of<span class="_"> </span><span class="ff1a">STDIN_FILENO<span class="_ _80"> </span></span>is <span class="_ _2"></span>open to</div><div class="t m0 x32 h4d y4a0e ff1a fs26 fc0 sc0 ls0 ws0">/dev/null<span class="_ _46"> </span><span class="ff19">and <span class="_"> </span>that <span class="_"> </span>both<span class="_ _46"> </span></span>STDOUT_FILENO<span class="_ _46"> </span><span class="ff19">and<span class="_ _46"> </span></span>STDERR_FILENO<span class="_ _46"> </span><span class="ff19">ar<span class="ls1370">eo<span class="_ _5b"></span><span class="ls0">pen <span class="_"> </span>to <span class="_ _66"> </span>the</span></span></span></div><div class="t m0 x32 h4d y4a0f ff19 fs26 fc0 sc0 ls0 ws0">socket <span class="_"> </span>endpoint.<span class="_ _65"> </span>When <span class="_"> </span>we <span class="_"> </span>execute<span class="_ _4b"> </span><span class="ff1a">uptime</span><span class="ls1371">,t<span class="_ _55"></span><span class="ls0">he <span class="_"> </span>command <span class="_ _e"> </span>writes <span class="_"> </span>the <span class="_ _e"> </span>results <span class="_ _e"> </span>to <span class="_"> </span>its</span></span></div><div class="t m0 x32 h49 y4a10 ff19 fs26 fc0 sc0 ls0 ws0">standar<span class="ls1372">do<span class="_ _55"></span><span class="ls0">utput, <span class="_ _53"> </span>which <span class="_ _e"> </span>is <span class="_ _e"> </span>connected <span class="_ _53"> </span>to <span class="_ _e"> </span>the <span class="_ _e"> </span>socket, <span class="_ _e"> </span>and <span class="_ _53"> </span>the <span class="_ _e"> </span>data <span class="_ _e"> </span>is <span class="_ _53"> </span>sent <span class="_ _e"> </span>back <span class="_ _e"> </span>to <span class="_ _e"> </span>the</span></span></div><div class="t m0 x32 h4d y4a11 ff1a fs26 fc0 sc0 ls0 ws0">ruptime<span class="_ _80"> </span><span class="ff19">client command.</span></div><div class="t m0 x3f h49 y4a12 ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _23"></span>parent <span class="_ _9"></span>can <span class="_ _23"> </span>safely <span class="_ _23"> </span>close <span class="_ _23"> </span>the <span class="_ _23"> </span>ﬁle <span class="_ _23"> </span>descriptor <span class="_ _23"> </span>connected <span class="_ _23"> </span>to <span class="_ _23"> </span>the <span class="_ _23"> </span>client, <span class="_ _23"> </span>because <span class="_ _23"> </span>the</div><div class="t m0 x32 h49 y4a13 ff19 fs26 fc0 sc0 ls0 ws0">child <span class="_ _3"></span>still <span class="_ _3"></span>has <span class="_ _3"></span>it <span class="_ _9"></span>open.<span class="_ _16"> </span>The <span class="_ _3"></span>parent <span class="_ _3"></span>waits <span class="_ _3"></span>for <span class="_ _3"></span>the <span class="_ _9"></span>child <span class="_ _3"></span>to <span class="_ _3"></span>complete <span class="_ _3"></span>befor<span class="ls1373">ep<span class="_ _8"></span><span class="lscc">ro<span class="ls0">ceeding, <span class="_ _9"></span>so</span></span></span></div><div class="t m0 x32 h49 y4a14 ff19 fs26 fc0 sc0 ls0 ws0">that <span class="_ _53"> </span>the <span class="_ _53"> </span>child <span class="_ _53"> </span>doesn’t <span class="_ _53"> </span>become <span class="_ _53"> </span>a <span class="_ _53"> </span>zombie.<span class="_ _65"> </span>Since <span class="_ _53"> </span>it <span class="_ _e"> </span>shouldn’t <span class="_ _53"> </span>take <span class="_ _53"> </span>too <span class="_ _53"> </span>long <span class="_ _53"> </span>to <span class="_ _53"> </span>run <span class="_ _53"> </span>the</div><div class="t m0 x32 h4d y4a15 ff1a fs26 fc0 sc0 ls0 ws0">uptime<span class="_ _45"> </span><span class="ff19">command, <span class="_ _23"> </span>the <span class="_ _23"></span>parent <span class="_ _9"></span>can <span class="_ _23"> </span>affor<span class="_ _0"></span>d<span class="_ _45"> </span>to<span class="_ _35"> </span>wait <span class="_ _23"></span>for <span class="_ _9"></span>the <span class="_ _23"> </span>child <span class="_ _23"> </span>to <span class="_ _23"></span>exit <span class="_ _23"></span>befor<span class="_ _0"></span><span class="ls1374">ea<span class="_ _b"></span><span class="ls0">ccepting</span></span></span></div><div class="t m0 x32 h49 y4a16 ff19 fs26 fc0 sc0 ls0 ws0">the next connect request. <span class="_"> </span>This<span class="_"> </span>strategy might not be appr<span class="_ _0"></span>opriate if the child takes a long</div><div class="t m0 x32 h49 y4a17 ff19 fs26 fc0 sc0 ls0 ws0">time, however<span class="_ _6"></span>.</div><div class="t m0 x3f h55 y4a18 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _e"> </span>previous <span class="_ _e"> </span>examples <span class="_"> </span>have <span class="_ _53"> </span>used <span class="_"> </span>connection-oriented <span class="_ _53"> </span>sockets.<span class="_ _60"> </span>But <span class="_ _e"> </span>how <span class="_"> </span>do <span class="_ _53"> </span>we</div><div class="t m0 x32 h55 y4a19 ff19 fs2c fc0 sc0 ls0 ws0">choose <span class="_ _2"></span>the <span class="_ _3"></span>appropriate <span class="_ _2"></span>type?<span class="_ _16"> </span>When <span class="_ _2"></span>do <span class="_ _3"></span>we <span class="_ _3"></span>use <span class="_ _2"></span>a <span class="_ _3"></span>connection-oriented <span class="_ _3"></span>socket, <span class="_ _2"></span>and <span class="_ _3"></span>when</div><div class="t m0 x32 h55 y4a1a ff19 fs2c fc0 sc0 ls0 ws0">do <span class="_ _3"></span>we <span class="_ _9"></span>use <span class="_ _3"></span>a <span class="_ _9"></span>connectionless <span class="_ _3"></span>socket?<span class="_ _5a"> </span>The <span class="_ _3"></span>answer <span class="_ _3"></span>depends <span class="_ _9"></span>on <span class="_ _3"></span>how <span class="_ _9"></span>much <span class="_ _3"></span>work <span class="_ _9"></span>we <span class="_ _3"></span>want</div><div class="t m0 x32 h55 y4a1b ff19 fs2c fc0 sc0 ls0 ws0">to do and how much tolerance we have for errors.</div><div class="t m0 x3f h55 y4a1c ff19 fs2c fc0 sc0 ls6a4 ws0">Wi<span class="_ _3"></span><span class="ls0">th a connectionless socket, packets <span class="_ _2"></span>can arrive out of order<span class="_ _6"></span>,<span class="_"> </span>so<span class="_ _66"> </span>if<span class="_"> </span>w<span class="ls1375">ec<span class="_ _5"></span><span class="ls0">an’t ﬁt all our</span></span></span></div><div class="t m0 x32 h55 y4a1d ff19 fs2c fc0 sc0 ls0 ws0">data <span class="_"> </span>in <span class="_ _e"> </span>one <span class="_"> </span>packet, <span class="_ _e"> </span>we <span class="_"> </span>will <span class="_"> </span>have <span class="_ _e"> </span>to <span class="_"> </span>worry <span class="_ _e"> </span>about <span class="_"> </span>ordering <span class="_ _e"> </span>in <span class="_"> </span>our <span class="_ _e"> </span>application.<span class="_ _60"> </span>The</div><div class="t m0 x32 h55 y4a1e ff19 fs2c fc0 sc0 ls0 ws0">maximum <span class="_ _23"> </span>packet <span class="_ _42"> </span>size <span class="_ _23"></span>is <span class="_ _23"> </span>a <span class="_ _42"> </span>characteristic <span class="_ _23"> </span>of <span class="_ _23"> </span>the <span class="_ _42"> </span>communication <span class="_ _23"> </span>protocol. <span class="_ _35"> </span>Also,<span class="_ _35"> </span>with <span class="_ _23"> </span>a</div><div class="t m0 x32 h55 y4a1f ff19 fs2c fc0 sc0 ls0 ws0">connectionless <span class="_ _3"></span>socket, <span class="_ _3"></span>the <span class="_ _3"></span>packets <span class="_ _3"></span>can <span class="_ _3"></span>be <span class="_ _3"></span>lost.<span class="_ _16"> </span>If <span class="_ _3"></span>our <span class="_ _3"></span>application <span class="_ _3"></span>can’t <span class="_ _3"></span>tolerate <span class="_ _3"></span>this <span class="_ _3"></span>loss,</div><div class="t m0 x32 h55 y4a20 ff19 fs2c fc0 sc0 ls0 ws0">we should use connection-oriented sockets.</div><div class="t m0 x3f h55 y4a21 ff19 fs2c fc0 sc0 ls155 ws0">To<span class="_ _9"></span><span class="ls0">lerating packet loss means that <span class="_ _2"></span>we have two choices.<span class="_ _46"> </span>If we intend to <span class="_ _2"></span>have reliable</span></div><div class="t m0 x32 h55 y4a22 ff19 fs2c fc0 sc0 ls0 ws0">communication <span class="_ _61"> </span>with <span class="_ _16"> </span>our <span class="_ _61"> </span>peer<span class="_ _1"></span>,<span class="_ _50"> </span>we<span class="_ _5f"> </span>have <span class="_ _16"> </span>to <span class="_ _61"> </span>number <span class="_ _16"> </span>our <span class="_ _61"> </span>packets <span class="_ _16"> </span>and <span class="_ _16"> </span>request</div><div class="t m0 x32 h55 y4a23 ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">transmission <span class="_ _53"> </span>from <span class="_ _42"> </span>the <span class="_ _53"> </span>peer <span class="_ _42"> </span>application <span class="_ _53"> </span>when <span class="_ _53"> </span>we <span class="_ _42"> </span>detect <span class="_ _53"> </span>a <span class="_ _53"> </span>missing <span class="_ _42"> </span>packet.<span class="_ _65"> </span><span class="ls155">We <span class="_ _45"> </span>a<span class="_ _23"></span></span>lso</span></div><div class="t m0 x32 h55 y4a24 ff19 fs2c fc0 sc0 ls0 ws0">have <span class="_ _23"></span>to <span class="_ _23"></span>identify <span class="_ _9"></span>duplicate <span class="_ _23"> </span>packets <span class="_ _23"> </span>and <span class="_ _23"> </span>discar<span class="ls1376">dt<span class="_ _43"></span><span class="ls0">hem, <span class="_ _23"> </span>since <span class="_ _23"> </span>a <span class="_ _23"> </span>packet <span class="_ _23"></span>might <span class="_ _23"></span>be <span class="_ _23"></span>delayed</span></span></div><div class="t m0 x32 h55 y4a25 ff19 fs2c fc0 sc0 ls0 ws0">and appear to be lost, but show up after we have requested r<span class="_ _0"></span>etransmission.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
