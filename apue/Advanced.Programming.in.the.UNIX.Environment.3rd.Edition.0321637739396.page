<div id="pf18c" class="pf w4 h1f" data-page-no="18c"><div class="pc pc18c w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg18c.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">362<span class="_ _1b"> </span><span class="ff19">Signals <span class="_ _24b"> </span>Chapter<span class="_ _21"> </span>10</span></div><div class="t m0 x9d h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;signal(SIGQUIT) error&quot;);</div><div class="t m0 x8a h57 y1334 ff1a fs2d fc0 sc0 ls0 ws0">sigemptyset(&amp;zeromask);</div><div class="t m0 x8a h57 y1307 ff1a fs2d fc0 sc0 ls0 ws0">sigemptyset(&amp;newmask);</div><div class="t m0 x8a h57 y1308 ff1a fs2d fc0 sc0 ls0 ws0">sigaddset(&amp;newmask, SIGQUIT);</div><div class="t m0 x8a h57 y1309 ff1a fs2d fc0 sc0 ls0 ws0">/*</div><div class="t m0 x214 h57 y130a ff1a fs2d fc0 sc0 ls15c ws0">*B<span class="_ _1d"></span><span class="ls0">lock SIGQUIT and save current signal mask.</span></div><div class="t m0 x214 h57 y130b ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x8a h57 y130c ff1a fs2d fc0 sc0 ls0 ws0">if (sigprocmask(SIG_BLOCK, &amp;newmask, &amp;oldmask) &lt; 0)</div><div class="t m0 x9d h57 y130d ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;SIG_BLOCK error&quot;);</div><div class="t m0 x8a h57 y2e71 ff1a fs2d fc0 sc0 ls0 ws0">while (quitflag == 0)</div><div class="t m0 x9d h57 y2e72 ff1a fs2d fc0 sc0 ls0 ws0">sigsuspend(&amp;zeromask);</div><div class="t m0 x8a h57 y2e73 ff1a fs2d fc0 sc0 ls0 ws0">/*</div><div class="t m0 x214 h57 y2e74 ff1a fs2d fc0 sc0 ls15c ws0">*S<span class="_ _1d"></span><span class="ls0">IGQUIT has been caught and is now blocked; do whatever.</span></div><div class="t m0 x214 h57 y2e75 ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x8a h57 y2e76 ff1a fs2d fc0 sc0 ls0 ws0">quitflag = 0;</div><div class="t m0 x8a h57 y2e77 ff1a fs2d fc0 sc0 ls0 ws0">/*</div><div class="t m0 x214 h57 y2e78 ff1a fs2d fc0 sc0 ls15c ws0">*R<span class="_ _1d"></span><span class="ls0">eset signal mask which unblocks SIGQUIT.</span></div><div class="t m0 x214 h57 y2e79 ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x8a h57 y2e7a ff1a fs2d fc0 sc0 ls0 ws0">if (sigprocmask(SIG_SETMASK, &amp;oldmask, NULL) &lt; 0)</div><div class="t m0 x9d h57 y2e7b ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;SIG_SETMASK error&quot;);</div><div class="t m0 x8a h57 y2e7c ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y2e7d ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x54 h5e y2e7e ff18 fs10 fc0 sc0 ls0 ws0">Figure 10.23<span class="_ _5a"> </span><span class="ff19">Using<span class="_"> </span><span class="ff1a">sigsuspend<span class="_ _e"> </span></span>to wait for a global variable to be set</span></div><div class="t m0 x32 h49 y2e7f ff19 fs26 fc0 sc0 ls0 ws0">Sample output from this pr<span class="_ _0"></span>ogram is</div><div class="t m0 x3f h4e y2e80 ff1a fs28 fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x3f h4e y2e81 ff1f fs28 fc0 sc0 ls0 ws0">ˆC<span class="_ _cb"> </span><span class="ff1b">type the interrupt character</span></div><div class="t m0 x3f h4e y2e82 ff1a fs28 fc0 sc0 ls0 ws0">interrupt</div><div class="t m0 x3f h4e y2e83 ff1f fs28 fc0 sc0 ls0 ws0">ˆC<span class="_ _cb"> </span><span class="ff1b">type the interrupt character again</span></div><div class="t m0 x3f h4e y2e84 ff1a fs28 fc0 sc0 ls0 ws0">interrupt</div><div class="t m0 x3f h4e y2e85 ff1f fs28 fc0 sc0 ls0 ws0">ˆC<span class="_ _cb"> </span><span class="ff1b">and again</span></div><div class="t m0 x3f h4e y2e86 ff1a fs28 fc0 sc0 ls0 ws0">interrupt</div><div class="t m0 x3f h4e y2e87 ff1f fs28 fc0 sc0 ls0 ws0">ˆ\<span class="_"> </span><span class="ff1a">$<span class="_ _1e7"> </span><span class="ff1b">now terminate with the quit character</span></span></div><div class="t m0 x76 h2e y2e88 ff19 fs11 fc0 sc0 ls0 ws0">For portability <span class="_ _2"></span>between <span class="_ _2"></span>non-POSIX systems <span class="_ _2"></span>that <span class="_ _2"></span>support ISO <span class="_ _2"></span>C <span class="_ _2"></span>and POSIX.1 <span class="_ _2"></span>systems, <span class="_ _2"></span>the only</div><div class="t m0 x76 h2e y2e89 ff19 fs11 fc0 sc0 ls0 ws0">thing <span class="_ _47"> </span>we <span class="_ _45"> </span>should <span class="_ _45"> </span>do <span class="_ _47"> </span>within <span class="_ _45"> </span>a <span class="_ _47"> </span>signal <span class="_ _45"> </span>handler <span class="_ _47"> </span>is <span class="_ _45"> </span>assign <span class="_ _47"> </span>a <span class="_ _45"> </span>value <span class="_ _47"> </span>to <span class="_ _45"> </span>a <span class="_ _45"> </span>variable <span class="_ _47"> </span>of <span class="_ _45"> </span>type</div><div class="t m0 x76 h4f y2e8a ff1a fs11 fc0 sc0 ls0 ws0">sig_atomic_t<span class="_ _3"></span><span class="ff19 lsce6">—n<span class="_ _1"></span><span class="ls0">othing <span class="_ _3"></span>else.<span class="_ _4b"> </span>POSIX.1 <span class="_ _3"></span>goes <span class="_ _9"></span>further <span class="_ _3"></span>and <span class="_ _3"></span>speciﬁes <span class="_ _3"></span>a <span class="_ _3"></span>list <span class="_ _3"></span>of <span class="_ _3"></span>functions <span class="_ _3"></span>that <span class="_ _3"></span>are</span></span></div><div class="t m0 x76 h2e y2e8b ff19 fs11 fc0 sc0 ls0 ws0">safe <span class="_ _2"></span>to <span class="_ _2"></span>call <span class="_ _3"></span>from <span class="_ _2"></span>within <span class="_ _2"></span>a <span class="_ _3"></span>signal <span class="_ _2"></span>handler <span class="_ _3"></span>(Figur<span class="lsce7">e1<span class="_ _d"></span><span class="ls0">0.4), <span class="_ _2"></span>but <span class="_ _3"></span>if <span class="_ _2"></span>we <span class="_ _3"></span>do <span class="_ _2"></span>this, <span class="_ _3"></span>our <span class="_ _2"></span>code <span class="_ _3"></span>may <span class="_ _2"></span>not <span class="_ _3"></span>run</span></span></div><div class="t m0 x76 h2e y2e8c ff19 fs11 fc0 sc0 ls0 ws0">correctly on non-POSIX systems.</div><div class="t m0 x35 h61 y2e8d ff16 fs2c fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h55 y2e8e ff19 fs2c fc0 sc0 ls0 ws0">As <span class="_ _53"> </span>another <span class="_ _e"> </span>example <span class="_ _e"> </span>of <span class="_ _e"> </span>signals, <span class="_ _53"> </span>we <span class="_ _e"> </span>show <span class="_ _e"> </span>how <span class="_ _e"> </span>signals <span class="_ _e"> </span>can <span class="_ _53"> </span>be <span class="_ _e"> </span>used <span class="_ _e"> </span>to <span class="_ _e"> </span>synchronize <span class="_ _53"> </span>a</div><div class="t m0 x32 h54 y2e8f ff19 fs2c fc0 sc0 ls0 ws0">parent and <span class="_ _2"></span>child.<span class="_ _16"> </span>Figur<span class="lsce8">e1<span class="_ _8"></span><span class="ls0">0.24 <span class="_ _2"></span>shows <span class="_ _3"></span>implementations <span class="_ _2"></span>of <span class="_ _2"></span>the <span class="_ _2"></span>ﬁve <span class="_ _3"></span>routines<span class="_"> </span><span class="ff1a">TELL_WAIT</span>,</span></span></div><div class="t m0 x32 h54 y2e90 ff1a fs2c fc0 sc0 ls0 ws0">TELL_PARENT<span class="ff19">,<span class="_"> </span></span>TELL_CHILD<span class="ff19">,<span class="_"> </span></span>WAIT_PARENT<span class="ff19 ls142">,a<span class="_ _d"></span><span class="ls0">nd<span class="_"> </span><span class="ff1a">WAIT_CHILD<span class="_ _66"> </span></span>from Section 8.9.</span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
