<div id="pf195" class="pf w4 h1f" data-page-no="195"><div class="pc pc195 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg195.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h7a ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>10.18<span class="_ _27b"> </span><span class="ff1a">system<span class="_ _4b"> </span></span>Function<span class="_ _1b"> </span><span class="ff18">371</span></div><div class="t m0 x76 h52 y2a3 ff19 fs2a fc0 sc0 ls0 ws0">POSIX.1 states <span class="_ _2"></span>that <span class="_ _2"></span>if<span class="_ _80"> </span><span class="ff1a">wait<span class="_ _80"> </span></span>or<span class="_"> </span><span class="ff1a">waitpid<span class="_ _80"> </span></span><span class="ls34e">re<span class="_ _2"></span></span>turns <span class="_ _2"></span>the <span class="_ _2"></span>status of <span class="_ _2"></span>a <span class="_ _2"></span>child <span class="_ _2"></span>process <span class="_ _2"></span>while<span class="_ _e"> </span><span class="ff1a">SIGCHLD<span class="_ _80"> </span></span>is</div><div class="t m0 x76 h52 y2a4 ff19 fs2a fc0 sc0 ls0 ws0">pending, <span class="_ _23"> </span>then<span class="_ _47"> </span><span class="ff1a">SIGCHLD<span class="_ _45"> </span></span>should <span class="_ _9"> </span>not <span class="_ _23"> </span>be <span class="_ _23"> </span>delivered <span class="_ _23"> </span>to <span class="_ _9"> </span>the <span class="_ _23"> </span>process <span class="_ _23"> </span>unless <span class="_ _23"> </span>the <span class="_ _23"> </span>status <span class="_ _9"> </span>of <span class="_ _23"> </span>another</div><div class="t m0 x76 h51 y2a5 ff19 fs2a fc0 sc0 ls0 ws0">child process <span class="_ _2"></span>is also <span class="_ _2"></span>available.<span class="_ _4b"> </span>FreeBSD 8.0, Mac <span class="_ _2"></span>OS <span class="_ _2"></span>X <span class="_ _2"></span>10.6.8, <span class="_ _2"></span>and <span class="_ _2"></span>Solaris 10 <span class="_ _2"></span>all <span class="_ _2"></span>implement <span class="_ _2"></span>this</div><div class="t m0 x76 h52 y2a6 ff19 fs2a fc0 sc0 ls0 ws0">semantic. <span class="_ _46"> </span>Linux<span class="_ _46"> </span>3.2.0, <span class="_ _45"> </span>however<span class="_ _1"></span><span class="lsd18">,d<span class="_ _5b"></span><span class="ls0">oesn’t <span class="_ _4"></span>—<span class="_ _3"></span><span class="ff1a">SIGCHLD<span class="_ _61"> </span></span><span class="ls34e">re</span>mains <span class="_ _45"> </span>pending <span class="_ _47"> </span>after <span class="_ _47"> </span>the<span class="_ _61"> </span><span class="ff1a">system</span></span></span></div><div class="t m0 x76 h52 y2a7 ff19 fs2a fc0 sc0 ls0 ws0">function <span class="_ _2"></span>calls<span class="_ _e"> </span><span class="ff1a">waitpid</span><span class="ls444">;w<span class="_ _5"></span><span class="ls0">hen <span class="_ _3"></span>the <span class="_ _2"></span>signal <span class="_ _2"></span>is <span class="_ _2"></span>unblocked, <span class="_ _2"></span>it <span class="_ _2"></span>is <span class="_ _2"></span>delivered to <span class="_ _2"></span>the <span class="_ _3"></span>caller<span class="_ _1"></span><span class="lsd19">.I<span class="_ _c"></span><span class="ls0">f<span class="_ _80"> </span>we<span class="_ _e"> </span>called</span></span></span></span></div><div class="t m0 x76 h52 y2a8 ff1a fs2a fc0 sc0 ls0 ws0">wait<span class="_ _80"> </span><span class="ff19">in <span class="_ _3"></span>the<span class="_ _80"> </span></span>sig_chld<span class="_ _66"> </span><span class="ff19">function <span class="_ _3"></span>in <span class="_ _3"></span>Figur<span class="lsd1a">e1<span class="_ _4f"></span><span class="ls0">0.26, <span class="_ _3"></span>a <span class="_ _3"></span>Linux <span class="_ _3"></span>system <span class="_ _3"></span>would <span class="_ _3"></span>return<span class="_ _80"> </span><span class="ff20">−</span><span class="lsd1a">1w<span class="_ _d"></span><span class="ls0">ith<span class="_ _66"> </span><span class="ff1a">errno</span></span></span></span></span></span></div><div class="t m0 x76 h52 y2a9 ff19 fs2a fc0 sc0 ls0 ws0">set to<span class="_ _80"> </span><span class="ff1a">ECHILD</span><span class="lsd1b">,s<span class="_ _5"></span><span class="ls0">ince <span class="_ _2"></span>the<span class="_ _80"> </span><span class="ff1a">system<span class="_ _e"> </span></span>function <span class="_ _2"></span>already retrieved <span class="_ _2"></span>the termination <span class="_ _2"></span>status <span class="_ _2"></span>of <span class="_ _2"></span>the <span class="_ _2"></span>child.</span></span></div><div class="t m0 x3f h2a y2f8a ff19 fsf fc0 sc0 ls0 ws0">Many older texts show the ignoring of the interrupt and quit signals as follows:</div><div class="t m0 xc2 h57 y2f8b ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0) {</div><div class="t m0 x16e h57 y2f8c ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;fork error&quot;);</div><div class="t m0 xc2 h57 y2f8d ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid == 0) {</span></div><div class="t m0 x16e h57 y2f8e ff1a fs2d fc0 sc0 ls0 ws0">/* child */</div><div class="t m0 x16e h57 y2f8f ff1a fs2d fc0 sc0 ls0 ws0">execl(...);</div><div class="t m0 x16e h57 y2f90 ff1a fs2d fc0 sc0 ls0 ws0">_exit(127);</div><div class="t m0 xc2 h57 y2f91 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 xc2 h57 y2f92 ff1a fs2d fc0 sc0 ls0 ws0">/* parent */</div><div class="t m0 xc2 h57 y2f93 ff1a fs2d fc0 sc0 ls0 ws0">old_intr = signal(SIGINT, SIG_IGN);</div><div class="t m0 xc2 h57 y2f94 ff1a fs2d fc0 sc0 ls0 ws0">old_quit = signal(SIGQUIT, SIG_IGN);</div><div class="t m0 xc2 h57 y2f95 ff1a fs2d fc0 sc0 ls0 ws0">waitpid(pid, &amp;status, 0)</div><div class="t m0 xc2 h57 y2f96 ff1a fs2d fc0 sc0 ls0 ws0">signal(SIGINT, old_intr);</div><div class="t m0 xc2 h57 y2f97 ff1a fs2d fc0 sc0 ls0 ws0">signal(SIGQUIT, old_quit);</div><div class="t m0 x32 h26 y2f98 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _23"> </span>problem <span class="_ _23"></span>with <span class="_ _23"> </span>this <span class="_ _23"> </span>sequence <span class="_ _23"> </span>of <span class="_ _42"> </span>code <span class="_ _23"></span>is <span class="_ _23"> </span>that <span class="_ _23"> </span>we <span class="_ _42"> </span>have <span class="_ _23"></span>no <span class="_ _23"> </span>guarantee <span class="_ _23"> </span>after <span class="_ _42"> </span>the<span class="_ _35"> </span><span class="ff1a">fork</span></div><div class="t m0 x32 h2a y2f99 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">garding <span class="_ _9"></span>whether <span class="_ _23"> </span>the <span class="_ _23"></span>parent <span class="_ _9"></span>or <span class="_ _23"></span>child <span class="_ _9"></span>runs <span class="_ _23"></span>ﬁrst.<span class="_ _5a"> </span>If <span class="_ _23"> </span>the <span class="_ _23"></span>child <span class="_ _9"></span>runs <span class="_ _23"></span>ﬁrst <span class="_ _23"></span>and <span class="_ _9"></span>the <span class="_ _23"></span>parent</span></div><div class="t m0 x32 h2a y2f9a ff19 fsf fc0 sc0 ls0 ws0">doesn’t run for some time after<span class="_ _1"></span>,<span class="_"> </span>an<span class="_"> </span>interrupt signal might <span class="_ _2"></span>be generated befor<span class="lsd1c">et<span class="_ _4f"></span><span class="ls0">he <span class="_ _2"></span>parent</span></span></div><div class="t m0 x32 h2a y2f9b ff19 fsf fc0 sc0 ls0 ws0">is <span class="_ _53"> </span>able <span class="_"> </span>to <span class="_ _42"> </span>change <span class="_"> </span>its <span class="_ _53"> </span>disposition <span class="_ _53"> </span>to <span class="_"> </span>be <span class="_ _42"> </span>ignored. <span class="_ _4b"> </span>For<span class="_ _4b"> </span>this <span class="_"> </span>r<span class="_ _1"></span>eason, <span class="_ _e"> </span>in <span class="_ _e"> </span>Figur<span class="lsd1d">e1<span class="_ _55"></span><span class="ls0">0.28, <span class="_ _e"> </span>we</span></span></div><div class="t m0 x32 h26 y2f9c ff19 fsf fc0 sc0 ls0 ws0">change the disposition of the signals befor<span class="ls44">et<span class="_ _4f"></span><span class="ls0">he<span class="_"> </span><span class="ff1a">fork</span>.</span></span></div><div class="t m0 x3f h2a y2f9d ff19 fsf fc0 sc0 ls0 ws0">Note <span class="_ _9"></span>that <span class="_ _3"></span>we <span class="_ _9"></span>have <span class="_ _9"></span>to <span class="_ _9"></span>reset <span class="_ _3"></span>the <span class="_ _9"></span>dispositions <span class="_ _9"></span>of <span class="_ _9"></span>these <span class="_ _9"></span>two <span class="_ _9"></span>signals <span class="_ _9"></span>in <span class="_ _9"></span>the <span class="_ _3"></span>child <span class="_ _9"></span>before</div><div class="t m0 x32 h26 y2f9e ff19 fsf fc0 sc0 ls0 ws0">the <span class="_ _3"></span>call <span class="_ _3"></span>to<span class="_ _47"> </span><span class="ff1a">execl</span><span class="ls3e7">.T<span class="_ _1d"></span><span class="ls0">his <span class="_ _3"></span>allows<span class="_ _47"> </span><span class="ff1a">execl<span class="_ _47"> </span></span>to <span class="_ _3"></span>change <span class="_ _3"></span>their <span class="_ _3"></span>dispositions <span class="_ _9"></span>to <span class="_ _2"></span>the <span class="_ _3"></span>default, <span class="_ _3"></span>based</span></span></div><div class="t m0 x32 h2a y2f9f ff19 fsf fc0 sc0 ls0 ws0">on the caller<span class="_ _3"></span>’s dispositions, as we described in Section 8.10.</div><div class="t m0 x35 h4d y2fa0 ff16 fs26 fc0 sc0 ls0 ws0">Return V<span class="_ _1"></span>alue from<span class="_"> </span><span class="ff1f">system</span></div><div class="t m0 x32 h4d y2fa1 ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _2"></span>return <span class="_ _2"></span>value <span class="_ _3"></span>from<span class="_ _47"> </span><span class="ff1a">system<span class="_ _47"> </span></span>is <span class="_ _2"></span>the <span class="_ _3"></span>termination <span class="_ _3"></span>status <span class="_ _2"></span>of <span class="_ _3"></span>the <span class="_ _3"></span>shell, <span class="_ _3"></span>which <span class="_ _3"></span>isn’t <span class="_ _2"></span>always</div><div class="t m0 x32 h49 y2fa2 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _9"></span>termination <span class="_ _23"> </span>status <span class="_ _23"></span>of <span class="_ _9"></span>the <span class="_ _23"></span>command <span class="_ _23"></span>string.<span class="_ _5a"> </span><span class="ls164">We <span class="_ _47"> </span>s<span class="_ _9"></span></span>aw <span class="_ _23"></span>some <span class="_ _9"></span>examples <span class="_ _23"> </span>in <span class="_ _23"></span>Figur<span class="lsd1e">e8<span class="_ _43"></span><span class="ls0">.23,</span></span></div><div class="t m0 x32 h4d y2fa3 ff19 fs26 fc0 sc0 ls0 ws0">and <span class="_ _9"></span>the <span class="_ _23"> </span>results <span class="_ _9"></span>were<span class="_ _45"> </span>as<span class="_ _35"> </span>we<span class="_ _45"> </span>expected: <span class="_ _23"></span>if <span class="_ _9"></span>we <span class="_ _23"></span>execute <span class="_ _9"></span>a <span class="_ _23"> </span>simple <span class="_ _23"></span>command, <span class="_ _9"></span>such <span class="_ _23"></span>as<span class="_ _45"> </span><span class="ff1a">date</span>,</div><div class="t m0 x32 h4d y2fa4 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _44"> </span>termination <span class="_ _4b"> </span>status <span class="_ _4b"> </span>is <span class="_ _44"> </span>0.<span class="_ _93"> </span>Executing <span class="_ _4b"> </span>the <span class="_ _4b"> </span>shell <span class="_ _44"> </span>command<span class="_ _65"> </span><span class="ff1a">exit <span class="_ _d"></span>44<span class="_ _65"> </span><span class="ff19">gave <span class="_ _4b"> </span>us <span class="_ _44"> </span>a</span></span></div><div class="t m0 x32 h49 y2fa5 ff19 fs26 fc0 sc0 ls0 ws0">termination status of 44.<span class="_ _59"> </span>What happens with signals?</div><div class="t m0 x3f h49 y2fa6 ff19 fs26 fc0 sc0 ls0 ws0">Let’s <span class="_ _3"></span>run <span class="_ _3"></span>the <span class="_ _9"></span>program <span class="_ _3"></span>in <span class="_ _3"></span>Figur<span class="lsd1f">e8<span class="_ _b"></span><span class="ls0">.24 <span class="_ _9"></span>and <span class="_ _3"></span>send <span class="_ _9"></span>some <span class="_ _3"></span>signals <span class="_ _9"></span>to <span class="_ _3"></span>the <span class="_ _9"></span>command <span class="_ _3"></span>that’s</span></span></div><div class="t m0 x32 h49 y2fa7 ff19 fs26 fc0 sc0 ls0 ws0">executing:</div><div class="t m0 x3f h4e y2fa8 ff1a fs28 fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">tsys &quot;sleep 30&quot;</span></div><div class="t m0 x3f h4e y2fa9 ff1f fs28 fc0 sc0 ls0 ws0">ˆC<span class="ff1a">normal termination, exit status = 130<span class="_ _df"> </span><span class="ff1b">we press the interrupt key</span></span></div><div class="t m0 x3f h4e y2faa ff1a fs28 fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">tsys &quot;sleep 30&quot;</span></div><div class="t m0 x3f h4e y2fab ff1f fs28 fc0 sc0 ls0 ws0">ˆ\<span class="ff1a">sh: 946 Quit<span class="_ _27c"> </span><span class="ff1b">we press the quit key</span></span></div><div class="t m0 x3f h4e y2fac ff1a fs28 fc0 sc0 ls0 ws0">normal termination, exit status = 131</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
