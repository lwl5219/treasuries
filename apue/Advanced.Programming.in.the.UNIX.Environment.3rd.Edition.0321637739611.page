<div id="pf263" class="pf w4 h1f" data-page-no="263"><div class="pc pc263 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg263.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>15.9<span class="_ _24c"> </span>Shar<span class="_ _0"></span>ed <span class="_"> </span>Memory<span class="_ _1b"> </span><span class="ff18">577</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;fcntl.h&gt;</div><div class="t m0 x32 h57 y845 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;sys/mman.h&gt;</div><div class="t m0 x32 h57 y3c2 ff1a fs2d fc0 sc0 ls0 ws0">#define NLOOPS<span class="_ _189"> </span>1000</div><div class="t m0 x32 h57 y3c3 ff1a fs2d fc0 sc0 ls0 ws0">#define SIZE<span class="_ _186"> </span>sizeof(long) <span class="_ _68"> </span>/*<span class="_"> </span>size of shared memory area */</div><div class="t m0 x32 h57 y158d ff1a fs2d fc0 sc0 ls0 ws0">static int</div><div class="t m0 x32 h57 y158e ff1a fs2d fc0 sc0 ls0 ws0">update(long *ptr)</div><div class="t m0 x32 h57 y158f ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y3c7 ff1a fs2d fc0 sc0 ls0 ws0">return((*ptr)++); <span class="_ _d9"> </span>/*<span class="_"> </span>return value before increment */</div><div class="t m0 x32 h57 y3c8 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y1d37 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y1d38 ff1a fs2d fc0 sc0 ls0 ws0">main(void)</div><div class="t m0 x32 h57 y3cb ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y3cc ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _15"> </span>fd,<span class="_"> </span>i, counter;</div><div class="t m0 x8a h57 y3cd ff1a fs2d fc0 sc0 ls0 ws0">pid_t <span class="_ _d9"> </span>pid;</div><div class="t m0 x8a h57 y3ce ff1a fs2d fc0 sc0 ls0 ws0">void <span class="_ _68"> </span>*area;</div><div class="t m0 x8a h57 y1f3c ff1a fs2d fc0 sc0 ls0 ws0">if ((fd = open(&quot;/dev/zero&quot;, O_RDWR)) &lt; 0)</div><div class="t m0 x9d h57 y1f3d ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;open error&quot;);</div><div class="t m0 x8a h57 y1f3e ff1a fs2d fc0 sc0 ls0 ws0">if ((area = mmap(0, SIZE, PROT_READ | PROT_WRITE, MAP_SHARED,</div><div class="t m0 x194 h57 y3d2 ff1a fs2d fc0 sc0 ls0 ws0">fd, 0)) == MAP_FAILED)</div><div class="t m0 x9d h57 y3d3 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;mmap error&quot;);</div><div class="t m0 x8a h57 y3d4 ff1a fs2d fc0 sc0 ls0 ws0">close(fd); <span class="_ _8a"> </span>/*<span class="_"> </span>can close /dev/zero now that itâ€™s mapped */</div><div class="t m0 x8a h57 y2aae ff1a fs2d fc0 sc0 ls0 ws0">TELL_WAIT();</div><div class="t m0 x8a h57 y1d42 ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0) {</div><div class="t m0 x9d h57 y1d43 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;fork error&quot;);</div><div class="t m0 x8a h57 y1d44 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid &gt; 0) {<span class="_ _1ef"> </span>/* parent */</span></div><div class="t m0 x9d h57 y27ee ff1a fs2d fc0 sc0 ls0 ws0">for (i = 0; i &lt; NLOOPS; i += 2) {</div><div class="t m0 x1f h57 y27ef ff1a fs2d fc0 sc0 ls0 ws0">if ((counter = update((long *)area)) != i)</div><div class="t m0 x1ca h57 y27f0 ff1a fs2d fc0 sc0 ls0 ws0">err_quit(&quot;parent: expected %d, got %d&quot;, i, counter);</div><div class="t m0 x1f h57 y45c5 ff1a fs2d fc0 sc0 ls0 ws0">TELL_CHILD(pid);</div><div class="t m0 x1f h57 y45c6 ff1a fs2d fc0 sc0 ls0 ws0">WAIT_CHILD();</div><div class="t m0 x9d h57 y45c7 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y45c8 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse {<span class="_ _1e6"> </span>/* child */</span></div><div class="t m0 x9d h57 y45c9 ff1a fs2d fc0 sc0 ls0 ws0">for (i = 1; i &lt; NLOOPS + 1; i += 2) {</div><div class="t m0 x1f h57 y45ca ff1a fs2d fc0 sc0 ls0 ws0">WAIT_PARENT();</div><div class="t m0 x1f h57 y1d4e ff1a fs2d fc0 sc0 ls0 ws0">if ((counter = update((long *)area)) != i)</div><div class="t m0 x1ca h57 y1d4f ff1a fs2d fc0 sc0 ls0 ws0">err_quit(&quot;child: expected %d, got %d&quot;, i, counter);</div><div class="t m0 x1f h57 y1d50 ff1a fs2d fc0 sc0 ls0 ws0">TELL_PARENT(getppid());</div><div class="t m0 x9d h57 y1d51 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y1d52 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y2e9e ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y3354 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x2d h5e y45cb ff18 fs10 fc0 sc0 ls0 ws0">Figure 15.33<span class="_ _5a"> </span><span class="ff19">IPC between parent and child using memory mapped I/O of<span class="_"> </span><span class="ff1a">/dev/zero</span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
