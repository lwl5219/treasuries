<div id="pf1a8" class="pf w4 h1f" data-page-no="1a8"><div class="pc pc1a8 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1a8.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">390<span class="_ _1b"> </span><span class="ff19">Threads <span class="_ _24b"> </span>Chapter<span class="_ _78"> </span><span class="ls7ed">11</span></span></div><div class="t m0 x8a h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;thread 2 exiting\n&quot;);</div><div class="t m0 x8a h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">pthread_exit((void *)2);</div><div class="t m0 x32 h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y31b5 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y124b ff1a fs2d fc0 sc0 ls0 ws0">main(void)</div><div class="t m0 x32 h57 y124c ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y124d ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _186"> </span>err;</div><div class="t m0 x8a h57 y124e ff1a fs2d fc0 sc0 ls0 ws0">pthread_t <span class="_ _d9"> </span>tid1,<span class="_"> </span>tid2;</div><div class="t m0 x8a h57 y124f ff1a fs2d fc0 sc0 ls0 ws0">void <span class="_ _b7"> </span>*tret;</div><div class="t m0 x8a h57 y31b6 ff1a fs2d fc0 sc0 ls0 ws0">err = pthread_create(&amp;tid1, NULL, thr_fn1, NULL);</div><div class="t m0 x8a h57 y31b7 ff1a fs2d fc0 sc0 ls0 ws0">if (err != 0)</div><div class="t m0 x9d h57 y31b8 ff1a fs2d fc0 sc0 ls0 ws0">err_exit(err, &quot;can’t create thread 1&quot;);</div><div class="t m0 x8a h57 y31b9 ff1a fs2d fc0 sc0 ls0 ws0">err = pthread_create(&amp;tid2, NULL, thr_fn2, NULL);</div><div class="t m0 x8a h57 y31ba ff1a fs2d fc0 sc0 ls0 ws0">if (err != 0)</div><div class="t m0 x9d h57 y31bb ff1a fs2d fc0 sc0 ls0 ws0">err_exit(err, &quot;can’t create thread 2&quot;);</div><div class="t m0 x8a h57 y2f71 ff1a fs2d fc0 sc0 ls0 ws0">err = pthread_join(tid1, &amp;tret);</div><div class="t m0 x8a h57 y2f72 ff1a fs2d fc0 sc0 ls0 ws0">if (err != 0)</div><div class="t m0 x9d h57 y2f73 ff1a fs2d fc0 sc0 ls0 ws0">err_exit(err, &quot;can’t join with thread 1&quot;);</div><div class="t m0 x8a h57 y8e0 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;thread 1 exit code %ld\n&quot;, (long)tret);</div><div class="t m0 x8a h57 y8e1 ff1a fs2d fc0 sc0 ls0 ws0">err = pthread_join(tid2, &amp;tret);</div><div class="t m0 x8a h57 y2f74 ff1a fs2d fc0 sc0 ls0 ws0">if (err != 0)</div><div class="t m0 x9d h57 y2f75 ff1a fs2d fc0 sc0 ls0 ws0">err_exit(err, &quot;can’t join with thread 2&quot;);</div><div class="t m0 x8a h57 y2f76 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;thread 2 exit code %ld\n&quot;, (long)tret);</div><div class="t m0 x8a h57 y2f77 ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y31bc ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x6b h2d y31bd ff18 fs10 fc0 sc0 ls0 ws0">Figure 1<span class="_ _0"></span>1.3<span class="_ _d9"> </span><span class="ff19">Fetching the thread exit status</span></div><div class="t m0 x32 h49 y31be ff19 fs26 fc0 sc0 ls0 ws0">Running the program in Figur<span class="_ _0"></span><span class="lsd3">e1<span class="_ _8"></span><span class="ls0">1.3 gives us</span></span></div><div class="t m0 x3f h4e y31bf ff1a fs28 fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x3f h4e y31c0 ff1a fs28 fc0 sc0 ls0 ws0">thread 1 returning</div><div class="t m0 x3f h4e y31c1 ff1a fs28 fc0 sc0 ls0 ws0">thread 2 exiting</div><div class="t m0 x3f h4e y31c2 ff1a fs28 fc0 sc0 ls0 ws0">thread 1 exit code 1</div><div class="t m0 x3f h4e y31c3 ff1a fs28 fc0 sc0 ls0 ws0">thread 2 exit code 2</div><div class="t m0 x32 h4d y31c4 ff19 fs26 fc0 sc0 ls0 ws0">As <span class="_ _9"></span>we <span class="_ _23"></span>can <span class="_ _9"></span>see, <span class="_ _23"></span>when <span class="_ _9"></span>a <span class="_ _9"></span>thread <span class="_ _9"></span>exits <span class="_ _23"></span>by <span class="_ _9"></span>calling<span class="_ _45"> </span><span class="ff1a">pthread_exit<span class="_ _35"> </span></span>or <span class="_ _9"></span>by <span class="_ _9"></span>simply <span class="_ _23"></span>returning</div><div class="t m0 x32 h49 y31c5 ff19 fs26 fc0 sc0 ls0 ws0">from <span class="_ _53"> </span>the <span class="_"> </span>start <span class="_ _53"> </span>routine, <span class="_ _e"> </span>the <span class="_"> </span>exit <span class="_ _53"> </span>status <span class="_"> </span>can <span class="_ _53"> </span>be <span class="_"> </span>obtained <span class="_ _e"> </span>by <span class="_ _e"> </span>another <span class="_"> </span>thr<span class="_ _0"></span>ead <span class="_ _e"> </span>by <span class="_ _e"> </span>calling</div><div class="t m0 x32 h4d y31c6 ff1a fs26 fc0 sc0 ls0 ws0">pthread_join<span class="ff19">.</span></div><div class="t m0 x3f h54 y31c7 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _2"></span>typeless <span class="_ _2"></span>pointer <span class="_ _3"></span>passed <span class="_ _2"></span>to<span class="_ _47"> </span><span class="ff1a">pthread_create<span class="_ _66"> </span></span>and<span class="_ _47"> </span><span class="ff1a">pthread_exit<span class="_ _66"> </span></span>can <span class="_ _3"></span>be <span class="_ _2"></span>used</div><div class="t m0 x32 h55 y31c8 ff19 fs2c fc0 sc0 ls0 ws0">to <span class="_ _42"> </span>pass <span class="_ _53"> </span>mor<span class="lsda7">et<span class="_ _c"></span><span class="ls0">han <span class="_ _53"> </span>a <span class="_ _53"> </span>single <span class="_ _53"> </span>value.<span class="_ _54"> </span>The <span class="_ _53"> </span>pointer <span class="_ _53"> </span>can <span class="_ _53"> </span>be <span class="_ _53"> </span>used <span class="_ _42"> </span>to <span class="_ _53"> </span>pass <span class="_ _53"> </span>the <span class="_ _53"> </span>address <span class="_ _42"> </span>of <span class="_ _53"> </span>a</span></span></div><div class="t m0 x32 h55 y31c9 ff19 fs2c fc0 sc0 ls0 ws0">structur<span class="_ _0"></span><span class="lsda8">ec<span class="_ _43"></span><span class="ls0">ontaining <span class="_ _23"> </span>mor<span class="lsda8">ec<span class="_ _43"></span><span class="ls0">omplex <span class="_ _23"> </span>information.<span class="_ _51"> </span>Be <span class="_ _42"> </span>careful <span class="_ _9"></span>that <span class="_ _42"> </span>the <span class="_ _23"></span>memory <span class="_ _23"></span>used <span class="_ _23"> </span>for</span></span></span></span></div><div class="t m0 x32 h55 y31ca ff19 fs2c fc0 sc0 ls0 ws0">the <span class="_ _3"></span>structure<span class="_ _47"> </span>is<span class="_ _47"> </span>still <span class="_ _3"></span>valid <span class="_ _3"></span>when <span class="_ _9"></span>the <span class="_ _3"></span>caller <span class="_ _3"></span>has <span class="_ _3"></span>completed.<span class="_ _16"> </span>If <span class="_ _9"></span>the <span class="_ _3"></span>structur<span class="lsda9">ew<span class="_ _b"></span><span class="ls0">as <span class="_ _3"></span>allocated</span></span></div><div class="t m0 x32 h55 y31cb ff19 fs2c fc0 sc0 ls0 ws0">on the <span class="_ _2"></span>caller<span class="_ _3"></span>’s <span class="_ _2"></span>stack, <span class="_ _2"></span>for example, <span class="_ _2"></span>the memory <span class="_ _2"></span>contents might <span class="_ _2"></span>have <span class="_ _2"></span>changed by <span class="_ _2"></span>the time</div><div class="t m0 x32 h55 y31cc ff19 fs2c fc0 sc0 ls0 ws0">the structure<span class="_"> </span>is<span class="_"> </span>used. <span class="_"> </span>If<span class="_ _66"> </span><span class="lsdaa">at<span class="_ _d"></span><span class="ls0">hread allocates a <span class="_ _2"></span>structure<span class="_"> </span>on<span class="_"> </span>its stack and <span class="_ _2"></span>passes a <span class="_ _2"></span>pointer to</span></span></div><div class="t m0 x32 h54 y31cd ff19 fs2c fc0 sc0 ls0 ws0">this <span class="_ _42"> </span>structur<span class="lsdab">et<span class="_ _c"></span><span class="ls0">o<span class="_ _44"> </span><span class="ff1a">pthread_exit</span><span class="lsdac">,t<span class="_ _43"></span><span class="ls0">hen <span class="_ _23"> </span>the <span class="_ _53"> </span>stack <span class="_ _42"> </span>might <span class="_ _42"> </span>be <span class="_ _42"> </span>destroyed <span class="_ _42"> </span>and <span class="_ _42"> </span>its <span class="_ _42"> </span>memory</span></span></span></span></div><div class="t m0 x32 h54 y31ce ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">used for something else by the time the caller of<span class="_"> </span><span class="ff1a">pthread_join<span class="_ _66"> </span></span>tries to use it.</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
