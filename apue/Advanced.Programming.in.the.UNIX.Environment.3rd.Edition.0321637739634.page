<div id="pf27a" class="pf w4 h1f" data-page-no="27a"><div class="pc pc27a w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg27a.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">600<span class="_ _1b"> </span><span class="ff19">Network <span class="_"> </span>IPC: <span class="_"> </span>Sockets<span class="_ _2c6"> </span>Chapter <span class="_"> </span>16</span></div><div class="t m0 x3f h26 y12f ff19 fsf fc0 sc0 ls0 ws0">The<span class="_"> </span><span class="ff1a">addrinfo<span class="_ _80"> </span></span>structure<span class="_"> </span>is<span class="_"> </span>deﬁned to include at least the following members:</div><div class="t m0 x3f h57 yf34 ff1a fs2d fc0 sc0 ls0 ws0">struct addrinfo {</div><div class="t m0 xf4 h57 yf35 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _12d"> </span>ai_flags;<span class="_ _88"> </span>/* customize behavior */</div><div class="t m0 xf4 h57 yf36 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _12d"> </span>ai_family;<span class="_ _8a"> </span>/* address family */</div><div class="t m0 xf4 h57 yf37 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _12d"> </span>ai_socktype;<span class="_ _87"> </span>/* socket type */</div><div class="t m0 xf4 h57 yf38 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _12d"> </span>ai_protocol;<span class="_ _87"> </span>/* protocol */</div><div class="t m0 xf4 h57 yf39 ff1a fs2d fc0 sc0 ls0 ws0">socklen_t <span class="_ _186"> </span>ai_addrlen;<span class="_ _15"> </span>/* length in bytes of address */</div><div class="t m0 xf4 h57 yf3a ff1a fs2d fc0 sc0 ls0 ws0">struct sockaddr<span class="_ _d9"> </span>*ai_addr; <span class="_ _88"> </span>/*<span class="_"> </span>address */</div><div class="t m0 xf4 h57 yf3b ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _82"> </span>*ai_canonname;<span class="_ _3a"> </span>/* canonical name of host */</div><div class="t m0 xf4 h57 y480e ff1a fs2d fc0 sc0 ls0 ws0">struct addrinfo<span class="_ _d9"> </span>*ai_next; <span class="_ _88"> </span>/*<span class="_"> </span>next in list */</div><div class="t m0 xf4 h57 y480f ff1a fs2d fc0 sc0 ls0 ws0">.</div><div class="t m0 xf4 h57 y4810 ff1a fs2d fc0 sc0 ls0 ws0">.</div><div class="t m0 xf4 h57 y4811 ff1a fs2d fc0 sc0 ls0 ws0">.</div><div class="t m0 x3f h57 y4812 ff1a fs2d fc0 sc0 ls0 ws0">};</div><div class="t m0 x3f h2b y4813 ff19 fsf fc0 sc0 ls5f ws0">We <span class="_ _47"> </span>c<span class="_ _9"></span><span class="ls0">an <span class="_ _42"> </span>supply <span class="_ _23"> </span>an <span class="_ _23"> </span>optional<span class="_ _35"> </span><span class="ff1b">hint<span class="_ _35"> </span></span>to <span class="_ _23"> </span>select <span class="_ _42"> </span>addresses <span class="_ _9"></span>that <span class="_ _42"> </span>meet <span class="_ _23"> </span>certain <span class="_ _23"> </span>criteria.<span class="_ _51"> </span>The</span></div><div class="t m0 x32 h26 y4814 ff19 fsf fc0 sc0 ls0 ws0">hint <span class="_ _44"> </span>is <span class="_ _4b"> </span>a <span class="_ _4b"> </span>template <span class="_ _44"> </span>used <span class="_ _4b"> </span>for <span class="_ _4b"> </span>ﬁltering <span class="_ _4b"> </span>addresses <span class="_ _44"> </span>and <span class="_ _44"> </span>uses <span class="_ _4b"> </span>only <span class="_ _4b"> </span>the<span class="_ _54"> </span><span class="ff1a">ai_family</span>,</div><div class="t m0 x32 h26 y4815 ff1a fsf fc0 sc0 ls0 ws0">ai_flags<span class="ff19">,<span class="_ _46"> </span></span>ai_protocol<span class="ff19 ls1338">,a<span class="_ _4a"></span><span class="ls0">nd<span class="_ _46"> </span><span class="ff1a">ai_socktype<span class="_ _46"> </span></span>ﬁelds. <span class="_ _61"> </span>The<span class="_ _61"> </span><span class="ls45">re</span>maining <span class="_ _47"> </span>integer <span class="_"> </span>ﬁelds</span></span></div><div class="t m0 x32 h2a y4816 ff19 fsf fc0 sc0 ls0 ws0">must <span class="_ _3"></span>be <span class="_ _9"></span>set <span class="_ _9"></span>to <span class="_ _3"></span>0, <span class="_ _9"></span>and <span class="_ _9"></span>the <span class="_ _3"></span>pointer <span class="_ _9"></span>ﬁelds <span class="_ _9"></span>must <span class="_ _3"></span>be <span class="_ _9"></span>null.<span class="_ _16"> </span>Figur<span class="ls1339">e1<span class="_ _b"></span><span class="ls0">6.7 <span class="_ _9"></span>summarizes <span class="_ _9"></span>the <span class="_ _3"></span>ﬂags</span></span></div><div class="t m0 x32 h26 y4817 ff19 fsf fc0 sc0 ls0 ws0">we can use in the<span class="_"> </span><span class="ff1a">ai_flags<span class="_ _80"> </span></span>ﬁeld to customize how addresses and names ar<span class="ls44">et<span class="_ _4f"></span><span class="ls45">re<span class="_ _2"></span><span class="ls0">ated.</span></span></span></div><div class="t m0 x167 h2d y4818 ff19 fs10 fc0 sc0 ls0 ws0">Flag <span class="_ _2c9"> </span>Description</div><div class="t m0 x20 h4f y4819 ff1a fs11 fc0 sc0 ls0 ws0">AI_ADDRCONFIG<span class="_ _75"> </span><span class="ff19">Query for whichever address type</span></div><div class="t m0 xce h2e y481a ff19 fs11 fc0 sc0 ls0 ws0">(</div><div class="t m0 x1eb h2e y4819 ff19 fs11 fc0 sc0 ls0 ws0">IPv4 or IPv6</div><div class="t m0 x1c7 h2e y481a ff19 fs11 fc0 sc0 ls0 ws0">)</div><div class="t m0 x196 h2e y4819 ff19 fs11 fc0 sc0 ls0 ws0">is conﬁgured.</div><div class="t m0 x20 h4f y481b ff1a fs11 fc0 sc0 ls0 ws0">AI_ALL<span class="_ _a0"> </span><span class="ff19">Look for both IPv4 and IPv6 addresses (used only with<span class="_"> </span></span>AI_V4MAPPED<span class="ff19">).</span></div><div class="t m0 x20 h4f y481c ff1a fs11 fc0 sc0 ls0 ws0">AI_CANONNAME<span class="_ _15"> </span><span class="ff19">Request a canonical name (as opposed to an alias).</span></div><div class="t m0 x20 h4f y481d ff1a fs11 fc0 sc0 ls0 ws0">AI_NUMERICHOST<span class="_ _6e"> </span><span class="ff19">The host address is speciﬁed in numeric format; don’t try to translate it.</span></div><div class="t m0 x20 h4f y481e ff1a fs11 fc0 sc0 ls0 ws0">AI_NUMERICSERV<span class="_ _6e"> </span><span class="ff19">The service is speciﬁed as a numeric port number; don’t try to translate it.</span></div><div class="t m0 x20 h4f y481f ff1a fs11 fc0 sc0 ls0 ws0">AI_PASSIVE<span class="_ _10b"> </span><span class="ff19">Socket address is intended to be bound for listening.</span></div><div class="t m0 x20 h4f y4820 ff1a fs11 fc0 sc0 ls0 ws0">AI_V4MAPPED<span class="_ _6c"> </span><span class="ff19">If no IPv6 addresses ar<span class="lsdb">ef<span class="_ _5"></span><span class="ls0">ound, return IPv4 addresses mapped in IPv6 format.</span></span></span></div><div class="t m0 xf3 h6d y4821 ff18 fs12 fc0 sc0 ls0 ws0">Figure 16.7<span class="_ _5a"> </span><span class="ff19">Flags for<span class="_"> </span><span class="ff1a">addrinfo<span class="_ _e"> </span></span>structure</span></div><div class="t m0 x3f h5c y4822 ff19 fs29 fc0 sc0 ls0 ws0">If<span class="_ _4b"> </span><span class="ff1a">getaddrinfo<span class="_ _59"> </span></span>fails, <span class="_"> </span>we <span class="_ _53"> </span>can’t <span class="_"> </span>use<span class="_ _4b"> </span><span class="ff1a">perror<span class="_ _4b"> </span></span>or<span class="_ _59"> </span><span class="ff1a">strerror<span class="_ _59"> </span></span>to <span class="_ _e"> </span>generate <span class="_"> </span>an <span class="_ _53"> </span>error</div><div class="t m0 x32 h5c y4823 ff19 fs29 fc0 sc0 ls0 ws0">message. <span class="_ _35"> </span>Instead,<span class="_ _45"> </span>we <span class="_ _42"> </span>need <span class="_ _23"></span>to <span class="_ _23"></span>call<span class="_ _35"> </span><span class="ff1a">gai_strerror<span class="_ _45"> </span></span>to <span class="_ _23"> </span>convert <span class="_ _23"> </span>the <span class="_ _42"> </span>err<span class="_ _0"></span>or <span class="_ _23"></span>code <span class="_ _23"> </span>returned</div><div class="t m0 x32 h50 y4824 ff19 fs29 fc0 sc0 ls0 ws0">into an error message.</div><div class="t m0 x3f h62 y4825 ff1a fs30 fc0 sc0 ls0 ws0">#include &lt;netdb.h&gt;</div><div class="t m0 x3f h62 y4826 ff1a fs30 fc0 sc0 ls0 ws0">const char *gai_strerror(int<span class="_"> </span><span class="ff1b">error</span>);</div><div class="t m0 x221 hff y4827 ff19 fs30 fc0 sc0 ls0 ws0">Returns: a pointer to a string describing the error</div><div class="t m0 x3f h64 y4828 ff19 fs31 fc0 sc0 ls0 ws0">The<span class="_"> </span><span class="ff1a">getnameinfo<span class="_ _80"> </span></span>function converts an address into host and service names.</div><div class="t m0 x3f h65 y4829 ff1a fs32 fc0 sc0 ls0 ws0">#include &lt;sys/socket.h&gt;</div><div class="t m0 x3f h65 y482a ff1a fs32 fc0 sc0 ls0 ws0">#include &lt;netdb.h&gt;</div><div class="t m0 x3f h65 y482b ff1a fs32 fc0 sc0 ls0 ws0">int getnameinfo(const struct sockaddr *restrict<span class="_"> </span><span class="ff1b">addr</span><span class="ls441">,s<span class="_ _1d"></span><span class="ls0">ocklen_t<span class="_"> </span><span class="ff1b">alen</span>,</span></span></div><div class="t m0 x1dd h65 y482c ff1a fs32 fc0 sc0 ls0 ws0">char *restrict<span class="_"> </span><span class="ff1b">host</span><span class="ls441">,s<span class="_ _1d"></span><span class="ls0">ocklen_t<span class="_"> </span><span class="ff1b">hostlen</span>,</span></span></div><div class="t m0 x1dd h65 y482d ff1a fs32 fc0 sc0 ls0 ws0">char *restrict<span class="_"> </span><span class="ff1b">service</span><span class="ls441">,s<span class="_ _1d"></span><span class="ls0">ocklen_t<span class="_"> </span><span class="ff1b">servlen</span><span class="ls441">,i<span class="_ _5b"></span><span class="ls0">nt<span class="_"> </span><span class="ff1b">ﬂags</span>);</span></span></span></span></div><div class="t m0 x203 h92 y482e ff19 fs32 fc0 sc0 ls0 ws0">Returns: 0 if OK, nonzero<span class="_"> </span>on<span class="_"> </span>err<span class="_ _0"></span>or</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
