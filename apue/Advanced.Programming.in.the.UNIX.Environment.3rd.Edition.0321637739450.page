<div id="pf1c2" class="pf w4 h1f" data-page-no="1c2"><div class="pc pc1c2 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg1c2.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">416<span class="_ _1b"> </span><span class="ff19">Threads <span class="_ _24b"> </span>Chapter<span class="_ _78"> </span><span class="ls7ed">11</span></span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h57 y348c ff1a fs2d fc0 sc0 ls0 ws0">struct msg {</div><div class="t m0 x8a h57 y2012 ff1a fs2d fc0 sc0 ls0 ws0">struct msg *m_next;</div><div class="t m0 x8a h57 y2013 ff1a fs2d fc0 sc0 ls0 ws0">/* ... more stuff here ... */</div><div class="t m0 x32 h57 y2014 ff1a fs2d fc0 sc0 ls0 ws0">};</div><div class="t m0 x32 h57 y27e6 ff1a fs2d fc0 sc0 ls0 ws0">struct msg *workq;</div><div class="t m0 x32 h57 y348d ff1a fs2d fc0 sc0 ls0 ws0">pthread_cond_t qready = PTHREAD_COND_INITIALIZER;</div><div class="t m0 x32 h57 y1590 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_t qlock = PTHREAD_MUTEX_INITIALIZER;</div><div class="t m0 x32 h57 y84b ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y84c ff1a fs2d fc0 sc0 ls0 ws0">process_msg(void)</div><div class="t m0 x32 h57 y84d ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y84e ff1a fs2d fc0 sc0 ls0 ws0">struct msg *mp;</div><div class="t m0 x8a h57 y27e7 ff1a fs2d fc0 sc0 ls0 ws0">for (;;) {</div><div class="t m0 x9d h57 y27e8 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_lock(&amp;qlock);</div><div class="t m0 x9d h57 y27e9 ff1a fs2d fc0 sc0 ls0 ws0">while (workq == NULL)</div><div class="t m0 x1f h57 y27ea ff1a fs2d fc0 sc0 ls0 ws0">pthread_cond_wait(&amp;qready, &amp;qlock);</div><div class="t m0 x9d h57 y27eb ff1a fs2d fc0 sc0 ls0 ws0">mp = workq;</div><div class="t m0 x9d h57 y348e ff1a fs2d fc0 sc0 ls0 ws0">workq = mp-&gt;m_next;</div><div class="t m0 x9d h57 y348f ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;qlock);</div><div class="t m0 x9d h57 y3490 ff1a fs2d fc0 sc0 ls0 ws0">/* now process the message mp */</div><div class="t m0 x8a h57 y3491 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y3492 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y3493 ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y3494 ff1a fs2d fc0 sc0 ls0 ws0">enqueue_msg(struct msg *mp)</div><div class="t m0 x32 h57 y3495 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y3496 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_lock(&amp;qlock);</div><div class="t m0 x8a h57 y3497 ff1a fs2d fc0 sc0 ls0 ws0">mp-&gt;m_next = workq;</div><div class="t m0 x8a h57 y3498 ff1a fs2d fc0 sc0 ls0 ws0">workq = mp;</div><div class="t m0 x8a h57 y3499 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;qlock);</div><div class="t m0 x8a h57 y349a ff1a fs2d fc0 sc0 ls0 ws0">pthread_cond_signal(&amp;qready);</div><div class="t m0 x32 h57 y349b ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9e h2d y349c ff18 fs10 fc0 sc0 ls0 ws0">Figure 1<span class="_ _0"></span>1.15<span class="_ _54"> </span><span class="ff19">Using a condition variable</span></div><div class="t m0 x3f h49 y349d ff19 fs26 fc0 sc0 ls0 ws0">The condition is <span class="_ _2"></span>the state of <span class="_ _2"></span>the work <span class="_ _2"></span>queue.<span class="_ _46"> </span><span class="ls164">We <span class="_ _53"> </span>p<span class="_ _23"></span><span class="lscc">ro</span></span>tect the <span class="_ _2"></span>condition with a <span class="_ _2"></span>mutex</div><div class="t m0 x32 h4d y349e ff19 fs26 fc0 sc0 ls0 ws0">and <span class="_ _53"> </span>evaluate <span class="_ _53"> </span>the <span class="_ _53"> </span>condition <span class="_ _53"> </span>in <span class="_ _53"> </span>a<span class="_ _4b"> </span><span class="ff1a">while<span class="_ _4b"> </span></span>loop. <span class="_ _44"> </span>When<span class="_ _4b"> </span>we <span class="_ _53"> </span>put <span class="_ _53"> </span>a <span class="_ _53"> </span>message <span class="_ _e"> </span>on <span class="_ _53"> </span>the <span class="_ _53"> </span>work</div><div class="t m0 x32 h49 y349f ff19 fs26 fc0 sc0 ls0 ws0">queue, we need <span class="_ _2"></span>to hold the <span class="_ _2"></span>mutex, but we <span class="_ _2"></span>don’t need to <span class="_ _2"></span>hold the mutex <span class="_ _2"></span>when we signal</div><div class="t m0 x32 h49 y34a0 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _2"></span>waiting <span class="_ _2"></span>threads. <span class="_ _66"> </span>As<span class="_ _47"> </span>long <span class="_ _2"></span>as <span class="_ _2"></span>it <span class="_ _2"></span>is <span class="_ _3"></span>okay <span class="_ _2"></span>for <span class="_ _2"></span>a <span class="_ _2"></span>thread <span class="_ _2"></span>to <span class="_ _2"></span>pull <span class="_ _2"></span>the <span class="_ _3"></span>message <span class="_ _2"></span>of<span class="lsc6b">ft<span class="_ _8"></span><span class="ls0">he <span class="_ _3"></span>queue</span></span></div><div class="t m0 x32 h4d y34a1 ff19 fs26 fc0 sc0 ls0 ws0">before<span class="_"> </span>we<span class="_ _47"> </span>call<span class="_ _47"> </span><span class="ff1a">cond_signal</span>,<span class="_ _47"> </span>we<span class="_ _47"> </span>can <span class="_ _2"></span>do <span class="_ _2"></span>this <span class="_ _3"></span>after <span class="_ _2"></span>releasing <span class="_ _2"></span>the <span class="_ _3"></span>mutex.<span class="_ _61"> </span>Since <span class="_ _3"></span>we <span class="_ _3"></span>check</div><div class="t m0 x32 h4d y34a2 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _9"></span>condition <span class="_ _23"></span>in <span class="_ _9"></span>a<span class="_ _35"> </span><span class="ff1a">while<span class="_ _45"> </span></span>loop, <span class="_ _9"></span>this <span class="_ _23"></span>doesn’t <span class="_ _9"></span>present <span class="_ _9"></span>a <span class="_ _23"></span>problem; <span class="_ _3"></span>a <span class="_ _23"></span>thread <span class="_ _9"></span>will <span class="_ _9"></span>wake <span class="_ _23"></span>up,</div><div class="t m0 x32 h49 y34a3 ff19 fs26 fc0 sc0 ls0 ws0">ﬁnd <span class="_ _23"> </span>that <span class="_ _42"> </span>the <span class="_ _23"> </span>queue <span class="_ _42"> </span>is <span class="_ _23"> </span>still <span class="_ _42"> </span>empty<span class="_ _4"></span><span class="lse39">,a<span class="_ _43"></span><span class="ls0">nd <span class="_ _42"> </span>go <span class="_ _23"> </span>back <span class="_ _42"> </span>to <span class="_ _23"> </span>waiting <span class="_ _42"> </span>again.<span class="_ _51"> </span>If <span class="_ _42"> </span>the <span class="_ _23"> </span>code <span class="_ _42"> </span>couldn’t</span></span></div><div class="t m0 x32 h49 y34a4 ff19 fs26 fc0 sc0 ls0 ws0">tolerate this race, we would need to hold the mutex when we signal the threads.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
