<div id="pf1ec" class="pf w4 h1f" data-page-no="1ec"><div class="pc pc1ec w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1ec.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">458<span class="_ _1b"> </span><span class="ff19">Thread <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _177"> </span>Chapter<span class="_ _44"> </span>12</span></div><div class="t m0 x3f h57 y1295 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y1601 ff1a fs2d fc0 sc0 ls0 ws0">int pthread_atfork(void (*<span class="ff1b">prepar<span class="_ _0"></span>e<span class="ff1a">)(void), void (*</span>parent<span class="ff1a">)(void),</span></span></div><div class="t m0 x1d2 h57 y38ed ff1a fs2d fc0 sc0 ls0 ws0">void (*<span class="ff1b">child</span>)(void));</div><div class="t m0 x78 h5f y38ee ff19 fs2d fc0 sc0 ls0 ws0">Returns: 0 if OK, error number on failur<span class="_ _0"></span>e</div><div class="t m0 x3f h4d y38ef ff19 fs26 fc0 sc0 ls3aa ws0">Wi<span class="_ _3"></span><span class="ls0">th<span class="_ _45"> </span><span class="ff1a">pthread_atfork</span>,<span class="_ _35"> </span>we<span class="_ _35"> </span>can <span class="_ _9"></span>install <span class="_ _23"> </span>up <span class="_ _23"></span>to <span class="_ _23"></span>thr<span class="_ _0"></span>ee <span class="_ _23"></span>functions <span class="_ _9"></span>to <span class="_ _23"> </span>help <span class="_ _23"></span>clean <span class="_ _23"></span>up <span class="_ _9"></span>the</span></div><div class="t m0 x32 h4d y38f0 ff19 fs26 fc0 sc0 ls0 ws0">locks. <span class="_ _44"> </span>The<span class="_ _4b"> </span><span class="ff1b">prepar<span class="_ _0"></span>e<span class="_ _44"> </span><span class="ff19">fork <span class="_ _53"> </span>handler <span class="_ _53"> </span>is <span class="_ _e"> </span>called <span class="_ _53"> </span>in <span class="_ _53"> </span>the <span class="_ _53"> </span>parent <span class="_ _42"> </span>before<span class="_ _44"> </span><span class="ff1a">fork<span class="_ _4b"> </span></span>creates <span class="_ _42"> </span>the <span class="_ _53"> </span>child</span></span></div><div class="t m0 x32 h4a y38f1 ff19 fs26 fc0 sc0 ls0 ws0">process. <span class="_"> </span>This<span class="_ _47"> </span>fork <span class="_ _2"></span>handler<span class="_ _3"></span>’s <span class="_ _3"></span>job <span class="_ _2"></span>is <span class="_ _2"></span>to <span class="_ _2"></span>acquir<span class="lsf33">ea<span class="_ _4f"></span><span class="ls0">ll <span class="_ _2"></span>locks <span class="_ _2"></span>deﬁned <span class="_ _2"></span>by <span class="_ _3"></span>the <span class="_ _2"></span>parent. <span class="_ _66"> </span>The<span class="_ _47"> </span><span class="ff1b">parent</span></span></span></div><div class="t m0 x32 h4d y38f2 ff19 fs26 fc0 sc0 ls0 ws0">fork <span class="_ _e"> </span>handler <span class="_"> </span>is <span class="_ _53"> </span>called <span class="_"> </span>in <span class="_ _53"> </span>the <span class="_"> </span>context <span class="_ _e"> </span>of <span class="_ _e"> </span>the <span class="_"> </span>par<span class="_ _0"></span>ent <span class="_ _e"> </span>after<span class="_ _59"> </span><span class="ff1a">fork<span class="_ _59"> </span></span>has <span class="_ _e"> </span>created <span class="_ _e"> </span>the <span class="_ _e"> </span>child</div><div class="t m0 x32 h4d y38f3 ff19 fs26 fc0 sc0 ls0 ws0">process, but <span class="_ _3"></span>before<span class="_ _66"> </span><span class="ff1a">fork<span class="_ _47"> </span></span>has <span class="_ _2"></span>returned. <span class="_ _66"> </span>This<span class="_ _47"> </span>fork <span class="_ _2"></span>handler<span class="_ _9"></span>’s <span class="_ _2"></span>job <span class="_ _3"></span>is <span class="_ _2"></span>to <span class="_ _3"></span>unlock <span class="_ _2"></span>all <span class="_ _2"></span>the <span class="_ _3"></span>locks</div><div class="t m0 x32 h4a y38f4 ff19 fs26 fc0 sc0 ls0 ws0">acquired <span class="_ _9"></span>by <span class="_ _23"></span>the<span class="_ _45"> </span><span class="ff1b">prepare<span class="_ _45"> </span></span>fork <span class="_ _9"></span>handler<span class="_ _1"></span><span class="ls977">.T<span class="_ _26"></span><span class="ls0">he<span class="_ _35"> </span><span class="ff1b">child<span class="_ _45"> </span></span>fork <span class="_ _23"></span>handler <span class="_ _23"></span>is <span class="_ _9"></span>called <span class="_ _23"></span>in <span class="_ _23"></span>the <span class="_ _9"></span>context <span class="_ _23"> </span>of</span></span></div><div class="t m0 x32 h4d y38f5 ff19 fs26 fc0 sc0 ls0 ws0">the child process befor<span class="lsf34">er<span class="_ _8"></span><span class="ls0">eturning from<span class="_"> </span><span class="ff1a">fork</span><span class="lsf35">.L<span class="_ _4a"></span><span class="ls0">ike the<span class="_"> </span><span class="ff1b">parent<span class="_"> </span></span>fork handler<span class="_ _6"></span><span class="lsf34">,t<span class="_ _d"></span><span class="ls0">he<span class="_"> </span><span class="ff1b">child<span class="_ _66"> </span></span>fork</span></span></span></span></span></span></div><div class="t m0 x32 h4a y38f6 ff19 fs26 fc0 sc0 ls0 ws0">handler must release all the locks acquir<span class="_ _0"></span>ed by the<span class="_"> </span><span class="ff1b">pr<span class="_ _0"></span>epare<span class="_"> </span><span class="ff19">fork handler<span class="_ _6"></span>.</span></span></div><div class="t m0 x3f h49 y38f7 ff19 fs26 fc0 sc0 ls0 ws0">Note <span class="_ _42"> </span>that <span class="_ _53"> </span>the <span class="_ _53"> </span>locks <span class="_ _53"> </span>ar<span class="lsf36">en<span class="_ _c"></span><span class="ls0">ot <span class="_ _53"> </span>locked <span class="_ _53"> </span>once <span class="_ _53"> </span>and <span class="_ _42"> </span>unlocked <span class="_ _53"> </span>twice, <span class="_ _53"> </span>as <span class="_ _53"> </span>it <span class="_ _53"> </span>might <span class="_ _53"> </span>appear<span class="_ _1"></span>.</span></span></div><div class="t m0 x32 h49 y38f8 ff19 fs26 fc0 sc0 ls0 ws0">When <span class="_ _e"> </span>the <span class="_ _e"> </span>child <span class="_"> </span>addr<span class="_ _0"></span>ess <span class="_ _e"> </span>space <span class="_ _e"> </span>is <span class="_"> </span>cr<span class="_ _1"></span>eated, <span class="_"> </span>it <span class="_ _53"> </span>gets <span class="_"> </span>a <span class="_ _53"> </span>copy <span class="_"> </span>of <span class="_ _53"> </span>all <span class="_"> </span>locks <span class="_ _53"> </span>that <span class="_"> </span>the <span class="_ _53"> </span>parent</div><div class="t m0 x32 h4a y38f9 ff19 fs26 fc0 sc0 ls0 ws0">deﬁned. <span class="_ _44"> </span>Because<span class="_ _4b"> </span>the<span class="_ _4b"> </span><span class="ff1b">prepare<span class="_ _44"> </span></span>fork <span class="_ _53"> </span>handler <span class="_ _53"> </span>acquired <span class="_ _53"> </span>all <span class="_ _e"> </span>the <span class="_ _53"> </span>locks, <span class="_ _53"> </span>the <span class="_ _e"> </span>memory <span class="_ _53"> </span>in <span class="_ _e"> </span>the</div><div class="t m0 x32 h49 y38fa ff19 fs26 fc0 sc0 ls0 ws0">parent <span class="_ _2"></span>and <span class="_ _9"></span>the <span class="_ _3"></span>memory <span class="_ _9"></span>in <span class="_ _3"></span>the <span class="_ _9"></span>child <span class="_ _3"></span>start <span class="_ _9"></span>out <span class="_ _3"></span>with <span class="_ _9"></span>identical <span class="_ _3"></span>contents.<span class="_ _16"> </span>When <span class="_ _9"></span>the <span class="_ _3"></span>parent</div><div class="t m0 x32 h49 y38fb ff19 fs26 fc0 sc0 ls0 ws0">and <span class="_ _9"></span>the <span class="_ _9"></span>child <span class="_ _23"></span>unlock <span class="_ _9"></span>their <span class="_ _9"></span>‘‘copy’<span class="_ _1"></span>’<span class="_ _45"> </span>of<span class="_ _45"> </span>the <span class="_ _23"></span>locks, <span class="_ _9"></span>new <span class="_ _9"></span>memory <span class="_ _23"></span>is <span class="_ _9"></span>allocated <span class="_ _9"></span>for <span class="_ _9"></span>the <span class="_ _23"></span>child,</div><div class="t m0 x32 h49 y38fc ff19 fs26 fc0 sc0 ls0 ws0">and <span class="_ _9"></span>the <span class="_ _23"></span>memory <span class="_ _9"></span>contents <span class="_ _23"></span>from <span class="_ _3"></span>the <span class="_ _23"></span>parent <span class="_ _9"></span>ar<span class="lsf37">ec<span class="_ _43"></span><span class="ls0">opied <span class="_ _23"></span>to <span class="_ _9"></span>the <span class="_ _23"></span>child’s <span class="_ _9"></span>memory <span class="_ _23"></span>(copy-on-</span></span></div><div class="t m0 x32 h49 y38fd ff19 fs26 fc0 sc0 ls0 ws0">write), <span class="_ _9"></span>so <span class="_ _9"></span>we <span class="_ _9"></span>ar<span class="ls68c">el<span class="_ _b"></span><span class="ls0">eft <span class="_ _3"></span>with <span class="_ _9"></span>a <span class="_ _9"></span>situation <span class="_ _9"></span>that <span class="_ _9"></span>looks <span class="_ _9"></span>as <span class="_ _9"></span>if <span class="_ _9"></span>the <span class="_ _9"></span>parent <span class="_ _3"></span>locked <span class="_ _9"></span>all <span class="_ _9"></span>its <span class="_ _9"></span>copies <span class="_ _9"></span>of</span></span></div><div class="t m0 x32 h49 y38fe ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _9"></span>locks <span class="_ _9"></span>and <span class="_ _9"></span>the <span class="_ _9"></span>child <span class="_ _9"></span>locked <span class="_ _9"></span>all <span class="_ _9"></span>its <span class="_ _9"></span>copies <span class="_ _9"></span>of <span class="_ _9"></span>the <span class="_ _9"></span>locks.<span class="_ _5a"> </span>The <span class="_ _9"></span>parent <span class="_ _3"></span>and <span class="_ _9"></span>the <span class="_ _9"></span>child <span class="_ _9"></span>end</div><div class="t m0 x32 h49 y38ff ff19 fs26 fc0 sc0 ls0 ws0">up <span class="_ _23"></span>unlocking <span class="_ _9"></span>duplicate <span class="_ _23"> </span>locks <span class="_ _23"> </span>stored <span class="_ _9"></span>in <span class="_ _23"> </span>different <span class="_ _9"></span>memory <span class="_ _23"></span>locations, <span class="_ _23"></span>as <span class="_ _23"></span>if <span class="_ _9"></span>the <span class="_ _23"> </span>following</div><div class="t m0 x32 h49 y3900 ff19 fs26 fc0 sc0 ls0 ws0">sequence of events occurred:</div><div class="t m0 x3f h49 y3901 ff19 fs26 fc0 sc0 ls0 ws0">1. <span class="_ _51"> </span>The<span class="_"> </span>parent acquir<span class="_ _0"></span>ed all its locks.</div><div class="t m0 x3f h49 y3902 ff19 fs26 fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>The<span class="_"> </span>child acquired all its locks.</div><div class="t m0 x3f h49 y3903 ff19 fs26 fc0 sc0 ls0 ws0">3. <span class="_ _51"> </span>The<span class="_"> </span>parent r<span class="_ _0"></span>eleased its locks.</div><div class="t m0 x3f h49 y3904 ff19 fs26 fc0 sc0 ls0 ws0">4. <span class="_ _51"> </span>The<span class="_"> </span>child released its locks.</div><div class="t m0 x3f h4d y3905 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _47"> </span>c<span class="_ _9"></span><span class="ls0">an <span class="_ _23"> </span>call<span class="_ _35"> </span><span class="ff1a">pthread_atfork<span class="_ _35"> </span></span>multiple <span class="_ _9"></span>times <span class="_ _23"> </span>to <span class="_ _23"> </span>install <span class="_ _23"> </span>mor<span class="lsf38">et<span class="_ _b"></span><span class="ls0">han <span class="_ _9"></span>one <span class="_ _23"> </span>set <span class="_ _23"> </span>of <span class="_ _23"> </span>fork</span></span></span></div><div class="t m0 x32 h49 y3906 ff19 fs26 fc0 sc0 ls0 ws0">handlers. <span class="_"> </span>If<span class="_ _47"> </span>we don’t <span class="_ _2"></span>have <span class="_ _2"></span>a <span class="_ _2"></span>need <span class="_ _2"></span>to use <span class="_ _2"></span>one <span class="_ _2"></span>of <span class="_ _2"></span>the <span class="_ _2"></span>handlers, <span class="_ _2"></span>we can <span class="_ _2"></span>pass <span class="_ _2"></span>a <span class="_ _2"></span>null <span class="_ _2"></span>pointer</div><div class="t m0 x32 h49 y3907 ff19 fs26 fc0 sc0 ls0 ws0">for <span class="_ _53"> </span>the <span class="_ _53"> </span>particular <span class="_ _53"> </span>handler <span class="_ _53"> </span>argument, <span class="_ _42"> </span>and <span class="_ _53"> </span>it <span class="_ _53"> </span>will <span class="_ _53"> </span>have <span class="_ _53"> </span>no <span class="_ _53"> </span>effect. <span class="_ _44"> </span>When<span class="_ _4b"> </span>multiple <span class="_ _53"> </span>fork</div><div class="t m0 x32 h4a y3908 ff19 fs26 fc0 sc0 ls0 ws0">handlers <span class="_ _23"> </span>ar<span class="lsf39">eu<span class="_ _43"></span><span class="ls0">sed, <span class="_ _23"> </span>the <span class="_ _42"> </span>order <span class="_ _23"> </span>in <span class="_ _42"> </span>which <span class="_ _23"> </span>the <span class="_ _42"> </span>handlers <span class="_ _42"> </span>ar<span class="lsf39">ec<span class="_ _43"></span><span class="ls0">alled <span class="_ _23"></span>differs. <span class="_ _35"> </span>The<span class="_ _35"> </span><span class="ff1b">parent<span class="_ _35"> </span></span>and</span></span></span></span></div><div class="t m0 x32 h4a y3909 ff1b fs26 fc0 sc0 ls0 ws0">child<span class="_ _35"> </span><span class="ff19">fork <span class="_ _23"></span>handlers <span class="_ _23"> </span>ar<span class="lsf3a">ec<span class="_ _43"></span><span class="ls0">alled <span class="_ _23"> </span>in <span class="_ _23"> </span>the <span class="_ _42"> </span>order <span class="_ _9"></span>in <span class="_ _42"> </span>which <span class="_ _23"></span>they <span class="_ _23"> </span>wer<span class="lsf3a">er<span class="_ _43"></span><span class="ls0">egister<span class="_ _0"></span>ed, <span class="_ _23"></span>whereas <span class="_ _23"></span>the</span></span></span></span></span></div><div class="t m0 x32 h4a y390a ff1b fs26 fc0 sc0 ls0 ws0">prepar<span class="_ _0"></span>e<span class="_ _47"> </span><span class="ff19">fork <span class="_ _9"></span>handlers <span class="_ _9"></span>ar<span class="lsf3b">ec<span class="_ _b"></span><span class="ls0">alled <span class="_ _9"></span>in <span class="_ _3"></span>the <span class="_ _9"></span>opposite <span class="_ _9"></span>order <span class="_ _3"></span>from <span class="_ _3"></span>which <span class="_ _9"></span>they <span class="_ _9"></span>wer<span class="lsc61">er<span class="_ _b"></span><span class="ls0">egister<span class="_ _0"></span>ed.</span></span></span></span></span></div><div class="t m0 x32 h49 y390b ff19 fs26 fc0 sc0 ls0 ws0">This <span class="_ _e"> </span>ordering <span class="_ _53"> </span>allows <span class="_"> </span>multiple <span class="_ _53"> </span>modules <span class="_ _e"> </span>to <span class="_ _e"> </span>register <span class="_ _e"> </span>their <span class="_ _e"> </span>own <span class="_ _e"> </span>fork <span class="_ _e"> </span>handlers <span class="_ _e"> </span>and <span class="_"> </span>still</div><div class="t m0 x32 h49 y390c ff19 fs26 fc0 sc0 ls0 ws0">honor the locking hierarchy<span class="_ _4"></span>.</div><div class="t m0 x3f h49 y390d ff19 fs26 fc0 sc0 ls0 ws0">For <span class="_ _23"></span>example, <span class="_ _23"></span>assume <span class="_ _23"></span>that <span class="_ _23"></span>module <span class="_ _23"></span>A <span class="_ _23"></span>calls <span class="_ _9"></span>functions <span class="_ _23"> </span>from <span class="_ _23"></span>module <span class="_ _23"></span>B <span class="_ _23"></span>and <span class="_ _23"></span>that <span class="_ _23"></span>each</div><div class="t m0 x32 h49 y390e ff19 fs26 fc0 sc0 ls0 ws0">module <span class="_ _3"></span>has <span class="_ _3"></span>its <span class="_ _9"></span>own <span class="_ _3"></span>set <span class="_ _3"></span>of <span class="_ _3"></span>locks.<span class="_ _5a"> </span>If <span class="_ _3"></span>the <span class="_ _3"></span>locking <span class="_ _9"></span>hierarchy <span class="_ _2"></span>is <span class="_ _3"></span>A <span class="_ _9"></span>before<span class="_ _47"> </span>B,<span class="_ _47"> </span>module <span class="_ _3"></span>B <span class="_ _3"></span>must</div><div class="t m0 x32 h4d y390f ff19 fs26 fc0 sc0 ls0 ws0">install <span class="_ _23"> </span>its <span class="_ _23"> </span>fork <span class="_ _42"> </span>handlers <span class="_ _23"> </span>befor<span class="lsa6d">em<span class="_ _43"></span><span class="ls0">odule <span class="_ _23"> </span>A.<span class="_ _51"> </span>When <span class="_ _42"> </span>the <span class="_ _23"></span>parent <span class="_ _23"></span>calls<span class="_ _35"> </span><span class="ff1a">fork</span><span class="lsa6d">,t<span class="_ _43"></span><span class="ls0">he <span class="_ _23"> </span>following</span></span></span></span></div><div class="t m0 x32 h49 y3910 ff19 fs26 fc0 sc0 ls0 ws0">steps ar<span class="lsd3">et<span class="_ _4f"></span><span class="ls0">aken, assuming that the child process runs befor<span class="_ _0"></span><span class="lsd3">et<span class="_ _d"></span><span class="ls0">he parent:</span></span></span></span></div><div class="t m0 x3f h4a y3911 ff19 fs26 fc0 sc0 ls0 ws0">1. <span class="_ _51"> </span>The<span class="_ _35"> </span><span class="ff1b">pr<span class="_ _0"></span>epare<span class="_ _45"> </span><span class="ff19">fork <span class="_ _23"></span>handler <span class="_ _23"></span>from <span class="_ _9"></span>module <span class="_ _23"></span>A <span class="_ _23"></span>is <span class="_ _23"></span>called <span class="_ _9"></span>to <span class="_ _23"> </span>acquir<span class="ls9c4">ea<span class="_ _43"></span><span class="ls0">ll <span class="_ _23"> </span>of <span class="_ _23"> </span>module <span class="_ _23"></span>A<span class="_ _6"></span>’s</span></span></span></span></div><div class="t m0 x41 h49 y3912 ff19 fs26 fc0 sc0 ls0 ws0">locks.</div><div class="t m0 x3f h4a y3913 ff19 fs26 fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>The<span class="_ _35"> </span><span class="ff1b">prepar<span class="_ _0"></span>e<span class="_ _35"> </span><span class="ff19">fork <span class="_ _23"> </span>handler <span class="_ _42"> </span>from <span class="_ _9"></span>module <span class="_ _42"> </span>B <span class="_ _23"> </span>is <span class="_ _42"> </span>called <span class="_ _23"></span>to <span class="_ _23"> </span>acquir<span class="lsf3c">ea<span class="_ _43"></span><span class="ls0">ll <span class="_ _23"> </span>of <span class="_ _42"> </span>module <span class="_ _23"> </span>B’s</span></span></span></span></div><div class="t m0 x41 h49 y3914 ff19 fs26 fc0 sc0 ls0 ws0">locks.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
