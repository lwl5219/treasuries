<div id="pfcf" class="pf w4 h1f" data-page-no="cf"><div class="pc pccf w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bgcf.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>5.14<span class="_ _1e8"> </span>Memory <span class="_"> </span>Streams<span class="_ _1b"> </span><span class="ff18">173</span></div><div class="t m0 x8a h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">memset(buf, ’c’, BSZ-2);</div><div class="t m0 x8a h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">buf[BSZ-2] = ’\0’;</div><div class="t m0 x8a h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">buf[BSZ-1] = ’X’;</div><div class="t m0 x8a h57 y801 ff1a fs2d fc0 sc0 ls0 ws0">fprintf(fp, &quot;hello, world&quot;);</div><div class="t m0 x8a h57 y802 ff1a fs2d fc0 sc0 ls0 ws0">fclose(fp);</div><div class="t m0 x8a h57 y803 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;after fclose: %s\n&quot;, buf);</div><div class="t m0 x8a h57 y804 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;len of string in buf = %ld\n&quot;, (long)strlen(buf));</div><div class="t m0 x8a h57 y16df ff1a fs2d fc0 sc0 ls0 ws0">return(0);</div><div class="t m0 x32 h57 y16e0 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x10d h2d y17db ff18 fs10 fc0 sc0 ls0 ws0">Figure 5.15<span class="_ _5a"> </span><span class="ff19">Investigate memory stream write behavior</span></div><div class="t m0 x32 h49 y17dc ff19 fs26 fc0 sc0 ls0 ws0">When we run the pr<span class="_ _0"></span>ogram on Linux, we get the following:</div><div class="t m0 x3f h4e y17dd ff1a fs28 fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x1cd hc4 y17de ff1b fs28 fc0 sc0 ls0 ws0">overwrite the buffer with a’<span class="_ _1"></span>s</div><div class="t m0 x3f h4e y17df ff1a fs28 fc0 sc0 ls0 ws0">initial buffer contents:<span class="_ _186"> </span>fmemopen<span class="_"> </span><span class="ff1b">places a null byte at beginning of buffer</span></div><div class="t m0 x3f h4e y17e0 ff1a fs28 fc0 sc0 ls0 ws0">before flush:<span class="_ _1e9"> </span><span class="ff1b">buffer is unchanged until stream is ﬂushed</span></div><div class="t m0 x3f h4e y17e1 ff1a fs28 fc0 sc0 ls0 ws0">after fflush: hello, world</div><div class="t m0 x3f h4e y17e2 ff1a fs28 fc0 sc0 ls0 ws0">len of string in buf = 12<span class="_ _b7"> </span><span class="ff1b">null byte added to end of string</span></div><div class="t m0 x1cd hc4 y17e3 ff1b fs28 fc0 sc0 ls0 ws0">now overwrite the buffer with b’<span class="_ _1"></span>s</div><div class="t m0 x3f h4e y17e4 ff1a fs28 fc0 sc0 ls0 ws0">after <span class="_"> </span>fseek:<span class="_"> </span>bbbbbbbbbbbbhello, world<span class="_ _16e"> </span>fseek<span class="_"> </span><span class="ff1b">causes ﬂush</span></div><div class="t m0 x3f h4e y17e5 ff1a fs28 fc0 sc0 ls0 ws0">len of string in buf = 24<span class="_ _b7"> </span><span class="ff1b">null byte appended again</span></div><div class="t m0 x1cd hc4 y17e6 ff1b fs28 fc0 sc0 ls0 ws0">now overwrite the buffer with c’<span class="_ _1"></span>s</div><div class="t m0 x3f h4e y17e7 ff1a fs28 fc0 sc0 ls0 ws0">after fclose: hello, worldcccccccccccccccccccccccccccccccccc</div><div class="t m0 x3f h4e y17e8 ff1a fs28 fc0 sc0 ls0 ws0">len of string in buf = 46<span class="_ _b7"> </span><span class="ff1b">no null byte appended</span></div><div class="t m0 x32 h49 y17e9 ff19 fs26 fc0 sc0 ls0 ws0">This <span class="_ _2"></span>example <span class="_ _3"></span>shows <span class="_ _2"></span>the <span class="_ _3"></span>policy <span class="_ _2"></span>for <span class="_ _3"></span>ﬂushing <span class="_ _2"></span>memory <span class="_ _3"></span>streams <span class="_ _2"></span>and <span class="_ _2"></span>appending <span class="_ _3"></span>null <span class="_ _2"></span>bytes.</div><div class="t m0 x32 h49 y17ea ff19 fs26 fc0 sc0 ls742 ws0">An<span class="_ _c"></span><span class="ls0">ull <span class="_ _53"> </span>byte <span class="_ _42"> </span>is <span class="_ _53"> </span>appended <span class="_ _53"> </span>automatically <span class="_ _42"> </span>whenever <span class="_ _53"> </span>we <span class="_ _53"> </span>write <span class="_ _42"> </span>to <span class="_ _53"> </span>a <span class="_ _53"> </span>memory <span class="_ _42"> </span>stream <span class="_ _42"> </span>and</span></div><div class="t m0 x32 h49 y17eb ff19 fs26 fc0 sc0 ls0 ws0">advance <span class="_ _3"></span>the <span class="_ _3"></span>stream’s <span class="_ _3"></span>notion <span class="_ _9"></span>of <span class="_ _3"></span>the <span class="_ _3"></span>size <span class="_ _9"></span>of <span class="_ _3"></span>the <span class="_ _9"></span>stream’s <span class="_ _2"></span>contents <span class="_ _9"></span>(as <span class="_ _3"></span>opposed <span class="_ _9"></span>to <span class="_ _3"></span>the <span class="_ _3"></span>size</div><div class="t m0 x32 h49 y17ec ff19 fs26 fc0 sc0 ls0 ws0">of <span class="_ _23"></span>the <span class="_ _9"></span>buffer<span class="_ _6"></span><span class="ls743">,w<span class="_ _b"></span><span class="ls0">hich <span class="_ _23"></span>is <span class="_ _9"></span>ﬁxed).<span class="_ _51"> </span>The <span class="_ _23"></span>size <span class="_ _23"></span>of <span class="_ _9"></span>the <span class="_ _23"> </span>stream’s <span class="_ _9"></span>contents <span class="_ _23"> </span>is <span class="_ _23"></span>determined <span class="_ _23"></span>by <span class="_ _23"></span>how</span></span></div><div class="t m0 x32 h49 y17ed ff19 fs26 fc0 sc0 ls0 ws0">much we write to it.</div><div class="t m0 x76 h2d y17ee ff19 fs10 fc0 sc0 ls0 ws0">Of <span class="_ _23"> </span>the <span class="_ _42"> </span>four <span class="_ _23"> </span>platforms <span class="_ _42"> </span>covered <span class="_ _23"> </span>in <span class="_ _23"> </span>this <span class="_ _42"> </span>book, <span class="_ _23"> </span>only <span class="_ _42"> </span>Linux <span class="_ _23"> </span>3.2.0 <span class="_ _42"> </span>provides <span class="_ _23"> </span>support <span class="_ _23"> </span>for <span class="_ _42"> </span>memory</div><div class="t m0 x76 h2d y17ef ff19 fs10 fc0 sc0 ls0 ws0">streams. <span class="_ _35"> </span>This<span class="_ _35"> </span>is <span class="_"> </span>a <span class="_"> </span>case <span class="_"> </span>of <span class="_"> </span>the <span class="_"> </span>implementations <span class="_"> </span>not <span class="_"> </span>having <span class="_"> </span>caught <span class="_"> </span>up <span class="_"> </span>yet <span class="_"> </span>with <span class="_"> </span>the <span class="_"> </span>latest</div><div class="t m0 x76 h2d y17f0 ff19 fs10 fc0 sc0 ls0 ws0">standards, and will change with time.</div><div class="t m0 x3f h55 y17f1 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _44"> </span>other <span class="_ _4b"> </span>two <span class="_ _44"> </span>functions <span class="_ _4b"> </span>that <span class="_ _4b"> </span>can <span class="_ _44"> </span>be <span class="_ _4b"> </span>used <span class="_ _44"> </span>to <span class="_ _4b"> </span>create <span class="_ _44"> </span>a <span class="_ _4b"> </span>memory <span class="_ _44"> </span>stream <span class="_ _44"> </span>are</div><div class="t m0 x32 h54 y17f2 ff1a fs2c fc0 sc0 ls0 ws0">open_memstream<span class="_ _80"> </span><span class="ff19">and<span class="_"> </span></span>open_wmemstream<span class="ff19">.</span></div><div class="t m0 x3f h5d y17f3 ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;stdio.h&gt;</div><div class="t m0 x3f h5d y17f4 ff1a fs2f fc0 sc0 ls0 ws0">FILE *open_memstream(char **<span class="ff1b">bufp</span><span class="ls395">,s<span class="_ _1d"></span><span class="ls0">ize_t *<span class="ff1b">sizep</span>);</span></span></div><div class="t m0 x3f h5d y17f5 ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;wchar.h&gt;</div><div class="t m0 x3f h5d y17f6 ff1a fs2f fc0 sc0 ls0 ws0">FILE *open_wmemstream(wchar_t **<span class="ff1b">bufp</span><span class="ls395">,s<span class="_ _1d"></span><span class="ls0">ize_t *<span class="ff1b">sizep</span>);</span></span></div><div class="t m0 x18c h5d y17f7 ff19 fs2f fc0 sc0 ls0 ws0">Both return: str<span class="_ _0"></span>eam pointer if OK,<span class="_"> </span><span class="ff1a">NULL<span class="_ _e"> </span></span>on error</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
