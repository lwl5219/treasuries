<div id="pf1d6" class="pf w4 h1f" data-page-no="1d6"><div class="pc pc1d6 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1d6.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">436<span class="_ _1b"> </span><span class="ff19">Thread <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _177"> </span>Chapter<span class="_ _44"> </span>12</span></div><div class="t m0 x219 h52 y2ddc ff1f fs2a fc0 sc0 ls0 ws0">main</div><div class="t m0 x21a h5e y3653 ff1a fs10 fc0 sc0 ls0 ws0">func1(x)</div><div class="t m0 x21a h4f y3654 ff1a fs11 fc0 sc0 ls0 ws0">func2(x)</div><div class="t m0 x72 h6d y3655 ff1f fs12 fc0 sc0 ls0 ws0">func1</div><div class="t m0 xae h63 y3656 ff1a fs13 fc0 sc0 ls0 ws0">pthread_mutex_lock(x-&gt;lock)</div><div class="t m0 x1dd h6f y3657 ff1a fs14 fc0 sc0 ls0 ws0">func2_locked(x)</div><div class="t m0 x6 h66 y3658 ff1a fs15 fc0 sc0 ls0 ws0">pthread_mutex_unlock(x-&gt;lock)</div><div class="t m0 x74 h70 y3659 ff1f fs16 fc0 sc0 ls0 ws0">func2</div><div class="t m0 x5b h70 y366f ff1a fs16 fc0 sc0 ls0 ws0">pthread_mutex_lock(x-&gt;lock)</div><div class="t m0 x18c h70 y3670 ff1a fs16 fc0 sc0 ls0 ws0">func2_locked(x)</div><div class="t m0 xff h70 y3671 ff1a fs16 fc0 sc0 ls0 ws0">pthread_mutex_unlock(x-&gt;lock)</div><div class="t m0 x10e h71 y365a ff1f fs36 fc0 sc0 ls0 ws0">func2_locked</div><div class="t m0 x12b h34 y3672 ff18 fs17 fc0 sc0 ls0 ws0">Figure 12.7<span class="_ _5a"> </span><span class="ff19 ls9b9">Av<span class="_ _9"></span><span class="ls0">oiding a recursive locking opportunity</span></span></div><div class="t m0 x35 h144 y3673 ff16 fs6e fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 hcd y3674 ff19 fs6e fc0 sc0 ls0 ws0">The <span class="_ _9"></span>program <span class="_ _23"></span>in <span class="_ _9"></span>Figur<span class="lseb3">e1<span class="_ _b"></span><span class="ls0">2.8 <span class="_ _9"></span>illustrates <span class="_ _23"></span>another <span class="_ _9"></span>situation <span class="_ _23"> </span>in <span class="_ _23"></span>which <span class="_ _9"></span>a <span class="_ _23"> </span>recursive <span class="_ _9"></span>mutex <span class="_ _23"></span>is</span></span></div><div class="t m0 x32 hcd y3675 ff19 fs6e fc0 sc0 ls0 ws0">necessary<span class="_ _4"></span><span class="lseb4">.H<span class="_ _5d"></span><span class="ls0">ere, <span class="_"> </span>we <span class="_"> </span>have <span class="_"> </span>a <span class="_ _e"> </span>‘‘timeout’<span class="_ _1"></span><span class="lseb5">’f<span class="_ _4a"></span><span class="ls0">unction <span class="_"> </span>that <span class="_"> </span>allows <span class="_"> </span>us <span class="_"> </span>to <span class="_"> </span>schedule <span class="_ _e"> </span>another</span></span></span></span></div><div class="t m0 x32 hcd y3676 ff19 fs6e fc0 sc0 ls0 ws0">function to be <span class="_ _2"></span>run at some time <span class="_ _2"></span>in the <span class="_ _2"></span>future. <span class="_"> </span>Assuming<span class="_"> </span>that threads are<span class="_"> </span>an<span class="_"> </span>inexpensive</div><div class="t m0 x32 hcd y3677 ff19 fs6e fc0 sc0 lsd14 ws0">re<span class="ls0">source, <span class="_ _9"></span>we <span class="_ _23"></span>can <span class="_ _9"></span>create <span class="_ _9"></span>a <span class="_ _9"></span>thread <span class="_ _9"></span>for <span class="_ _9"></span>each <span class="_ _23"></span>pending <span class="_ _9"></span>timeout.<span class="_ _5a"> </span>The <span class="_ _23"></span>thread <span class="_ _9"></span>waits <span class="_ _9"></span>until <span class="_ _9"></span>the</span></div><div class="t m0 x32 hcd y3678 ff19 fs6e fc0 sc0 ls0 ws0">time has been reached, and then it calls the function we’ve r<span class="_ _0"></span>equested.</div><div class="t m0 x3f hcd y3679 ff19 fs6e fc0 sc0 ls0 ws0">The <span class="_ _23"></span>problem <span class="_ _9"></span>arises <span class="_ _23"> </span>when <span class="_ _42"> </span>we <span class="_ _23"></span>can’t <span class="_ _23"></span>create <span class="_ _9"></span>a <span class="_ _23"> </span>thread <span class="_ _23"></span>or <span class="_ _23"></span>when <span class="_ _23"></span>the <span class="_ _23"> </span>scheduled <span class="_ _23"> </span>time <span class="_ _23"> </span>to</div><div class="t m0 x32 hcd y367a ff19 fs6e fc0 sc0 lseb6 ws0">ru<span class="lseb7">nt<span class="_ _4a"></span><span class="ls0">he <span class="_"> </span>function <span class="_"> </span>has <span class="_"> </span>already <span class="_"> </span>passed.<span class="_ _60"> </span>In <span class="_ _66"> </span>these <span class="_ _66"> </span>cases, <span class="_"> </span>we <span class="_ _66"> </span>simply <span class="_ _66"> </span>call <span class="_"> </span>the <span class="_ _66"> </span>requested</span></span></div><div class="t m0 x32 hcd y367b ff19 fs6e fc0 sc0 ls0 ws0">function <span class="_ _9"></span>now<span class="_ _6"></span><span class="lseb8">,f<span class="_ _b"></span><span class="lsd14">ro<span class="lseb8">mt<span class="_ _8"></span><span class="ls0">he <span class="_ _9"></span>current <span class="_ _3"></span>context.<span class="_ _5a"> </span>Since <span class="_ _9"></span>the <span class="_ _9"></span>function <span class="_ _23"></span>acquir<span class="_ _0"></span>es <span class="_ _9"></span>the <span class="_ _9"></span>same <span class="_ _9"></span>lock <span class="_ _9"></span>that</span></span></span></span></div><div class="t m0 x32 hcd y367c ff19 fs6e fc0 sc0 ls0 ws0">we currently hold, a deadlock will occur unless the lock is r<span class="_ _0"></span>ecursive.</div><div class="t m0 x32 h110 y367d ff1a fs92 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h110 y367e ff1a fs92 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h110 y367f ff1a fs92 fc0 sc0 ls0 ws0">#include &lt;time.h&gt;</div><div class="t m0 x32 h110 y3680 ff1a fs92 fc0 sc0 ls0 ws0">#include &lt;sys/time.h&gt;</div><div class="t m0 x32 h110 y3681 ff1a fs92 fc0 sc0 ls0 ws0">extern int makethread(void *(*)(void *), void *);</div><div class="t m0 x32 h110 y3682 ff1a fs92 fc0 sc0 ls0 ws0">struct to_info {</div><div class="t m0 x8a h110 y3683 ff1a fs92 fc0 sc0 ls0 ws0">void <span class="_ _176"> </span>(*to_fn)(void<span class="_"> </span>*); /* function */</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
