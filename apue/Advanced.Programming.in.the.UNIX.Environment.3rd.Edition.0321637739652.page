<div id="pf28c" class="pf w4 h1f" data-page-no="28c"><div class="pc pc28c w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg28c.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">618<span class="_ _1b"> </span><span class="ff19">Network <span class="_"> </span>IPC: <span class="_"> </span>Sockets<span class="_ _2c6"> </span>Chapter <span class="_"> </span>16</span></div><div class="t m0 x1f h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">exit(1);</div><div class="t m0 x9d h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9d h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0) {</div><div class="t m0 x1f h57 y801 ff1a fs2d fc0 sc0 ls0 ws0">syslog(LOG_ERR, &quot;ruptimed: fork error: %s&quot;,</div><div class="t m0 xae h57 y802 ff1a fs2d fc0 sc0 ls0 ws0">strerror(errno));</div><div class="t m0 x1f h57 y803 ff1a fs2d fc0 sc0 ls0 ws0">exit(1);</div><div class="t m0 x9d h57 y804 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid == 0) {<span class="_ _3a"> </span>/* child */</span></div><div class="t m0 x1f h57 y805 ff1a fs2d fc0 sc0 ls0 ws0">/*</div><div class="t m0 xb1 h57 y806 ff1a fs2d fc0 sc0 ls15c ws0">*T<span class="_ _1d"></span><span class="ls0">he parent called daemonize (Figure 13.1), so</span></div><div class="t m0 xb1 h57 y807 ff1a fs2d fc0 sc0 ls15c ws0">*S<span class="_ _1d"></span><span class="ls0">TDIN_FILENO, STDOUT_FILENO, and STDERR_FILENO</span></div><div class="t m0 xb1 h57 y808 ff1a fs2d fc0 sc0 ls15c ws0">*a<span class="_ _1d"></span><span class="ls0">re already open to /dev/null.<span class="_ _3a"> </span>Thus, the call to</span></div><div class="t m0 xb1 h57 y809 ff1a fs2d fc0 sc0 ls15c ws0">*c<span class="_ _1d"></span><span class="ls0">lose doesn’t need to be protected by checks that</span></div><div class="t m0 xb1 h57 y80a ff1a fs2d fc0 sc0 ls15c ws0">*c<span class="_ _1d"></span><span class="ls0">lfd isn’t already equal to one of these values.</span></div><div class="t m0 xb1 h57 y80b ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x1f h57 y80c ff1a fs2d fc0 sc0 ls0 ws0">if (dup2(clfd, STDOUT_FILENO) != STDOUT_FILENO ||</div><div class="t m0 xae h57 y80d ff1a fs2d fc0 sc0 ls0 ws0">dup2(clfd, STDERR_FILENO) != STDERR_FILENO) {</div><div class="t m0 x1ca h57 y80e ff1a fs2d fc0 sc0 ls0 ws0">syslog(LOG_ERR, &quot;ruptimed: unexpected error&quot;);</div><div class="t m0 x1ca h57 y80f ff1a fs2d fc0 sc0 ls0 ws0">exit(1);</div><div class="t m0 x1f h57 y810 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x1f h57 y811 ff1a fs2d fc0 sc0 ls0 ws0">close(clfd);</div><div class="t m0 x1f h57 y812 ff1a fs2d fc0 sc0 ls0 ws0">execl(&quot;/usr/bin/uptime&quot;, &quot;uptime&quot;, (char *)0);</div><div class="t m0 x1f h57 y813 ff1a fs2d fc0 sc0 ls0 ws0">syslog(LOG_ERR, &quot;ruptimed: unexpected return from exec: %s&quot;,</div><div class="t m0 xae h57 y814 ff1a fs2d fc0 sc0 ls0 ws0">strerror(errno));</div><div class="t m0 x9d h57 y815 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse {<span class="_ _186"> </span>/* parent */</span></div><div class="t m0 x1f h57 y816 ff1a fs2d fc0 sc0 ls0 ws0">close(clfd);</div><div class="t m0 x1f h57 y817 ff1a fs2d fc0 sc0 ls0 ws0">waitpid(pid, &amp;status, 0);</div><div class="t m0 x9d h57 y818 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y819 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y81a ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y3427 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y4a06 ff1a fs2d fc0 sc0 ls0 ws0">main(int argc, char *argv[])</div><div class="t m0 x32 h57 y4a07 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y4214 ff1a fs2d fc0 sc0 ls0 ws0">struct addrinfo *ailist, *aip;</div><div class="t m0 x8a h57 y4215 ff1a fs2d fc0 sc0 ls0 ws0">struct addrinfo hint;</div><div class="t m0 x8a h57 y4216 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>sockfd,<span class="_"> </span>err, n;</div><div class="t m0 x8a h57 y4217 ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _bd"> </span>*host;</div><div class="t m0 x8a h57 y326d ff1a fs2d fc0 sc0 ls0 ws0">if (argc != 1)</div><div class="t m0 x9d h57 y326e ff1a fs2d fc0 sc0 ls0 ws0">err_quit(&quot;usage: ruptimed&quot;);</div><div class="t m0 x8a h57 y326f ff1a fs2d fc0 sc0 ls0 ws0">if ((n = sysconf(_SC_HOST_NAME_MAX)) &lt; 0)</div><div class="t m0 x9d h57 y3270 ff1a fs2d fc0 sc0 ls15c ws0">n=H<span class="_ _1d"></span><span class="ls0">OST_NAME_MAX; <span class="_"> </span>/*<span class="_"> </span>best guess */</span></div><div class="t m0 x8a h57 y3271 ff1a fs2d fc0 sc0 ls0 ws0">if ((host = malloc(n)) == NULL)</div><div class="t m0 x9d h57 y3272 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;malloc error&quot;);</div><div class="t m0 x8a h57 y3273 ff1a fs2d fc0 sc0 ls0 ws0">if (gethostname(host, n) &lt; 0)</div><div class="t m0 x9d h57 y3274 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;gethostname error&quot;);</div><div class="t m0 x8a h57 y3275 ff1a fs2d fc0 sc0 ls0 ws0">daemonize(&quot;ruptimed&quot;);</div><div class="t m0 x8a h57 y3276 ff1a fs2d fc0 sc0 ls0 ws0">memset(&amp;hint, 0, sizeof(hint));</div><div class="t m0 x8a h57 y3277 ff1a fs2d fc0 sc0 ls0 ws0">hint.ai_flags = AI_CANONNAME;</div><div class="t m0 x8a h57 y4a08 ff1a fs2d fc0 sc0 ls0 ws0">hint.ai_socktype = SOCK_STREAM;</div><div class="t m0 x8a h57 y4a09 ff1a fs2d fc0 sc0 ls0 ws0">hint.ai_canonname = NULL;</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
