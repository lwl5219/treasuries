<div id="pf1bf" class="pf w4 h1f" data-page-no="1bf"><div class="pc pc1bf w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1bf.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>1<span class="_ _1"></span>1.6 <span class="_ _284"> </span>Thread <span class="_"> </span>Synchr<span class="_ _0"></span>onization<span class="_ _1b"> </span><span class="ff18">413</span></div><div class="t m0 x3f h2a y12f ff19 fsf fc0 sc0 ls0 ws0">In this example, <span class="_ _2"></span>we lock the <span class="_ _2"></span>queue’s reader–writer lock in write <span class="_ _2"></span>mode whenever we</div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">need to add a job to the queue or remove a job from the queue.<span class="_ _59"> </span>Whenever we search the</div><div class="t m0 x32 h2a y131 ff19 fsf fc0 sc0 ls0 ws0">queue, <span class="_ _42"> </span>we <span class="_ _23"> </span>grab <span class="_ _42"> </span>the <span class="_ _42"> </span>lock <span class="_ _42"> </span>in <span class="_ _23"> </span>read <span class="_ _42"> </span>mode, <span class="_ _23"> </span>allowing <span class="_ _42"> </span>all <span class="_ _42"> </span>the <span class="_ _42"> </span>worker <span class="_ _23"> </span>threads <span class="_ _42"> </span>to <span class="_ _42"> </span>search <span class="_ _23"></span>the</div><div class="t m0 x32 h2a y132 ff19 fsf fc0 sc0 ls0 ws0">queue <span class="_ _9"></span>concurrently<span class="_ _4"></span><span class="lse24">.U<span class="_ _62"></span><span class="ls0">sing <span class="_ _9"></span>a <span class="_ _9"></span>reader–writer <span class="_ _9"></span>lock <span class="_ _23"></span>will <span class="_ _9"></span>improve <span class="_ _9"></span>performance <span class="_ _9"></span>in <span class="_ _9"></span>this <span class="_ _23"></span>case</span></span></div><div class="t m0 x32 h2a y133 ff19 fsf fc0 sc0 ls0 ws0">only if threads sear<span class="_ _0"></span>ch the queue much mor<span class="_ _0"></span><span class="ls44">ef<span class="_ _d"></span><span class="ls45">re<span class="_ _2"></span><span class="ls0">quently than they add or remove jobs.</span></span></span></div><div class="t m0 x3f h2a y134 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _9"></span>worker <span class="_ _23"> </span>threads <span class="_ _9"></span>take <span class="_ _23"></span>only <span class="_ _9"></span>those <span class="_ _23"> </span>jobs <span class="_ _23"></span>that <span class="_ _9"></span>match <span class="_ _23"></span>their <span class="_ _9"></span>thread <span class="_ _23"></span>ID <span class="_ _9"></span>of<span class="ls60">ft<span class="_ _b"></span><span class="ls0">he <span class="_ _9"></span>queue.</span></span></div><div class="t m0 x32 h2a y135 ff19 fsf fc0 sc0 ls0 ws0">Since the <span class="_ _2"></span>job <span class="_ _2"></span>structures ar<span class="ls74f">eu<span class="_ _4f"></span><span class="ls0">sed <span class="_ _2"></span>only <span class="_ _2"></span>by <span class="_ _2"></span>one <span class="_ _2"></span>thread at <span class="_ _2"></span>a <span class="_ _2"></span>time, <span class="_ _2"></span>they <span class="_ _2"></span>don’t <span class="_ _2"></span>need <span class="_ _2"></span>any <span class="_ _2"></span>extra</span></span></div><div class="t m0 x32 h2a y136 ff19 fsf fc0 sc0 ls0 ws0">locking.</div><div class="t m0 x32 h4b y342d ff16 fs27 fc0 sc0 ls0 ws0">11.6.5 <span class="_ _54"> </span>Reader–Writer<span class="_ _54"> </span>Locking <span class="_"> </span>with <span class="_"> </span>Timeouts</div><div class="t m0 x32 h49 y342e ff19 fs26 fc0 sc0 ls0 ws0">Just <span class="_ _44"> </span>as <span class="_ _44"> </span>with <span class="_ _44"> </span>mutexes, <span class="_ _44"> </span>the <span class="_ _44"> </span>Single <span class="_ _35"> </span>UNIX <span class="_ _44"> </span>Speciﬁcation <span class="_ _44"> </span>provides <span class="_ _44"> </span>functions <span class="_ _44"> </span>to <span class="_ _44"> </span>lock</div><div class="t m0 x32 h49 y342f ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">ader–writer <span class="_ _45"> </span>locks <span class="_ _45"> </span>with <span class="_ _47"> </span>a <span class="_ _45"> </span>timeout <span class="_ _45"> </span>to <span class="_ _45"> </span>give <span class="_ _47"> </span>applications <span class="_ _45"> </span>a <span class="_ _45"> </span>way <span class="_ _47"> </span>to <span class="_ _45"> </span>avoid <span class="_ _45"> </span>blocking</span></div><div class="t m0 x32 h49 y3430 ff19 fs26 fc0 sc0 ls0 ws0">indeﬁnitely <span class="_ _46"> </span>while <span class="_ _46"> </span>trying <span class="_ _61"> </span>to <span class="_ _46"> </span>acquir<span class="lse25">ear<span class="_ _49"></span><span class="ls0">eader–writer <span class="_ _59"> </span>lock.<span class="_ _5e"> </span>These <span class="_ _61"> </span>functions <span class="_ _46"> </span>are</span></span></div><div class="t m0 x32 h4d y3431 ff1a fs26 fc0 sc0 ls0 ws0">pthread_rwlock_timedrdlock<span class="_ _80"> </span><span class="ff19">and<span class="_"> </span></span>pthread_rwlock_timedwrlock<span class="ff19">.</span></div><div class="t m0 xb8 h4e y3432 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 xb8 h4e y3433 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;time.h&gt;</div><div class="t m0 xb8 h4e y3434 ff1a fs28 fc0 sc0 ls0 ws0">int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict<span class="_"> </span><span class="ff1b">rwlock</span>,</div><div class="t m0 x1df h4e y3435 ff1a fs28 fc0 sc0 ls0 ws0">const struct timespec *restrict<span class="_"> </span><span class="ff1b">tsptr</span>);</div><div class="t m0 xb8 h4e y3436 ff1a fs28 fc0 sc0 ls0 ws0">int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict<span class="_"> </span><span class="ff1b">rwlock</span>,</div><div class="t m0 x1df h4e y3437 ff1a fs28 fc0 sc0 ls0 ws0">const struct timespec *restrict<span class="_"> </span><span class="ff1b">tsptr</span>);</div><div class="t m0 xec h7c y3438 ff19 fs28 fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x3f h60 y3439 ff19 fs2c fc0 sc0 ls0 ws0">These <span class="_ _66"> </span>functions <span class="_ _47"> </span>behave <span class="_ _66"> </span>like <span class="_ _47"> </span>their <span class="_ _66"> </span>‘‘untimed’<span class="_ _1"></span><span class="lse26">’c<span class="_ _5b"></span><span class="ls0">ounterparts. <span class="_ _61"> </span>The<span class="_ _61"> </span><span class="ff1b">tsptr<span class="_ _61"> </span></span>argument</span></span></div><div class="t m0 x32 h54 y343a ff19 fs2c fc0 sc0 ls0 ws0">points <span class="_ _42"> </span>to <span class="_ _42"> </span>a<span class="_ _44"> </span><span class="ff1a">timespec<span class="_ _44"> </span></span>structur<span class="lse27">es<span class="_ _c"></span><span class="ls0">pecifying <span class="_ _53"> </span>the <span class="_ _42"> </span>time <span class="_ _42"> </span>at <span class="_ _53"> </span>which <span class="_ _42"> </span>the <span class="_ _53"> </span>thread <span class="_ _42"> </span>should <span class="_ _42"> </span>stop</span></span></div><div class="t m0 x32 h54 y343b ff19 fs2c fc0 sc0 ls0 ws0">blocking. <span class="_ _44"> </span>If<span class="_ _44"> </span>they <span class="_ _53"> </span>can’t <span class="_ _42"> </span>acquir<span class="lse28">et<span class="_ _c"></span><span class="ls0">he <span class="_ _53"> </span>lock, <span class="_ _42"> </span>these <span class="_ _53"> </span>functions <span class="_ _53"> </span>return <span class="_ _42"> </span>the<span class="_ _44"> </span><span class="ff1a">ETIMEDOUT<span class="_ _44"> </span></span>error</span></span></div><div class="t m0 x32 h54 y343c ff19 fs2c fc0 sc0 ls0 ws0">when <span class="_ _4b"> </span>the <span class="_ _44"> </span>timeout <span class="_ _4b"> </span>expires. <span class="_ _65"> </span>Like<span class="_ _65"> </span>the<span class="_ _65"> </span><span class="ff1a">pthread_mutex_timedlock<span class="_ _48"> </span></span>function, <span class="_ _4b"> </span>the</div><div class="t m0 x32 h55 y343d ff19 fs2c fc0 sc0 ls0 ws0">timeout speciﬁes an absolute time, not a relative one.</div><div class="t m0 x32 h99 y343e ff16 fs3b fc0 sc0 ls0 ws0">11.6.6 <span class="_ _54"> </span>Condition<span class="_ _54"> </span><span class="lse29">Va<span class="_ _9"></span></span>riables</div><div class="t m0 x32 h55 y343f ff19 fs2c fc0 sc0 ls0 ws0">Condition variables ar<span class="lse2a">ea<span class="_ _d"></span><span class="ls0">nother synchronization mechanism available to <span class="_ _2"></span>threads. <span class="_"> </span>These</span></span></div><div class="t m0 x32 h55 y3440 ff19 fs2c fc0 sc0 ls0 ws0">synchronization <span class="_ _42"> </span>objects <span class="_ _42"> </span>provide <span class="_ _53"> </span>a <span class="_ _42"> </span>place <span class="_ _53"> </span>for <span class="_ _53"> </span>threads <span class="_ _42"> </span>to <span class="_ _53"> </span>rendezvous. <span class="_ _44"> </span>When<span class="_ _44"> </span>used <span class="_ _53"> </span>with</div><div class="t m0 x32 h55 y3441 ff19 fs2c fc0 sc0 ls0 ws0">mutexes, <span class="_"> </span>condition <span class="_"> </span>variables <span class="_"> </span>allow <span class="_"> </span>thr<span class="_ _0"></span>eads <span class="_"> </span>to <span class="_"> </span>wait <span class="_"> </span>in <span class="_"> </span>a <span class="_"> </span>race-fr<span class="_ _0"></span>ee <span class="_"> </span>way <span class="_"> </span>for <span class="_"> </span>arbitrary</div><div class="t m0 x32 h55 y3442 ff19 fs2c fc0 sc0 ls0 ws0">conditions to occur<span class="_ _6"></span>.</div><div class="t m0 x3f h55 y3443 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _3"></span>condition <span class="_ _9"></span>itself <span class="_ _3"></span>is <span class="_ _9"></span>protected <span class="_ _3"></span>by <span class="_ _3"></span>a <span class="_ _9"></span>mutex.<span class="_ _16"> </span><span class="lse2b">At<span class="_ _8"></span><span class="ls0">hread <span class="_ _3"></span>must <span class="_ _9"></span>ﬁrst <span class="_ _3"></span>lock <span class="_ _9"></span>the <span class="_ _3"></span>mutex <span class="_ _9"></span>to</span></span></div><div class="t m0 x32 h55 y3444 ff19 fs2c fc0 sc0 ls0 ws0">change <span class="_ _3"></span>the <span class="_ _9"></span>condition <span class="_ _9"></span>state.<span class="_ _16"> </span>Other <span class="_ _9"></span>threads <span class="_ _2"></span>will <span class="_ _9"></span>not <span class="_ _9"></span>notice <span class="_ _3"></span>the <span class="_ _9"></span>change <span class="_ _3"></span>until <span class="_ _9"></span>they <span class="_ _9"></span>acquire</div><div class="t m0 x32 h55 y3445 ff19 fs2c fc0 sc0 ls0 ws0">the mutex, because the mutex must be locked to be able to evaluate the condition.</div><div class="t m0 x3f h55 y3446 ff19 fs2c fc0 sc0 ls0 ws0">Befor<span class="lse2c">eac<span class="_ _8"></span><span class="ls0">ondition <span class="_ _2"></span>variable <span class="_ _2"></span>is <span class="_ _2"></span>used, <span class="_ _2"></span>it <span class="_ _2"></span>must <span class="_ _2"></span>ﬁrst <span class="_ _2"></span>be <span class="_ _2"></span>initialized.<span class="_ _61"> </span><span class="lsced">Ac<span class="_ _4f"></span><span class="ls0">ondition <span class="_ _2"></span>variable,</span></span></span></span></div><div class="t m0 x32 h54 y3447 ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">presented by <span class="_ _2"></span>the<span class="_"> </span><span class="ff1a">pthread_cond_t<span class="_ _66"> </span></span>data type, <span class="_ _2"></span>can be <span class="_ _2"></span>initialized in <span class="_ _2"></span>two ways.<span class="_ _61"> </span><span class="ls155">We <span class="_ _53"> </span>c<span class="_ _23"></span></span>an</span></div><div class="t m0 x32 h54 y3448 ff19 fs2c fc0 sc0 ls0 ws0">assign <span class="_ _42"> </span>the <span class="_ _23"> </span>constant<span class="_ _44"> </span><span class="ff1a">PTHREAD_COND_INITIALIZER<span class="_ _35"> </span></span>to <span class="_ _42"> </span>a <span class="_ _42"> </span>statically <span class="_ _42"> </span>allocated <span class="_ _42"> </span>condition</div><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:156.492009px;bottom:984.290965px;width:268.511994px;height:19.679993px;background-color:rgba(255,255,255,0.000001);"></div></a><a class="l" href="#pf10" data-dest-detail='[16,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:156.492009px;bottom:410.190905px;width:158.556000px;height:19.679993px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
