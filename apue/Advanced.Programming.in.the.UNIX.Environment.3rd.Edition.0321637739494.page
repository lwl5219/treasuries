<div id="pf1ee" class="pf w4 h1f" data-page-no="1ee"><div class="pc pc1ee w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg1ee.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">460<span class="_ _1b"> </span><span class="ff19">Thread <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _177"> </span>Chapter<span class="_ _44"> </span>12</span></div><div class="t m0 x8a h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">int err;</div><div class="t m0 x8a h57 y1334 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;parent unlocking locks...\n&quot;);</div><div class="t m0 x8a h57 y1307 ff1a fs2d fc0 sc0 ls0 ws0">if ((err = pthread_mutex_unlock(&amp;lock1)) != 0)</div><div class="t m0 x9d h57 y1308 ff1a fs2d fc0 sc0 ls0 ws0">err_cont(err, &quot;can’t unlock lock1 in parent handler&quot;);</div><div class="t m0 x8a h57 y3508 ff1a fs2d fc0 sc0 ls0 ws0">if ((err = pthread_mutex_unlock(&amp;lock2)) != 0)</div><div class="t m0 x9d h57 y3509 ff1a fs2d fc0 sc0 ls0 ws0">err_cont(err, &quot;can’t unlock lock2 in parent handler&quot;);</div><div class="t m0 x32 h57 y350a ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y130c ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y130d ff1a fs2d fc0 sc0 ls0 ws0">child(void)</div><div class="t m0 x32 h57 y130e ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y130f ff1a fs2d fc0 sc0 ls0 ws0">int err;</div><div class="t m0 x8a h57 y3928 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;child unlocking locks...\n&quot;);</div><div class="t m0 x8a h57 y1336 ff1a fs2d fc0 sc0 ls0 ws0">if ((err = pthread_mutex_unlock(&amp;lock1)) != 0)</div><div class="t m0 x9d h57 y1337 ff1a fs2d fc0 sc0 ls0 ws0">err_cont(err, &quot;can’t unlock lock1 in child handler&quot;);</div><div class="t m0 x8a h57 y1338 ff1a fs2d fc0 sc0 ls0 ws0">if ((err = pthread_mutex_unlock(&amp;lock2)) != 0)</div><div class="t m0 x9d h57 y1339 ff1a fs2d fc0 sc0 ls0 ws0">err_cont(err, &quot;can’t unlock lock2 in child handler&quot;);</div><div class="t m0 x32 h57 y3929 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y133b ff1a fs2d fc0 sc0 ls0 ws0">void *</div><div class="t m0 x32 h57 y133c ff1a fs2d fc0 sc0 ls0 ws0">thr_fn(void *arg)</div><div class="t m0 x32 h57 y133d ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y133e ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;thread started...\n&quot;);</div><div class="t m0 x8a h57 y133f ff1a fs2d fc0 sc0 ls0 ws0">pause();</div><div class="t m0 x8a h57 y1340 ff1a fs2d fc0 sc0 ls0 ws0">return(0);</div><div class="t m0 x32 h57 y1341 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y23d7 ff1a fs2d fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h57 y23ea ff1a fs2d fc0 sc0 ls0 ws0">main(void)</div><div class="t m0 x32 h57 y23eb ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y23ec ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _186"> </span>err;</div><div class="t m0 x8a h57 y23ed ff1a fs2d fc0 sc0 ls0 ws0">pid_t <span class="_ _189"> </span>pid;</div><div class="t m0 x8a h57 y23ee ff1a fs2d fc0 sc0 ls0 ws0">pthread_t <span class="_ _d9"> </span>tid;</div><div class="t m0 x8a h57 y392a ff1a fs2d fc0 sc0 ls0 ws0">if ((err = pthread_atfork(prepare, parent, child)) != 0)</div><div class="t m0 x9d h57 y350e ff1a fs2d fc0 sc0 ls0 ws0">err_exit(err, &quot;can’t install fork handlers&quot;);</div><div class="t m0 x8a h57 y350f ff1a fs2d fc0 sc0 ls0 ws0">if ((err = pthread_create(&amp;tid, NULL, thr_fn, 0)) != 0)</div><div class="t m0 x9d h57 y3510 ff1a fs2d fc0 sc0 ls0 ws0">err_exit(err, &quot;can’t create thread&quot;);</div><div class="t m0 x8a h57 y1e00 ff1a fs2d fc0 sc0 ls0 ws0">sleep(2);</div><div class="t m0 x8a h57 y392b ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;parent about to fork...\n&quot;);</div><div class="t m0 x8a h57 y392c ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0)</div><div class="t m0 x9d h57 y392d ff1a fs2d fc0 sc0 ls0 ws0">err_quit(&quot;fork failed&quot;);</div><div class="t m0 x8a h57 y392e ff1a fs2d fc0 sc0 ls0 ws0">else if (pid == 0)<span class="_ _d9"> </span>/* child */</div><div class="t m0 x9d h57 y392f ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;child returned from fork\n&quot;);</div><div class="t m0 x8a h57 y3930 ff1a fs2d fc0 sc0 ls0 ws0">else <span class="_ _b7"> </span>/*<span class="_"> </span>parent */</div><div class="t m0 x9d h57 y3931 ff1a fs2d fc0 sc0 ls0 ws0">printf(&quot;parent returned from fork\n&quot;);</div><div class="t m0 x8a h57 y3932 ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y3933 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x1d2 h5e y3934 ff18 fs10 fc0 sc0 ls0 ws0">Figure 12.17<span class="_ _51"> </span><span class="ff1a">pthread_atfork<span class="_ _e"> </span><span class="ff19">example</span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
