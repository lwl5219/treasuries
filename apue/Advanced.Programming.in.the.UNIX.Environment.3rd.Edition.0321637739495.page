<div id="pf1ef" class="pf w4 h1f" data-page-no="1ef"><div class="pc pc1ef w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1ef.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>12.10<span class="_ _27b"> </span>Threads <span class="_"> </span>and <span class="_"> </span>I/O<span class="_ _1b"> </span><span class="ff18">461</span></div><div class="t m0 x3f h26 y12f ff19 fsf fc0 sc0 ls0 ws0">In <span class="_ _47"> </span>Figur<span class="lsaaf">e1<span class="_ _62"></span><span class="ls0">2.17, <span class="_ _47"> </span>we <span class="_ _47"> </span>deﬁne <span class="_ _47"> </span>two <span class="_ _47"> </span>mutexes,<span class="_ _61"> </span><span class="ff1a">lock1<span class="_ _61"> </span></span>and<span class="_ _16"> </span><span class="ff1a">lock2</span><span class="lsf3f">.T<span class="_ _49"></span><span class="ls0">he<span class="_ _61"> </span><span class="ff1b">prepar<span class="_ _0"></span>e<span class="_ _61"> </span><span class="ff19">fork</span></span></span></span></span></span></div><div class="t m0 x32 h2b y130 ff19 fsf fc0 sc0 ls0 ws0">handler <span class="_ _23"></span>acquires <span class="_ _23"></span>them <span class="_ _23"></span>both, <span class="_ _23"> </span>the<span class="_ _35"> </span><span class="ff1b">child<span class="_ _35"> </span></span>fork <span class="_ _23"></span>handler <span class="_ _23"> </span>releases <span class="_ _23"></span>them <span class="_ _23"> </span>in <span class="_ _23"> </span>the <span class="_ _23"> </span>context <span class="_ _42"> </span>of <span class="_ _23"></span>the</div><div class="t m0 x32 h2b y131 ff19 fsf fc0 sc0 ls0 ws0">child <span class="_ _42"> </span>process, <span class="_ _53"> </span>and <span class="_ _42"> </span>the<span class="_ _4b"> </span><span class="ff1b">parent<span class="_ _44"> </span></span>fork <span class="_ _42"> </span>handler <span class="_ _53"> </span>releases <span class="_ _42"> </span>them <span class="_ _53"> </span>in <span class="_ _53"> </span>the <span class="_ _53"> </span>context <span class="_ _42"> </span>of <span class="_ _53"> </span>the <span class="_ _53"> </span>parent</div><div class="t m0 x32 h2a y132 ff19 fsf fc0 sc0 ls0 ws0">process.</div><div class="t m0 x3f h2a y133 ff19 fsf fc0 sc0 ls0 ws0">When we run this pr<span class="_ _0"></span>ogram, we get the following output:</div><div class="t m0 x3f h57 y2280 ff1a fs2d fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x3f h57 y26a6 ff1a fs2d fc0 sc0 ls0 ws0">thread started...</div><div class="t m0 x3f h57 y26a7 ff1a fs2d fc0 sc0 ls0 ws0">parent about to fork...</div><div class="t m0 x3f h57 y26a8 ff1a fs2d fc0 sc0 ls0 ws0">preparing locks...</div><div class="t m0 x3f h57 y26a9 ff1a fs2d fc0 sc0 ls0 ws0">child unlocking locks...</div><div class="t m0 x3f h57 y26aa ff1a fs2d fc0 sc0 ls0 ws0">child returned from fork</div><div class="t m0 x3f h57 y26ab ff1a fs2d fc0 sc0 ls0 ws0">parent unlocking locks...</div><div class="t m0 x3f h57 y29d0 ff1a fs2d fc0 sc0 ls0 ws0">parent returned from fork</div><div class="t m0 x32 h26 y29d1 ff19 fsf fc0 sc0 ls0 ws0">As <span class="_ _3"></span>we <span class="_ _9"></span>can <span class="_ _3"></span>see, <span class="_ _9"></span>the<span class="_ _47"> </span><span class="ff1b">prepare<span class="_ _47"> </span></span>fork <span class="_ _3"></span>handler <span class="_ _3"></span>runs <span class="_ _9"></span>after<span class="_ _47"> </span><span class="ff1a">fork<span class="_ _45"> </span></span>is <span class="_ _3"></span>called, <span class="_ _3"></span>the<span class="_ _45"> </span><span class="ff1b">child<span class="_ _47"> </span></span>fork <span class="_ _9"></span>handler</div><div class="t m0 x32 h26 y29d2 ff19 fsf fc0 sc0 ls4e ws0">ru<span class="ls0">ns <span class="_ _42"> </span>before<span class="_ _44"> </span><span class="ff1a">fork<span class="_ _44"> </span></span><span class="ls45">re</span>turns <span class="_ _53"> </span>in <span class="_ _42"> </span>the <span class="_ _53"> </span>child, <span class="_ _42"> </span>and <span class="_ _42"> </span>the<span class="_ _44"> </span><span class="ff1b">parent<span class="_ _44"> </span></span>fork <span class="_ _42"> </span>handler <span class="_ _53"> </span>runs <span class="_ _42"> </span>before<span class="_ _35"> </span><span class="ff1a">fork</span></span></div><div class="t m0 x32 h2a y3935 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">turns in the parent.</span></div><div class="t m0 x3f h4d y266 ff19 fs26 fc0 sc0 ls0 ws0">Although <span class="_ _66"> </span>the<span class="_ _61"> </span><span class="ff1a">pthread_atfork<span class="_ _61"> </span></span>mechanism <span class="_ _47"> </span>is <span class="_ _66"> </span>intended <span class="_ _47"> </span>to <span class="_ _47"> </span>make <span class="_"> </span>locking <span class="_ _47"> </span>state</div><div class="t m0 x32 h4d y267 ff19 fs26 fc0 sc0 ls0 ws0">consistent <span class="_ _42"> </span>after <span class="_ _42"> </span>a<span class="_ _44"> </span><span class="ff1a">fork</span>,<span class="_ _35"> </span>it<span class="_ _44"> </span>has <span class="_ _42"> </span>several <span class="_ _42"> </span>drawbacks <span class="_ _42"> </span>that <span class="_ _42"> </span>make <span class="_ _42"> </span>it <span class="_ _42"> </span>usable <span class="_ _42"> </span>in <span class="_ _53"> </span>only <span class="_ _42"> </span>limited</div><div class="t m0 x32 h49 y268 ff19 fs26 fc0 sc0 ls0 ws0">circumstances:</div><div class="t m0 x3f h49 y3936 ff19 fs26 fc0 sc0 ls15d ws0">•T<span class="_ _4d"></span><span class="ls0">here<span class="_ _47"> </span>is<span class="_ _47"> </span>no<span class="_ _47"> </span>good <span class="_ _9"></span>way <span class="_ _3"></span>to <span class="_ _3"></span>reinitialize <span class="_ _3"></span>the <span class="_ _3"></span>state <span class="_ _3"></span>for <span class="_ _3"></span>mor<span class="lsf40">ec<span class="_ _8"></span><span class="ls0">omplex <span class="_ _3"></span>synchronization</span></span></span></div><div class="t m0 x15 h49 y3937 ff19 fs26 fc0 sc0 ls0 ws0">objects such as condition variables and barriers.</div><div class="t m0 x3f h49 y3938 ff19 fs26 fc0 sc0 ls15d ws0">•S<span class="_ _4d"></span><span class="ls0">ome <span class="_ _3"></span>implementations <span class="_ _3"></span>of <span class="_ _3"></span>error-checking <span class="_ _2"></span>mutexes <span class="_ _3"></span>will <span class="_ _9"></span>generate <span class="_ _3"></span>errors <span class="_ _2"></span>when <span class="_ _3"></span>the</span></div><div class="t m0 x15 h49 y3939 ff19 fs26 fc0 sc0 ls0 ws0">child fork handler tries to unlock a mutex that was locked by the parent.</div><div class="t m0 x3f h49 y393a ff19 fs26 fc0 sc0 ls15d ws0">•R<span class="_ _4d"></span><span class="ls0">ecursive mutexes <span class="_ _2"></span>can’t <span class="_ _2"></span>be <span class="_ _2"></span>cleaned <span class="_ _2"></span>up <span class="_ _2"></span>in the <span class="_ _2"></span>child <span class="_ _2"></span>fork <span class="_ _2"></span>handler<span class="_ _1"></span><span class="lsf41">,b<span class="_ _4f"></span><span class="ls0">ecause <span class="_ _2"></span>ther<span class="lsf41">ei<span class="_ _4f"></span><span class="ls0">s</span></span></span></span></span></div><div class="t m0 x15 h49 y393b ff19 fs26 fc0 sc0 ls0 ws0">no way to determine the number of times one has been locked.</div><div class="t m0 x3f h49 y393c ff19 fs26 fc0 sc0 ls15d ws0">•I<span class="_ _4d"></span><span class="lsf42">fc<span class="_ _b"></span><span class="ls0">hild <span class="_ _9"></span>processes <span class="_ _9"></span>ar<span class="lsa4a">ea<span class="_ _b"></span><span class="ls0">llowed <span class="_ _9"></span>to <span class="_ _23"></span>call <span class="_ _23"></span>only <span class="_ _23"></span>async-signal <span class="_ _23"></span>safe <span class="_ _23"></span>functions, <span class="_ _9"></span>then <span class="_ _23"> </span>the</span></span></span></span></div><div class="t m0 x15 h49 y393d ff19 fs26 fc0 sc0 ls0 ws0">child <span class="_ _23"> </span>fork <span class="_ _42"> </span>handler <span class="_ _23"> </span>shouldn’t <span class="_ _42"> </span>even <span class="_ _23"> </span>be <span class="_ _42"> </span>able <span class="_ _23"> </span>to <span class="_ _42"> </span>clean <span class="_ _23"> </span>up <span class="_ _42"> </span>synchronization <span class="_ _23"></span>objects,</div><div class="t m0 x15 h49 y393e ff19 fs26 fc0 sc0 ls0 ws0">because <span class="_ _2"></span>none <span class="_ _2"></span>of <span class="_ _2"></span>the <span class="_ _3"></span>functions <span class="_ _2"></span>that <span class="_ _2"></span>ar<span class="lsf43">eu<span class="_ _4f"></span><span class="ls0">sed <span class="_ _2"></span>to <span class="_ _2"></span>manipulate <span class="_ _2"></span>them <span class="_ _2"></span>ar<span class="lsf43">ea<span class="_ _4f"></span><span class="ls0">sync-signal</span></span></span></span></div><div class="t m0 x15 h49 y393f ff19 fs26 fc0 sc0 ls0 ws0">safe. <span class="_ _59"> </span>The<span class="_ _46"> </span>practical <span class="_"> </span>problem <span class="_"> </span>is <span class="_"> </span>that <span class="_"> </span>a <span class="_"> </span>synchr<span class="_ _0"></span>onization <span class="_"> </span>object <span class="_"> </span>might <span class="_"> </span>be <span class="_"> </span>in <span class="_"> </span>an</div><div class="t m0 x15 h4d y3940 ff19 fs26 fc0 sc0 ls0 ws0">intermediate <span class="_ _23"> </span>state <span class="_ _42"> </span>when <span class="_ _23"> </span>one <span class="_ _42"> </span>thread <span class="_ _23"></span>calls<span class="_ _35"> </span><span class="ff1a">fork</span><span class="lsf44">,b<span class="_ _43"></span><span class="ls0">ut <span class="_ _42"> </span>the <span class="_ _23"> </span>synchronization <span class="_ _23"> </span>object</span></span></div><div class="t m0 x15 h49 y3941 ff19 fs26 fc0 sc0 ls0 ws0">can’t be cleaned up unless it is in a consistent state.</div><div class="t m0 x3f h4d y3942 ff19 fs26 fc0 sc0 ls15d ws0">•I<span class="_ _4d"></span><span class="ls0">f<span class="_ _47"> </span>an<span class="_ _45"> </span>application <span class="_ _3"></span>calls<span class="_ _45"> </span><span class="ff1a">fork<span class="_ _47"> </span></span>in <span class="_ _3"></span>a <span class="_ _9"></span>signal <span class="_ _3"></span>handler <span class="_ _9"></span>(which <span class="_ _3"></span>is <span class="_ _9"></span>legal, <span class="_ _3"></span>because<span class="_ _45"> </span><span class="ff1a">fork<span class="_ _47"> </span></span>is</span></div><div class="t m0 x15 h4d y3943 ff19 fs26 fc0 sc0 ls0 ws0">async-signal <span class="_ _23"> </span>safe), <span class="_ _23"> </span>then <span class="_ _42"> </span>the <span class="_ _23"> </span>fork <span class="_ _23"> </span>handlers <span class="_ _42"> </span>register<span class="_ _1"></span>ed <span class="_ _42"> </span>by<span class="_ _35"> </span><span class="ff1a">pthread_atfork<span class="_ _35"> </span></span>can</div><div class="t m0 x15 h49 y3944 ff19 fs26 fc0 sc0 ls0 ws0">call only async-signal safe functions, or else the results ar<span class="_ _0"></span><span class="lsd3">eu<span class="_ _d"></span><span class="ls0">ndeﬁned.</span></span></div><div class="t m0 x35 h4b y3945 ff16 fs27 fc0 sc0 ls0 ws0">12.10 <span class="_ _66"> </span>Threads<span class="_ _54"> </span>and <span class="_"> </span>I/O</div><div class="t m0 x32 h4d y3946 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _47"> </span>i<span class="_ _23"></span><span class="ls0">ntr<span class="_ _0"></span>oduced <span class="_ _23"> </span>the<span class="_ _35"> </span><span class="ff1a">pread<span class="_ _35"> </span></span>and<span class="_ _44"> </span><span class="ff1a">pwrite<span class="_ _35"> </span></span>functions <span class="_ _23"> </span>in <span class="_ _23"> </span>Section <span class="_ _42"> </span>3.1<span class="_ _1"></span>1. <span class="_ _35"> </span>These<span class="_ _35"> </span>functions <span class="_ _42"> </span>are</span></div><div class="t m0 x32 h49 y3947 ff19 fs26 fc0 sc0 ls0 ws0">helpful in <span class="_ _2"></span>a <span class="_ _2"></span>multithreaded <span class="_ _2"></span>environment, because <span class="_ _2"></span>all <span class="_ _2"></span>threads in <span class="_ _2"></span>a <span class="_ _2"></span>process shar<span class="lsf45">et<span class="_ _4f"></span><span class="ls0">he <span class="_ _2"></span>same</span></span></div><div class="t m0 x32 h49 y3948 ff19 fs26 fc0 sc0 ls0 ws0">ﬁle descriptors.</div><div class="t m0 x3f h49 y3949 ff19 fs26 fc0 sc0 ls0 ws0">Consider <span class="_ _53"> </span>two <span class="_ _e"> </span>threads <span class="_ _42"> </span>reading <span class="_ _53"> </span>from <span class="_ _53"> </span>or <span class="_ _53"> </span>writing <span class="_ _e"> </span>to <span class="_ _53"> </span>the <span class="_ _e"> </span>same <span class="_ _53"> </span>ﬁle <span class="_ _e"> </span>descriptor <span class="_ _53"> </span>at <span class="_ _e"> </span>the</div><div class="t m0 x32 h49 y394a ff19 fs26 fc0 sc0 ls0 ws0">same time.</div><a class="l" href="#pf11" data-dest-detail='[17,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:80.895149px;bottom:256.848897px;width:133.368499px;height:19.680008px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
