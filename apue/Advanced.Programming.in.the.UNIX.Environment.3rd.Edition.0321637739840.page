<div id="pf348" class="pf w4 h1f" data-page-no="348"><div class="pc pc348 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg348.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">806<span class="_ _1b"> </span><span class="ff19">Communicating <span class="_"> </span>with <span class="_"> </span>a <span class="_"> </span>Network <span class="_"> </span>Printer<span class="_ _23b"> </span>Chapter <span class="_"> </span>21</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">120 <span class="_ _d9"> </span>/*</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">121 <span class="_ _68"> </span>*<span class="_"> </span>&quot;Timed&quot; read - timout specifies the number of seconds to wait</div><div class="t m0 x32 h57 y845 ff1a fs2d fc0 sc0 ls0 ws0">122 <span class="_ _68"> </span>*<span class="_"> </span>per read call before giving up, but read exactly nbytes bytes.</div><div class="t m0 x32 h57 y56c4 ff1a fs2d fc0 sc0 ls0 ws0">123 <span class="_ _68"> </span>*<span class="_"> </span>Returns number of bytes read or -1 on error.</div><div class="t m0 x32 h57 y56c5 ff1a fs2d fc0 sc0 ls0 ws0">124 <span class="_ _68"> </span>*</div><div class="t m0 x32 h57 y56c6 ff1a fs2d fc0 sc0 ls0 ws0">125 <span class="_ _68"> </span>*<span class="_"> </span>LOCKING: none.</div><div class="t m0 x32 h57 y56c7 ff1a fs2d fc0 sc0 ls0 ws0">126 <span class="_ _68"> </span>*/</div><div class="t m0 x32 h57 y56c8 ff1a fs2d fc0 sc0 ls0 ws0">127 <span class="_ _d9"> </span>ssize_t</div><div class="t m0 x32 h57 y56c9 ff1a fs2d fc0 sc0 ls0 ws0">128 <span class="_ _d9"> </span>treadn(int<span class="_"> </span>fd, void *buf, size_t nbytes, unsigned int timout)</div><div class="t m0 x32 h57 y56ca ff1a fs2d fc0 sc0 ls0 ws0">129 <span class="_ _d9"> </span>{</div><div class="t m0 x32 h57 y56cb ff1a fs2d fc0 sc0 ls0 ws0">130 <span class="_ _15"> </span>size_t<span class="_ _d9"> </span>nleft;</div><div class="t m0 x32 h57 y56cc ff1a fs2d fc0 sc0 ls0 ws0">131 <span class="_ _15"> </span>ssize_t<span class="_"> </span>nread;</div><div class="t m0 x32 h57 y5712 ff1a fs2d fc0 sc0 ls0 ws0">132 <span class="_ _15"> </span>nleft<span class="_"> </span><span class="ls15c">=n<span class="_ _1d"></span><span class="ls0">bytes;</span></span></div><div class="t m0 x32 h57 y5713 ff1a fs2d fc0 sc0 ls0 ws0">133 <span class="_ _15"> </span>while<span class="_"> </span>(nleft &gt; 0) {</div><div class="t m0 x32 h57 y5714 ff1a fs2d fc0 sc0 ls0 ws0">134 <span class="_ _186"> </span>if<span class="_"> </span>((nread = tread(fd, buf, nleft, timout)) &lt; 0) {</div><div class="t m0 x32 h57 y5715 ff1a fs2d fc0 sc0 ls0 ws0">135 <span class="_ _82"> </span>if<span class="_"> </span>(nleft == nbytes)</div><div class="t m0 x32 h57 y5716 ff1a fs2d fc0 sc0 ls0 ws0">136 <span class="_ _1e7"> </span>return(-1);<span class="_"> </span>/* error, return -1 */</div><div class="t m0 x32 h57 y5717 ff1a fs2d fc0 sc0 ls0 ws0">137 <span class="_ _82"> </span>else</div><div class="t m0 x32 h57 y5844 ff1a fs2d fc0 sc0 ls0 ws0">138 <span class="_ _1e7"> </span>break;<span class="_ _189"> </span>/* error, return amount read so far */</div><div class="t m0 x32 h57 y5845 ff1a fs2d fc0 sc0 ls0 ws0">139 <span class="_ _186"> </span>}<span class="_"> </span>else if (nread == 0) {</div><div class="t m0 x32 h57 y5846 ff1a fs2d fc0 sc0 ls0 ws0">140 <span class="_ _82"> </span>break;<span class="_ _74"> </span>/* EOF */</div><div class="t m0 x32 h57 y5847 ff1a fs2d fc0 sc0 ls0 ws0">141 <span class="_ _186"> </span>}</div><div class="t m0 x32 h57 y5ae2 ff1a fs2d fc0 sc0 ls0 ws0">142 <span class="_ _186"> </span>nleft<span class="_"> </span>-= nread;</div><div class="t m0 x32 h57 y5ae3 ff1a fs2d fc0 sc0 ls0 ws0">143 <span class="_ _186"> </span>buf<span class="_"> </span>+= nread;</div><div class="t m0 x32 h57 y5ae4 ff1a fs2d fc0 sc0 ls0 ws0">144 <span class="_ _15"> </span>}</div><div class="t m0 x32 h57 y5ae5 ff1a fs2d fc0 sc0 ls0 ws0">145 <span class="_ _15"> </span>return(nbytes<span class="_"> </span><span class="ls15c">-n<span class="_ _1d"></span><span class="ls0">left); <span class="_ _8a"> </span>/*<span class="_"> </span>return &gt;= 0 */</span></span></div><div class="t m0 x32 h57 y5ae6 ff1a fs2d fc0 sc0 ls0 ws0">146 <span class="_ _d9"> </span>}</div><div class="t m0 x32 h4d y5ae7 ff19 fs26 fc0 sc0 ls0 ws0">[120 <span class="_ _a"></span>– <span class="_ _a"></span>146]<span class="_ _65"> </span><span class="ls164">We <span class="_ _80"> </span>a<span class="_ _9"></span></span>lso <span class="_ _3"></span>provide <span class="_ _3"></span>a <span class="_ _3"></span>variation <span class="_ _3"></span>of<span class="_ _47"> </span><span class="ff1a">tread</span><span class="ls14e9">,c<span class="_ _8"></span><span class="ls0">alled<span class="_ _45"> </span><span class="ff1a">treadn</span><span class="ls14e9">,t<span class="_ _b"></span><span class="ls0">hat <span class="_ _3"></span>reads <span class="_ _3"></span>exactly <span class="_ _3"></span>the</span></span></span></span></div><div class="t m0 x11a h4d y5ae8 ff19 fs26 fc0 sc0 ls0 ws0">number <span class="_ _3"></span>of <span class="_ _9"></span>bytes <span class="_ _3"></span>requested. <span class="_ _47"> </span>This<span class="_ _45"> </span>is <span class="_ _3"></span>similar <span class="_ _3"></span>to <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">readn<span class="_ _47"> </span></span>function <span class="_ _3"></span>described</div><div class="t m0 x11a h49 y5ae9 ff19 fs26 fc0 sc0 ls0 ws0">in Section 14.7, but with the addition of the timeout parameter<span class="_ _6"></span>.</div><div class="t m0 x11a h4a y5aea ff19 fs26 fc0 sc0 ls164 ws0">To <span class="_ _66"> </span>r<span class="_ _3"></span><span class="ls0">ead <span class="_ _9"></span>exactly<span class="_ _45"> </span><span class="ff1b">nbytes<span class="_ _45"> </span></span>bytes, <span class="_ _3"></span>we <span class="_ _9"></span>have <span class="_ _9"></span>to <span class="_ _9"></span>be <span class="_ _3"></span>prepared <span class="_ _3"></span>to <span class="_ _9"></span>make <span class="_ _9"></span>multiple <span class="_ _3"></span>calls</span></div><div class="t m0 x11a h4d y5aeb ff19 fs26 fc0 sc0 ls0 ws0">to<span class="_ _59"> </span><span class="ff1a">read</span><span class="ls1757">.T<span class="_ _5d"></span><span class="ls0">he <span class="_"> </span>difﬁcult <span class="_"> </span>part <span class="_"> </span>is <span class="_"> </span>trying <span class="_"> </span>to <span class="_"> </span>apply <span class="_"> </span>a <span class="_"> </span>single <span class="_"> </span>timeout <span class="_"> </span>value <span class="_"> </span>to</span></span></div><div class="t m0 x11a h4d y5aec ff19 fs26 fc0 sc0 ls0 ws0">multiple <span class="_ _3"></span>calls <span class="_ _9"></span>to<span class="_ _45"> </span><span class="ff1a">read</span><span class="ls1758">.W<span class="_ _52"></span><span class="ls1759">ed<span class="_ _b"></span><span class="ls0">on’t <span class="_ _9"></span>want <span class="_ _3"></span>to <span class="_ _9"></span>use <span class="_ _9"></span>an <span class="_ _3"></span>alarm, <span class="_ _9"></span>because <span class="_ _3"></span>signals <span class="_ _9"></span>can</span></span></span></div><div class="t m0 x11a h49 y5aed ff19 fs26 fc0 sc0 ls0 ws0">be <span class="_ _23"> </span>messy <span class="_ _23"> </span>to <span class="_ _42"> </span>deal <span class="_ _23"></span>with <span class="_ _23"> </span>in <span class="_ _23"> </span>multithreaded <span class="_ _23"> </span>applications.<span class="_ _51"> </span><span class="ls164">We <span class="_ _45"> </span>c<span class="_ _9"></span></span>an’t <span class="_ _23"> </span>rely <span class="_ _23"></span>on <span class="_ _23"> </span>the</div><div class="t m0 x11a h4d y5aee ff19 fs26 fc0 sc0 ls0 ws0">system <span class="_ _3"></span>updating <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">timeval<span class="_ _45"> </span></span>structur<span class="_ _1"></span>e<span class="_ _45"> </span>on<span class="_ _45"> </span>return <span class="_ _3"></span>from<span class="_ _47"> </span><span class="ff1a">select<span class="_ _45"> </span></span>to <span class="_ _3"></span>indicate</div><div class="t m0 x11a h49 y5aef ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _45"> </span>amount <span class="_ _45"> </span>of <span class="_ _35"> </span>time <span class="_ _45"> </span>left, <span class="_ _45"> </span>because <span class="_ _45"> </span>many <span class="_ _35"> </span>platforms <span class="_ _45"> </span>do <span class="_ _45"> </span>not <span class="_ _45"> </span>support <span class="_ _35"> </span>this</div><div class="t m0 x11a h49 y5af0 ff19 fs26 fc0 sc0 ls0 ws0">behavior <span class="_"> </span>(Section <span class="_ _66"> </span>14.4.1).<span class="_ _50"> </span>Thus, <span class="_ _66"> </span>we <span class="_ _47"> </span>compr<span class="_ _0"></span>omise <span class="_"> </span>and <span class="_ _47"> </span>deﬁne <span class="_"> </span>the <span class="_ _66"> </span>timeout</div><div class="t m0 x11a h4d y5af1 ff19 fs26 fc0 sc0 ls0 ws0">value in <span class="_ _2"></span>this <span class="_ _2"></span>case to <span class="_ _2"></span>apply <span class="_ _2"></span>to an <span class="_ _2"></span>individual<span class="_ _66"> </span><span class="ff1a">read<span class="_ _66"> </span></span>call. <span class="_ _66"> </span>Instead<span class="_ _66"> </span>of <span class="_ _2"></span>limiting <span class="_ _2"></span>the</div><div class="t m0 x11a h49 y5af2 ff19 fs26 fc0 sc0 ls0 ws0">total amount of <span class="_ _2"></span>time we <span class="_ _2"></span>wait, it limits <span class="_ _2"></span>the amount <span class="_ _2"></span>of time <span class="_ _2"></span>we’ll wait in <span class="_ _2"></span>every</div><div class="t m0 x11a h4a y5af3 ff19 fs26 fc0 sc0 ls0 ws0">iteration <span class="_ _2"></span>of <span class="_ _2"></span>the <span class="_ _3"></span>loop.<span class="_ _61"> </span>The <span class="_ _3"></span>maximum <span class="_ _2"></span>time <span class="_ _2"></span>we <span class="_ _3"></span>can <span class="_ _2"></span>wait <span class="_ _3"></span>is <span class="_ _2"></span>bounded <span class="_ _3"></span>by <span class="_ _2"></span>(<span class="ff1b">nbytes</span></div><div class="t m0 x11a h4a y5af4 ff20 fs26 fc0 sc0 ls0 ws0">×<span class="_ _80"> </span><span class="ff1b">timout<span class="ff19 lsd3">)s<span class="_ _5"></span><span class="ls0">econds (worst case, we’ll r<span class="_ _0"></span>eceive only 1 byte at a time).</span></span></span></div><div class="t m0 x11a h4d y5af5 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _53"> </span>u<span class="_ _23"></span><span class="ls0">se<span class="_"> </span><span class="ff1a">nleft<span class="_ _66"> </span></span>to recor<span class="ls1677">dt<span class="_ _4f"></span><span class="ls0">he <span class="_ _2"></span>number of <span class="_ _2"></span>bytes remaining to <span class="_ _2"></span>be read. <span class="_"> </span>If<span class="_ _66"> </span><span class="ff1a">tread</span></span></span></span></div><div class="t m0 x11a h49 y5af6 ff19 fs26 fc0 sc0 ls0 ws0">fails <span class="_ _9"></span>and <span class="_ _3"></span>we <span class="_ _9"></span>have <span class="_ _9"></span>received <span class="_ _3"></span>data <span class="_ _9"></span>in <span class="_ _9"></span>a <span class="_ _9"></span>previous <span class="_ _3"></span>iteration, <span class="_ _9"></span>we <span class="_ _9"></span>break <span class="_ _3"></span>out <span class="_ _9"></span>of <span class="_ _9"></span>the</div><div class="t m0 x11a h4d y5af7 ff1a fs26 fc0 sc0 ls0 ws0">while<span class="_ _80"> </span><span class="ff19">loop and return the number of bytes read; otherwise, we r<span class="_ _1"></span>eturn<span class="_"> </span><span class="ff20">−</span>1.</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
