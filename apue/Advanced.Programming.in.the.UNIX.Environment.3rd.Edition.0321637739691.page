<div id="pf2b3" class="pf w4 h1f" data-page-no="2b3"><div class="pc pc2b3 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg2b3.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>17.5<span class="_ _67"> </span>An <span class="_"> </span>Open <span class="_"> </span>Server<span class="_ _6"></span><span class="ls30a">,V<span class="_ _1d"></span><span class="ls0">ersion <span class="_"> </span>1<span class="_ _1b"> </span><span class="ff18">657</span></span></span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include <span class="_ _68"> </span>&quot;opend.h&quot;</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">#include <span class="_ _68"> </span>&lt;fcntl.h&gt;</div><div class="t m0 x32 h57 y3c1 ff1a fs2d fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h57 y3c2 ff1a fs2d fc0 sc0 ls0 ws0">handle_request(char *buf, int nread, int fd)</div><div class="t m0 x32 h57 y3c3 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y3c4 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _15"> </span>newfd;</div><div class="t m0 x8a h57 y158e ff1a fs2d fc0 sc0 ls0 ws0">if (buf[nread-1] != 0) {</div><div class="t m0 x9d h57 y158f ff1a fs2d fc0 sc0 ls0 ws0">snprintf(errmsg, MAXLINE-1,</div><div class="t m0 x76 h57 y3c7 ff1a fs2d fc0 sc0 ls0 ws0">&quot;request not null terminated: %*.*s\n&quot;, nread, nread, buf);</div><div class="t m0 x9d h57 y3c8 ff1a fs2d fc0 sc0 ls0 ws0">send_err(fd, -1, errmsg);</div><div class="t m0 x9d h57 y3c9 ff1a fs2d fc0 sc0 ls0 ws0">return;</div><div class="t m0 x8a h57 y3ca ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y1cc6 ff1a fs2d fc0 sc0 ls0 ws0">if (buf_args(buf, cli_args) &lt; 0) {<span class="_ _d9"> </span>/* parse args &amp; set options */</div><div class="t m0 x9d h57 y1cc7 ff1a fs2d fc0 sc0 ls0 ws0">send_err(fd, -1, errmsg);</div><div class="t m0 x9d h57 y1cc8 ff1a fs2d fc0 sc0 ls0 ws0">return;</div><div class="t m0 x8a h57 y4588 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y4589 ff1a fs2d fc0 sc0 ls0 ws0">if ((newfd = open(pathname, oflag)) &lt; 0) {</div><div class="t m0 x9d h57 y2ad7 ff1a fs2d fc0 sc0 ls0 ws0">snprintf(errmsg, MAXLINE-1, &quot;can’t open %s: %s\n&quot;, pathname,</div><div class="t m0 x76 h57 y2ad8 ff1a fs2d fc0 sc0 ls0 ws0">strerror(errno));</div><div class="t m0 x9d h57 y2ad9 ff1a fs2d fc0 sc0 ls0 ws0">send_err(fd, -1, errmsg);</div><div class="t m0 x9d h57 y4d71 ff1a fs2d fc0 sc0 ls0 ws0">return;</div><div class="t m0 x8a h57 y4d72 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y4d73 ff1a fs2d fc0 sc0 ls0 ws0">if (send_fd(fd, newfd) &lt; 0)<span class="_ _8a"> </span>/* send the descriptor */</div><div class="t m0 x9d h57 y2c64 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;send_fd error&quot;);</div><div class="t m0 x8a h57 y2c65 ff1a fs2d fc0 sc0 ls0 ws0">close(newfd); <span class="_ _189"> </span>/*<span class="_"> </span>we’re done with descriptor */</div><div class="t m0 x32 h57 y4d74 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9f h5e y4d75 ff18 fs10 fc0 sc0 ls0 ws0">Figure 17.22<span class="_ _5a"> </span><span class="ff19">The<span class="_"> </span><span class="ff1a">handle_request<span class="_ _e"> </span></span>function, version 1</span></div><div class="t m0 x3f h49 y4d76 ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _2"></span>client’s <span class="_ _3"></span>request is <span class="_ _3"></span>a <span class="_ _2"></span>null-terminated <span class="_ _3"></span>string <span class="_ _2"></span>of <span class="_ _3"></span>white-space-separated <span class="_ _2"></span>arguments.</div><div class="t m0 x32 h4d y4d77 ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _42"> </span>function<span class="_ _35"> </span><span class="ff1a">buf_args<span class="_ _44"> </span></span>in <span class="_ _23"> </span>Figur<span class="ls13f4">e1<span class="_ _43"></span><span class="ls0">7.23 <span class="_ _23"> </span>breaks <span class="_ _42"> </span>this <span class="_ _23"> </span>string <span class="_ _42"> </span>into <span class="_ _42"> </span>a <span class="_ _42"> </span>standard<span class="_ _35"> </span><span class="ff1a">argv</span>-style</span></span></div><div class="t m0 x32 h49 y4d78 ff19 fs26 fc0 sc0 ls0 ws0">argument <span class="_ _42"> </span>list <span class="_ _42"> </span>and <span class="_ _42"> </span>calls <span class="_ _42"> </span>a <span class="_ _53"> </span>user <span class="_ _42"> </span>function <span class="_ _42"> </span>to <span class="_ _53"> </span>process <span class="_ _42"> </span>the <span class="_ _42"> </span>arguments. <span class="_ _35"> </span>W<span class="_ _6"></span><span class="ls13f5">eu<span class="_ _43"></span><span class="ls0">se <span class="_ _42"> </span>the <span class="_ _42"> </span>ISO <span class="_ _42"> </span>C</span></span></div><div class="t m0 x32 h4d y4d79 ff19 fs26 fc0 sc0 ls0 ws0">function<span class="_"> </span><span class="ff1a">strtok<span class="_ _80"> </span></span>to tokenize the string into separate arguments.</div><div class="t m0 x32 h5d y4d7a ff1a fs2f fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h5d y4d7b ff1a fs2f fc0 sc0 ls0 ws0">#define MAXARGC<span class="_ _8a"> </span>50 <span class="_"> </span>/*<span class="_"> </span>max number of arguments in buf */</div><div class="t m0 x32 h5d y4d7c ff1a fs2f fc0 sc0 ls0 ws0">#define WHITE<span class="_ _68"> </span><span class="ls395">&quot;\<span class="_ _5b"></span><span class="ls0">t\n&quot; /* white space for tokenizing arguments */</span></span></div><div class="t m0 x32 h5d y4d7d ff1a fs2f fc0 sc0 ls0 ws0">/*</div><div class="t m0 x140 h5d y4d7e ff1a fs2f fc0 sc0 ls395 ws0">*b<span class="_ _1d"></span><span class="ls0">uf[] contains white-space-separated arguments.<span class="_ _3a"> </span>We convert it to an</span></div><div class="t m0 x140 h5d y4d7f ff1a fs2f fc0 sc0 ls395 ws0">*a<span class="_ _1d"></span><span class="ls0">rgv-style array of pointers, and call the user’s function (optfunc)</span></div><div class="t m0 x140 h5d y4d80 ff1a fs2f fc0 sc0 ls0 ws0">*<span class="_"> </span>to<span class="_"> </span>process the array.<span class="_ _d9"> </span>We return -1 if there’s a problem parsing buf,</div><div class="t m0 x140 h5d y4d81 ff1a fs2f fc0 sc0 ls395 ws0">*e<span class="_ _1d"></span><span class="ls0">lse we return whatever optfunc() returns.<span class="_ _3a"> </span>Note that user’s buf[]</span></div><div class="t m0 x140 h5d y4d82 ff1a fs2f fc0 sc0 ls395 ws0">*a<span class="_ _1d"></span><span class="ls0">rray is modified (nulls placed after each token).</span></div><div class="t m0 x140 h5d y4d83 ff1a fs2f fc0 sc0 ls0 ws0">*/</div><div class="t m0 x32 h5d y4d84 ff1a fs2f fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h5d y4d85 ff1a fs2f fc0 sc0 ls0 ws0">buf_args(char *buf, int (*optfunc)(int, char **))</div><div class="t m0 x32 h5d y4d86 ff1a fs2f fc0 sc0 ls0 ws0">{</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
