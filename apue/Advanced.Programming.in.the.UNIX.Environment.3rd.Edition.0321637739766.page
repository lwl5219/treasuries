<div id="pf2fe" class="pf w4 h1f" data-page-no="2fe"><div class="pc pc2fe w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg2fe.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">732<span class="_ _1b"> </span><span class="ff19">Pseudo <span class="_"> </span>T<span class="_ _6"></span>erminals <span class="_ _23a"> </span>Chapter<span class="_ _4b"> </span>19</span></div><div class="t m0 x3f h26 y12f ff19 fsf fc0 sc0 ls0 ws0">Befor<span class="ls15b9">ec<span class="_ _7"></span><span class="ls0">alling<span class="_ _51"> </span><span class="ff1a">pty_fork</span>,<span class="_ _51"> </span>we<span class="_ _51"> </span>fetch <span class="_ _35"> </span>the <span class="_ _35"> </span>curr<span class="_ _0"></span>ent <span class="_ _35"> </span>values <span class="_ _35"> </span>for <span class="_ _35"> </span>the<span class="_ _5a"> </span><span class="ff1a">termios<span class="_ _51"> </span></span>and</span></span></div><div class="t m0 x32 h26 y130 ff1a fsf fc0 sc0 ls0 ws0">winsize<span class="_ _66"> </span><span class="ff19">structures, passing these as <span class="_ _2"></span>arguments to<span class="_ _66"> </span></span>pty_fork<span class="ff19 ls15ba">.T<span class="_ _4a"></span><span class="ls0">his way<span class="_ _4"></span><span class="ls15bb">,t<span class="_ _d"></span><span class="ls0">he <span class="_ _2"></span>PTY slave</span></span></span></span></div><div class="t m0 x32 h2a y131 ff19 fsf fc0 sc0 ls0 ws0">assumes the same initial state as the current terminal.</div><div class="t m0 x3f h26 y132 ff19 fsf fc0 sc0 ls0 ws0">After <span class="_ _2"></span>returning <span class="_ _2"></span>from<span class="_"> </span><span class="ff1a">pty_fork</span><span class="ls4f2">,t<span class="_ _4f"></span><span class="ls0">he <span class="_ _3"></span>child <span class="_ _2"></span>optionally <span class="_ _3"></span>turns <span class="_ _2"></span>of<span class="ls4f2">fe<span class="_ _8"></span><span class="ls0">choing <span class="_ _3"></span>for <span class="_ _2"></span>the <span class="_ _3"></span>slave</span></span></span></span></div><div class="t m0 x32 h26 y133 ff19 fsf fc0 sc0 ls0 ws0">PTY <span class="_ _2"></span>and <span class="_ _3"></span>then <span class="_ _2"></span>calls<span class="_ _47"> </span><span class="ff1a">execvp<span class="_ _47"> </span></span>to <span class="_ _2"></span>execute <span class="_ _2"></span>the <span class="_ _3"></span>program <span class="_ _2"></span>speciﬁed <span class="_ _2"></span>on <span class="_ _3"></span>the <span class="_ _2"></span>command <span class="_ _3"></span>line.<span class="_ _61"> </span>All</div><div class="t m0 x32 h2a y134 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">maining command</span></div><div class="t m0 x25 h2a y27e ff19 fsf fc0 sc0 ls0 ws0">-</div><div class="t m0 x1ce h2a y134 ff19 fsf fc0 sc0 ls0 ws0">line arguments ar<span class="_ _0"></span><span class="ls44">ep<span class="_ _d"></span><span class="ls0">assed as arguments to this pr<span class="_ _0"></span>ogram.</span></span></div><div class="t m0 x3f h2a y135 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _2"></span>parent <span class="_ _2"></span>optionally <span class="_ _3"></span>sets <span class="_ _3"></span>the <span class="_ _3"></span>user<span class="_ _9"></span>’s <span class="_ _2"></span>terminal <span class="_ _3"></span>to <span class="_ _3"></span>raw <span class="_ _2"></span>mode.<span class="_ _16"> </span>In <span class="_ _3"></span>this <span class="_ _3"></span>case, <span class="_ _2"></span>the <span class="_ _3"></span>parent</div><div class="t m0 x32 h26 y136 ff19 fsf fc0 sc0 ls0 ws0">also sets an <span class="_ _2"></span>exit handler to <span class="_ _2"></span>reset the terminal state when<span class="_ _66"> </span><span class="ff1a">exit<span class="_ _66"> </span></span>is called.<span class="_ _46"> </span><span class="ls5f">We <span class="_ _e"> </span>d<span class="_ _9"></span></span>escribe <span class="_ _2"></span>the</div><div class="t m0 x32 h26 y137 ff1a fsf fc0 sc0 ls0 ws0">do_driver<span class="_ _80"> </span><span class="ff19">function in the next section.</span></div><div class="t m0 x3f h26 y138 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _53"> </span>parent <span class="_ _53"> </span>then <span class="_ _e"> </span>calls <span class="_ _53"> </span>the <span class="_ _e"> </span>function<span class="_ _4b"> </span><span class="ff1a">loop<span class="_ _4b"> </span></span>(Figur<span class="ls15bc">e1<span class="_ _55"></span><span class="ls0">9.12), <span class="_ _53"> </span>which <span class="_ _e"> </span>copies <span class="_ _53"> </span>everything</span></span></div><div class="t m0 x32 h2a y139 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">ceived <span class="_"> </span>from <span class="_"> </span>the <span class="_ _e"> </span>standar</span><span class="ls645">di<span class="_ _4a"></span><span class="ls0">nput <span class="_"> </span>to <span class="_"> </span>the <span class="_ _e"> </span>PTY <span class="_"> </span>master <span class="_"> </span>and <span class="_ _e"> </span>everything <span class="_"> </span>from <span class="_ _e"> </span>the <span class="_"> </span>PTY</span></span></div><div class="t m0 x32 h2a y13a ff19 fsf fc0 sc0 ls0 ws0">master <span class="_ _42"> </span>to <span class="_ _23"> </span>standar<span class="lsd12">do<span class="_ _43"></span><span class="ls0">utput. <span class="_ _35"> </span>For<span class="_ _44"> </span>variety<span class="_ _4"></span>,<span class="_ _44"> </span>we<span class="_ _35"> </span>have <span class="_ _42"> </span>coded <span class="_ _42"> </span>it <span class="_ _23"> </span>in <span class="_ _42"> </span>two <span class="_ _42"> </span>processes <span class="_ _23"> </span>this <span class="_ _42"> </span>time,</span></span></div><div class="t m0 x32 h26 y254 ff19 fsf fc0 sc0 ls0 ws0">although a single process using<span class="_"> </span><span class="ff1a">select</span>,<span class="_"> </span><span class="ff1a">poll</span>,<span class="_"> </span>or<span class="_"> </span>multiple thr<span class="_ _0"></span>eads would also work.</div><div class="t m0 x32 h4e y4b15 ff1a fs28 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h4e y513e ff1a fs28 fc0 sc0 ls0 ws0">#define BUFFSIZE<span class="_ _15"> </span>512</div><div class="t m0 x32 h4e y5438 ff1a fs28 fc0 sc0 ls0 ws0">static void sig_term(int);</div><div class="t m0 x32 h4e y5439 ff1a fs28 fc0 sc0 ls0 ws0">static volatile sig_atomic_t<span class="_ _15"> </span>sigcaught; <span class="_"> </span>/*<span class="_"> </span>set by signal handler */</div><div class="t m0 x32 h4e y543a ff1a fs28 fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h4e y543b ff1a fs28 fc0 sc0 ls0 ws0">loop(int ptym, int ignoreeof)</div><div class="t m0 x32 h4e y543c ff1a fs28 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h4e y543d ff1a fs28 fc0 sc0 ls0 ws0">pid_t <span class="_ _d9"> </span>child;</div><div class="t m0 x8a h4e y543e ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _15"> </span>nread;</div><div class="t m0 x8a h4e y543f ff1a fs28 fc0 sc0 ls0 ws0">char <span class="_ _68"> </span>buf[BUFFSIZE];</div><div class="t m0 x8a h4e y5440 ff1a fs28 fc0 sc0 ls0 ws0">if ((child = fork()) &lt; 0) {</div><div class="t m0 x9d h4e y5441 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;fork error&quot;);</div><div class="t m0 x8a h4e y5442 ff1a fs28 fc0 sc0 ls1b6 ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (child == 0) {<span class="_ _15"> </span>/* child copies stdin to ptym */</span></div><div class="t m0 x9d h4e y5443 ff1a fs28 fc0 sc0 ls0 ws0">for ( ; ; ) {</div><div class="t m0 x1f h4e y5444 ff1a fs28 fc0 sc0 ls0 ws0">if ((nread = read(STDIN_FILENO, buf, BUFFSIZE)) &lt; 0)</div><div class="t m0 x1ca h4e y5445 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;read error from stdin&quot;);</div><div class="t m0 x1f h4e y4b25 ff1a fs28 fc0 sc0 ls0 ws0">else if (nread == 0)</div><div class="t m0 x1ca h4e y4b26 ff1a fs28 fc0 sc0 ls0 ws0">break; <span class="_ _8a"> </span>/*<span class="_"> </span>EOF on stdin means we’re done */</div><div class="t m0 x1f h4e y4b27 ff1a fs28 fc0 sc0 ls0 ws0">if (writen(ptym, buf, nread) != nread)</div><div class="t m0 x1ca h4e y4b28 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;writen error to master pty&quot;);</div><div class="t m0 x9d h4e y4b29 ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x9d h4e y5446 ff1a fs28 fc0 sc0 ls0 ws0">/*</div><div class="t m0 x175 h4e y4b2b ff1a fs28 fc0 sc0 ls0 ws0">*<span class="_"> </span>We<span class="_"> </span>always terminate when we encounter an EOF on stdin,</div><div class="t m0 x175 h4e y4b2c ff1a fs28 fc0 sc0 ls1b6 ws0">*b<span class="_ _1d"></span><span class="ls0">ut we notify the parent only if ignoreeof is 0.</span></div><div class="t m0 x175 h4e y4b2d ff1a fs28 fc0 sc0 ls0 ws0">*/</div><div class="t m0 x9d h4e y4b2e ff1a fs28 fc0 sc0 ls0 ws0">if (ignoreeof == 0)</div><div class="t m0 x1f h4e y4b2f ff1a fs28 fc0 sc0 ls0 ws0">kill(getppid(), SIGTERM);<span class="_ _68"> </span>/* notify parent */</div><div class="t m0 x9d h4e y4b30 ff1a fs28 fc0 sc0 ls0 ws0">exit(0); <span class="_ _68"> </span>/*<span class="_"> </span>and terminate; child can’t return */</div><div class="t m0 x8a h4e y4b31 ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h4e y5447 ff1a fs28 fc0 sc0 ls0 ws0">/*</div><div class="t m0 x214 h4e y4b33 ff1a fs28 fc0 sc0 ls1b6 ws0">*P<span class="_ _1d"></span><span class="ls0">arent copies ptym to stdout.</span></div><div class="t m0 x214 h4e y4b34 ff1a fs28 fc0 sc0 ls0 ws0">*/</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
