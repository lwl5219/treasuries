<div id="pf1bc" class="pf w4 h1f" data-page-no="1bc"><div class="pc pc1bc w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1bc.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">410<span class="_ _1b"> </span><span class="ff19">Threads <span class="_ _24b"> </span>Chapter<span class="_ _78"> </span><span class="ls7ed">11</span></span></div><div class="t m0 x32 h26 y12f ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">sources <span class="_ _54"> </span>for <span class="_ _54"> </span>the <span class="_ _54"> </span>reader–writer <span class="_ _51"> </span>lock,<span class="_ _93"> </span><span class="ff1a">pthread_rwlock_destroy<span class="_ _98"> </span></span>frees <span class="_ _54"> </span>those</span></div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">sources. <span class="_ _4b"> </span>If<span class="_ _4b"> </span>we <span class="_"> </span>fr<span class="_ _1"></span>ee <span class="_"> </span>the <span class="_ _53"> </span>memory <span class="_ _e"> </span>backing <span class="_ _e"> </span>a <span class="_ _e"> </span>reader–writer <span class="_ _53"> </span>lock <span class="_ _e"> </span>without <span class="_ _e"> </span>ﬁrst <span class="_ _e"> </span>calling</span></div><div class="t m0 x32 h26 y131 ff1a fsf fc0 sc0 ls0 ws0">pthread_rwlock_destroy<span class="ff19 ls44">,a<span class="_ _d"></span><span class="ls0">ny resources assigned to the lock will be lost.</span></span></div><div class="t m0 x3f h26 y132 ff19 fsf fc0 sc0 ls5f ws0">To <span class="_ _80"> </span>l<span class="_ _9"></span><span class="ls0">ock <span class="_ _3"></span>a <span class="_ _2"></span>reader–writer <span class="_ _3"></span>lock <span class="_ _2"></span>in <span class="_ _3"></span>read <span class="_ _2"></span>mode, <span class="_ _3"></span>we <span class="_ _3"></span>call<span class="_ _47"> </span><span class="ff1a">pthread_rwlock_rdlock</span><span class="lse19">.T<span class="_ _7"></span><span class="ls0">o</span></span></span></div><div class="t m0 x32 h26 y133 ff19 fsf fc0 sc0 ls0 ws0">write lock a <span class="_ _2"></span>reader–writer lock, we call<span class="_ _66"> </span><span class="ff1a">pthread_rwlock_wrlock</span><span class="ls2dd">.R<span class="_ _4a"></span><span class="ls0">egardless of how</span></span></div><div class="t m0 x32 h26 y134 ff19 fsf fc0 sc0 ls0 ws0">we lock a reader–writer lock, we can unlock it by calling<span class="_"> </span><span class="ff1a">pthread_rwlock_unlock</span>.</div><div class="t m0 x3f h57 y33ed ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y33ee ff1a fs2d fc0 sc0 ls0 ws0">int pthread_rwlock_rdlock(pthread_rwlock_t *<span class="ff1b">rwlock</span>);</div><div class="t m0 x3f h57 y33ef ff1a fs2d fc0 sc0 ls0 ws0">int pthread_rwlock_wrlock(pthread_rwlock_t *<span class="ff1b">rwlock</span>);</div><div class="t m0 x3f h57 y33f0 ff1a fs2d fc0 sc0 ls0 ws0">int pthread_rwlock_unlock(pthread_rwlock_t *<span class="ff1b">rwlock</span>);</div><div class="t m0 x7f h5f y33f1 ff19 fs2d fc0 sc0 ls0 ws0">All return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x3f h49 y33f2 ff19 fs26 fc0 sc0 ls0 ws0">Implementations <span class="_ _23"></span>might <span class="_ _23"></span>place <span class="_ _23"></span>a <span class="_ _23"></span>limit <span class="_ _23"></span>on <span class="_ _23"></span>the <span class="_ _23"></span>number <span class="_ _23"></span>of <span class="_ _23"></span>times <span class="_ _23"></span>a <span class="_ _23"></span>reader–writer <span class="_ _9"></span>lock</div><div class="t m0 x32 h49 y33f3 ff19 fs26 fc0 sc0 ls0 ws0">can <span class="_ _16"> </span>be <span class="_ _5a"> </span>locked <span class="_ _5a"> </span>in <span class="_ _5a"> </span>shared <span class="_ _16"> </span>mode, <span class="_ _5a"> </span>so <span class="_ _16"> </span>we <span class="_ _5a"> </span>need <span class="_ _5a"> </span>to <span class="_ _5a"> </span>check <span class="_ _16"> </span>the <span class="_ _5a"> </span>return <span class="_ _16"> </span>value <span class="_ _5a"> </span>of</div><div class="t m0 x32 h4d y33f4 ff1a fs26 fc0 sc0 ls0 ws0">pthread_rwlock_rdlock<span class="ff19 lse1a">.E<span class="_ _285"></span><span class="ls0">ven <span class="_ _210"> </span>though<span class="_ _1c3"> </span><span class="ff1a">pthread_rwlock_wrlock<span class="_ _179"> </span></span>and</span></span></div><div class="t m0 x32 h4d y33f5 ff1a fs26 fc0 sc0 ls0 ws0">pthread_rwlock_unlock<span class="_"> </span><span class="ff19">have <span class="_ _47"> </span>error <span class="_ _45"> </span>returns, <span class="_ _47"> </span>and <span class="_ _45"> </span>technically <span class="_ _45"> </span>we <span class="_ _45"> </span>should <span class="_ _45"> </span>always</span></div><div class="t m0 x32 h49 y33f6 ff19 fs26 fc0 sc0 ls0 ws0">check <span class="_ _2"></span>for <span class="_ _2"></span>errors <span class="_ _2"></span>when <span class="_ _2"></span>we <span class="_ _2"></span>call <span class="_ _3"></span>functions <span class="_ _2"></span>that <span class="_ _2"></span>can <span class="_ _2"></span>potentially <span class="_ _3"></span>fail, <span class="_ _2"></span>we <span class="_ _2"></span>don’t <span class="_ _3"></span>need <span class="_ _2"></span>to <span class="_ _2"></span>check</div><div class="t m0 x32 h49 y33f7 ff19 fs26 fc0 sc0 ls0 ws0">them if we design our locking properly<span class="_ _4"></span><span class="lse1b">.T<span class="_ _4a"></span><span class="ls0">he only error r<span class="_ _0"></span>eturns deﬁned ar<span class="_ _0"></span><span class="lse1c">ew<span class="_ _d"></span><span class="ls0">hen we use</span></span></span></span></div><div class="t m0 x32 h49 y33f8 ff19 fs26 fc0 sc0 ls0 ws0">them <span class="_ _42"> </span>improperly<span class="_ _4"></span><span class="lse1d">,s<span class="_ _43"></span><span class="ls0">uch <span class="_ _23"> </span>as <span class="_ _42"> </span>with <span class="_ _42"> </span>an <span class="_ _42"> </span>uninitialized <span class="_ _42"> </span>lock, <span class="_ _42"> </span>or <span class="_ _42"> </span>when <span class="_ _42"> </span>we <span class="_ _42"> </span>might <span class="_ _42"> </span>deadlock <span class="_ _42"> </span>by</span></span></div><div class="t m0 x32 h49 y33f9 ff19 fs26 fc0 sc0 ls0 ws0">attempting <span class="_ _35"> </span>to <span class="_ _35"> </span>acquir<span class="lse1e">eal<span class="_ _52"></span><span class="ls0">ock <span class="_ _35"> </span>we <span class="_ _35"> </span>already <span class="_ _35"> </span>own.<span class="_ _5c"> </span>However<span class="_ _1"></span>,<span class="_ _51"> </span>be<span class="_ _51"> </span>awar<span class="lse1f">et<span class="_ _52"></span><span class="ls0">hat <span class="_ _35"> </span>speciﬁc</span></span></span></span></div><div class="t m0 x32 h49 y33fa ff19 fs26 fc0 sc0 ls0 ws0">implementations might deﬁne additional error r<span class="_ _0"></span>eturns.</div><div class="t m0 x3f h49 y33fb ff19 fs26 fc0 sc0 ls0 ws0">The Single UNIX Speciﬁcation <span class="_ _2"></span>also deﬁnes conditional versions <span class="_ _2"></span>of the reader–writer</div><div class="t m0 x32 h49 y33fc ff19 fs26 fc0 sc0 ls0 ws0">locking primitives.</div><div class="t m0 x3f h4e y725 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h4e y33fd ff1a fs28 fc0 sc0 ls0 ws0">int pthread_rwlock_tryrdlock(pthread_rwlock_t *<span class="ff1b">rwlock</span>);</div><div class="t m0 x3f h4e y33fe ff1a fs28 fc0 sc0 ls0 ws0">int pthread_rwlock_trywrlock(pthread_rwlock_t *<span class="ff1b">rwlock</span>);</div><div class="t m0 xca h7c y33ff ff19 fs28 fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x32 h55 y3400 ff19 fs2c fc0 sc0 ls0 ws0">When <span class="_ _42"> </span>the <span class="_ _42"> </span>lock <span class="_ _42"> </span>can <span class="_ _53"> </span>be <span class="_ _42"> </span>acquired, <span class="_ _42"> </span>these <span class="_ _42"> </span>functions <span class="_ _42"> </span>return <span class="_ _42"> </span>0.<span class="_ _54"> </span>Otherwise, <span class="_ _42"> </span>they <span class="_ _42"> </span>return <span class="_ _42"> </span>the</div><div class="t m0 x32 h54 y3401 ff19 fs2c fc0 sc0 ls0 ws0">error<span class="_ _59"> </span><span class="ff1a">EBUSY</span><span class="lse20">.T<span class="_ _5d"></span><span class="ls0">hese <span class="_"> </span>functions <span class="_"> </span>can <span class="_ _66"> </span>be <span class="_ _66"> </span>used <span class="_ _66"> </span>to <span class="_ _66"> </span>avoid <span class="_"> </span>deadlocks <span class="_ _66"> </span>in <span class="_ _66"> </span>situations <span class="_ _66"> </span>where</span></span></div><div class="t m0 x32 h55 y3402 ff19 fs2c fc0 sc0 ls0 ws0">conforming to a lock hierarchy is dif<span class="_ _0"></span>ﬁcult, as we discussed pr<span class="_ _0"></span>eviously<span class="_ _4"></span>.</div><div class="t m0 x35 h61 y3403 ff16 fs2c fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h55 y3404 ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _9"></span>program <span class="_ _9"></span>in <span class="_ _9"></span>Figur<span class="lse21">e1<span class="_ _43"></span><span class="ls0">1.14 <span class="_ _9"></span>illustrates <span class="_ _23"></span>the <span class="_ _9"></span>use <span class="_ _9"></span>of <span class="_ _23"></span>reader–writer <span class="_ _9"></span>locks.<span class="_ _5a"> </span><span class="lse22">Aq<span class="_ _b"></span><span class="ls0">ueue <span class="_ _9"></span>of <span class="_ _23"></span>job</span></span></span></span></div><div class="t m0 x32 h55 y3405 ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">quests <span class="_ _53"> </span>is <span class="_ _e"> </span>protected <span class="_ _42"> </span>by <span class="_ _53"> </span>a <span class="_ _53"> </span>single <span class="_ _e"> </span>reader–writer <span class="_ _42"> </span>lock.<span class="_ _65"> </span>This <span class="_ _53"> </span>example <span class="_ _53"> </span>shows <span class="_ _e"> </span>a <span class="_ _53"> </span>possible</span></div><div class="t m0 x32 h55 y3406 ff19 fs2c fc0 sc0 ls0 ws0">implementation of Figur<span class="lse23">e1<span class="_ _b"></span><span class="ls0">1.1, <span class="_ _2"></span>whereby multiple worker threads obtain jobs assigned to</span></span></div><div class="t m0 x32 h55 y3407 ff19 fs2c fc0 sc0 ls0 ws0">them by a single master thread.</div><div class="t m0 x32 h62 y3408 ff1a fs30 fc0 sc0 ls0 ws0">#include &lt;stdlib.h&gt;</div><div class="t m0 x32 h62 y3409 ff1a fs30 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h62 y340a ff1a fs30 fc0 sc0 ls0 ws0">struct job {</div><div class="t m0 x8a h62 y340b ff1a fs30 fc0 sc0 ls0 ws0">struct job *j_next;</div><div class="t m0 x8a h62 y340c ff1a fs30 fc0 sc0 ls0 ws0">struct job *j_prev;</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
