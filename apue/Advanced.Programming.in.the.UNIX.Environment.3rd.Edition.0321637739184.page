<div id="pfb8" class="pf w4 h1f" data-page-no="b8"><div class="pc pcb8 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bgb8.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">150<span class="_ _1b"> </span><span class="ff19">Standar<span class="ls30a">dI<span class="_ _55"></span><span class="ls0">/O <span class="_"> </span>Library<span class="_ _1c9"> </span>Chapter <span class="_"> </span>5</span></span></span></div><div class="t m0 x32 h2a y12f ff19 fsf fc0 sc0 ls0 ws0">any <span class="_ _2"></span>other <span class="_ _3"></span>operation <span class="_ _3"></span>on <span class="_ _3"></span>the <span class="_ _3"></span>stream, <span class="_ _2"></span>we <span class="_ _3"></span>can <span class="_ _3"></span>change <span class="_ _3"></span>the <span class="_ _3"></span>buffering <span class="_ _2"></span>if <span class="_ _3"></span>we <span class="_ _3"></span>want <span class="_ _3"></span>to, <span class="_ _3"></span>with <span class="_ _3"></span>the</div><div class="t m0 x32 h26 y130 ff1a fsf fc0 sc0 ls0 ws0">setbuf<span class="_ _80"> </span><span class="ff19">or<span class="_"> </span></span>setvbuf<span class="_ _66"> </span><span class="ff19">functions from the pr<span class="_ _0"></span>evious section.</span></div><div class="t m0 x3f h26 y131 ff19 fsf fc0 sc0 ls0 ws0">An open stream is closed by calling<span class="_"> </span><span class="ff1a">fclose</span>.</div><div class="t m0 x3f h57 y449 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;stdio.h&gt;</div><div class="t m0 x3f h57 y1520 ff1a fs2d fc0 sc0 ls0 ws0">int fclose(FILE *<span class="ff1b">fp</span>);</div><div class="t m0 x1b4 h57 y1521 ff19 fs2d fc0 sc0 ls0 ws0">Returns: 0 if OK,<span class="_"> </span><span class="ff1a">EOF<span class="_ _e"> </span></span>on error</div><div class="t m0 x32 h49 y1522 ff19 fs26 fc0 sc0 ls0 ws0">Any <span class="_ _3"></span>buffered <span class="_ _3"></span>output <span class="_ _9"></span>data <span class="_ _9"></span>is <span class="_ _3"></span>ﬂushed <span class="_ _9"></span>befor<span class="ls685">et<span class="_ _b"></span><span class="ls0">he <span class="_ _9"></span>ﬁle <span class="_ _9"></span>is <span class="_ _3"></span>closed.<span class="_ _5a"> </span>Any <span class="_ _9"></span>input <span class="_ _9"></span>data <span class="_ _3"></span>that <span class="_ _9"></span>may</span></span></div><div class="t m0 x32 h49 y1523 ff19 fs26 fc0 sc0 ls0 ws0">be <span class="_"> </span>buf<span class="_ _1"></span>fered <span class="_"> </span>is <span class="_ _53"> </span>discarded. <span class="_ _59"> </span>If<span class="_ _59"> </span>the <span class="_"> </span>standar<span class="_ _0"></span><span class="ls686">dI<span class="_ _4a"></span><span class="ls0">/O <span class="_"> </span>library <span class="_ _e"> </span>had <span class="_"> </span>automatically <span class="_ _e"> </span>allocated <span class="_"> </span>a</span></span></div><div class="t m0 x32 h49 y1524 ff19 fs26 fc0 sc0 ls0 ws0">buffer for the str<span class="_ _0"></span>eam, that buf<span class="_ _0"></span>fer is released.</div><div class="t m0 x3f h4d y1525 ff19 fs26 fc0 sc0 ls0 ws0">When <span class="_ _2"></span>a <span class="_ _3"></span>process terminates <span class="_ _3"></span>normally<span class="_ _4"></span><span class="ls687">,e<span class="_ _4f"></span><span class="ls0">ither <span class="_ _3"></span>by <span class="_ _2"></span>calling <span class="_ _3"></span>the<span class="_ _47"> </span><span class="ff1a">exit<span class="_ _66"> </span></span>function <span class="_ _3"></span>directly <span class="_ _2"></span>or</span></span></div><div class="t m0 x32 h4d y1526 ff19 fs26 fc0 sc0 ls0 ws0">by <span class="_ _2"></span>returning <span class="_ _2"></span>from <span class="_ _2"></span>the<span class="_ _66"> </span><span class="ff1a">main<span class="_ _47"> </span></span>function, <span class="_ _2"></span>all <span class="_ _3"></span>standar<span class="ls688">dI<span class="_ _8"></span><span class="ls0">/O <span class="_ _3"></span>streams with <span class="_ _3"></span>unwritten <span class="_ _2"></span>buffered</span></span></div><div class="t m0 x32 h49 y1527 ff19 fs26 fc0 sc0 ls0 ws0">data ar<span class="lsd3">eﬂ<span class="_ _4f"></span><span class="ls0">ushed and all open standar<span class="lsd3">dI<span class="_ _d"></span><span class="ls0">/O streams ar<span class="lsd3">ec<span class="_ _4f"></span><span class="ls0">losed.</span></span></span></span></span></span></div><div class="t m0 x35 h4b y1528 ff16 fs27 fc0 sc0 ls0 ws0">5.6 <span class="_ _68"> </span>Reading<span class="_ _54"> </span>and <span class="_"> </span>Writing <span class="_"> </span>a <span class="_"> </span>Stream</div><div class="t m0 x32 h49 y1529 ff19 fs26 fc0 sc0 ls0 ws0">Once we open a stream, we can choose fr<span class="_ _0"></span>om among thr<span class="_ _0"></span>ee types of unformatted I/O:</div><div class="t m0 x3f h49 y152a ff19 fs26 fc0 sc0 ls0 ws0">1. <span class="_ _51"> </span>Character-at-a-time <span class="_ _2"></span>I/O.<span class="_ _16"> </span><span class="ls164">We <span class="_ _80"> </span>c<span class="_ _9"></span></span>an <span class="_ _3"></span>read <span class="_ _3"></span>or <span class="_ _3"></span>write <span class="_ _3"></span>one <span class="_ _2"></span>character <span class="_ _3"></span>at <span class="_ _3"></span>a <span class="_ _3"></span>time, <span class="_ _3"></span>with <span class="_ _3"></span>the</div><div class="t m0 x41 h49 y152b ff19 fs26 fc0 sc0 ls0 ws0">standar<span class="lsd3">dI<span class="_ _4f"></span><span class="ls0">/O functions handling all the buffering, if the stream is buf<span class="_ _0"></span>fer<span class="_ _0"></span>ed.</span></span></div><div class="t m0 x3f h4d y152c ff19 fs26 fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>Line-at-a-time<span class="_ _45"> </span>I/O. <span class="_ _47"> </span>If<span class="_ _45"> </span>we <span class="_ _9"></span>want <span class="_ _3"></span>to <span class="_ _9"></span>read <span class="_ _3"></span>or <span class="_ _9"></span>write <span class="_ _9"></span>a <span class="_ _9"></span>line <span class="_ _3"></span>at <span class="_ _9"></span>a <span class="_ _9"></span>time, <span class="_ _9"></span>we <span class="_ _3"></span>use<span class="_ _45"> </span><span class="ff1a">fgets</span></div><div class="t m0 x41 h4d y152d ff19 fs26 fc0 sc0 ls0 ws0">and<span class="_ _45"> </span><span class="ff1a">fputs</span><span class="ls689">.E<span class="_ _26"></span><span class="ls0">ach <span class="_ _23"> </span>line <span class="_ _23"></span>is <span class="_ _23"></span>terminated <span class="_ _9"></span>with <span class="_ _23"> </span>a <span class="_ _23"></span>newline <span class="_ _23"></span>character<span class="_ _6"></span><span class="ls68a">,a<span class="_ _b"></span><span class="ls0">nd <span class="_ _9"></span>we <span class="_ _23"> </span>have <span class="_ _23"></span>to</span></span></span></span></div><div class="t m0 x41 h4d y152e ff19 fs26 fc0 sc0 ls0 ws0">specify <span class="_ _3"></span>the <span class="_ _9"></span>maximum <span class="_ _9"></span>line <span class="_ _3"></span>length <span class="_ _9"></span>that <span class="_ _9"></span>we <span class="_ _3"></span>can <span class="_ _9"></span>handle <span class="_ _9"></span>when <span class="_ _9"></span>we <span class="_ _3"></span>call<span class="_ _45"> </span><span class="ff1a">fgets</span><span class="ls68b">.W<span class="_ _52"></span><span class="ls0">e</span></span></div><div class="t m0 x41 h49 y152f ff19 fs26 fc0 sc0 ls0 ws0">describe these two functions in Section 5.7.</div><div class="t m0 x3f h4d y1530 ff19 fs26 fc0 sc0 ls0 ws0">3. <span class="_ _51"> </span>Direct I/O.<span class="_ _16"> </span>This <span class="_ _2"></span>type <span class="_ _2"></span>of <span class="_ _2"></span>I/O <span class="_ _3"></span>is <span class="_ _2"></span>supported <span class="_ _2"></span>by <span class="_ _3"></span>the<span class="_ _66"> </span><span class="ff1a">fread<span class="_ _47"> </span></span>and<span class="_ _47"> </span><span class="ff1a">fwrite<span class="_ _66"> </span></span>functions.</div><div class="t m0 x41 h49 y1531 ff19 fs26 fc0 sc0 ls0 ws0">For <span class="_ _9"></span>each <span class="_ _23"></span>I/O <span class="_ _9"></span>operation, <span class="_ _23"></span>we <span class="_ _9"></span>read <span class="_ _9"></span>or <span class="_ _23"></span>write <span class="_ _9"></span>some <span class="_ _9"></span>number <span class="_ _23"></span>of <span class="_ _9"></span>objects, <span class="_ _23"></span>wher<span class="ls37d">ee<span class="_ _b"></span><span class="ls0">ach</span></span></div><div class="t m0 x41 h49 y1532 ff19 fs26 fc0 sc0 ls0 ws0">object <span class="_ _9"></span>is <span class="_ _9"></span>of <span class="_ _9"></span>a <span class="_ _9"></span>speciﬁed <span class="_ _9"></span>size.<span class="_ _16"> </span>These <span class="_ _9"></span>two <span class="_ _9"></span>functions <span class="_ _9"></span>ar<span class="ls68c">eo<span class="_ _b"></span><span class="ls0">ften <span class="_ _9"></span>used <span class="_ _9"></span>for <span class="_ _9"></span>binary <span class="_ _9"></span>ﬁles</span></span></div><div class="t m0 x41 h49 y1533 ff19 fs26 fc0 sc0 ls0 ws0">where<span class="_ _66"> </span>we<span class="_ _47"> </span>read <span class="_ _3"></span>or <span class="_ _3"></span>write <span class="_ _3"></span>a <span class="_ _3"></span>structur<span class="ls68d">ew<span class="_ _b"></span><span class="ls0">ith <span class="_ _3"></span>each <span class="_ _3"></span>operation.<span class="_ _16"> </span><span class="ls164">We <span class="_ _80"> </span>d<span class="_ _9"></span></span>escribe <span class="_ _3"></span>these <span class="_ _3"></span>two</span></span></div><div class="t m0 x41 h49 y1534 ff19 fs26 fc0 sc0 ls0 ws0">functions in Section 5.9.</div><div class="t m0 x38 h77 y1535 ff19 fs10 fc0 sc0 ls0 ws0">The <span class="_ _2"></span>term<span class="_ _80"> </span><span class="ff1b">direct I/O</span><span class="ls68e">,f<span class="_ _5"></span><span class="ls21d">ro<span class="_ _2"></span><span class="ls68e">mt<span class="_ _5"></span><span class="ls0">he <span class="_ _2"></span>ISO <span class="_ _2"></span>C <span class="_ _2"></span>standard, <span class="_ _2"></span>is <span class="_ _2"></span>known <span class="_ _2"></span>by <span class="_ _2"></span>many <span class="_ _2"></span>names: <span class="_ _2"></span>binary <span class="_ _2"></span>I/O,</span></span></span></span></div><div class="t m0 x38 h2d y1536 ff19 fs10 fc0 sc0 ls0 ws0">object-at-a-time <span class="_ _3"></span>I/O, <span class="_ _9"></span>recor<span class="_ _0"></span>d-oriented <span class="_ _3"></span>I/O, <span class="_ _9"></span>or <span class="_ _3"></span>structure-oriented <span class="_ _3"></span>I/O.<span class="_ _59"> </span>Don’t <span class="_ _3"></span>confuse</div><div class="t m0 x38 h5e y1537 ff19 fs10 fc0 sc0 ls0 ws0">this <span class="_ _3"></span>featur<span class="ls68f">ew<span class="_ _4f"></span><span class="ls0">ith <span class="_ _9"></span>the<span class="_ _80"> </span><span class="ff1a">O_DIRECT <span class="_ _84"></span>open<span class="_ _66"> </span><span class="ff19">ﬂag <span class="_ _3"></span>supported <span class="_ _3"></span>by <span class="_ _9"></span>FreeBSD <span class="_ _2"></span>and <span class="_ _9"></span>Linux<span class="_ _3"></span><span class="ls170">—t<span class="_ _1"></span><span class="ls0">hey</span></span></span></span></span></span></div><div class="t m0 x38 h2d y1538 ff19 fs10 fc0 sc0 ls0 ws0">ar<span class="ls136">eu<span class="_ _5"></span><span class="ls0">nrelated.</span></span></div><div class="t m0 x32 h4d y1539 ff19 fs26 fc0 sc0 ls0 ws0">(W<span class="_ _6"></span><span class="lsd3">ed<span class="_ _d"></span><span class="ls0">escribe the formatted I/O functions, such as<span class="_"> </span><span class="ff1a">printf<span class="_ _66"> </span></span>and<span class="_"> </span><span class="ff1a">scanf</span>,<span class="_"> </span>in<span class="_"> </span>Section 5.1<span class="_ _1"></span>1.)</span></span></div><div class="t m0 x35 h4c y153a ff16 fs26 fc0 sc0 ls0 ws0">Input Functions</div><div class="t m0 x32 h49 y153b ff19 fs26 fc0 sc0 ls0 ws0">Three functions allow us to r<span class="_ _0"></span>ead one character at a time.</div><div class="t m0 x3f h4e y153c ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;stdio.h&gt;</div><div class="t m0 x3f h4e y153d ff1a fs28 fc0 sc0 ls0 ws0">int getc(FILE *<span class="ff1b">fp</span>);</div><div class="t m0 x3f h4e y153e ff1a fs28 fc0 sc0 ls0 ws0">int fgetc(FILE *<span class="ff1b">fp</span>);</div><div class="t m0 x3f h4e y153f ff1a fs28 fc0 sc0 ls0 ws0">int getchar(void);</div><div class="t m0 x1e h4e y1540 ff19 fs28 fc0 sc0 ls0 ws0">All three r<span class="_ _0"></span>eturn: next character if OK,<span class="_"> </span><span class="ff1a">EOF<span class="_ _e"> </span></span>on end of ﬁle or error</div><a class="l" href="#pfe" data-dest-detail='[14,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:80.890743px;bottom:861.105022px;width:220.043602px;height:19.679993px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
