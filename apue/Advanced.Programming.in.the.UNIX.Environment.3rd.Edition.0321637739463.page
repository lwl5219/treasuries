<div id="pf1cf" class="pf w4 h1f" data-page-no="1cf"><div class="pc pc1cf w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg1cf.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>12.3<span class="_ _28f"> </span>Thread <span class="_"> </span>Attributes<span class="_ _1fb"> </span><span class="ff18">429</span></div><div class="t m0 x32 h26 y12f ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">turn <span class="_ _53"> </span>from<span class="_ _4b"> </span><span class="ff1a">pthread_attr_destroy</span><span class="lse74">,t<span class="_ _55"></span><span class="ls0">he <span class="_ _e"> </span>worst <span class="_ _53"> </span>that <span class="_ _53"> </span>can <span class="_ _53"> </span>happen <span class="_ _e"> </span>is <span class="_ _53"> </span>that <span class="_ _53"> </span>we <span class="_ _e"> </span>leak <span class="_ _53"> </span>a</span></span></span></div><div class="t m0 x32 h26 y130 ff19 fsf fc0 sc0 ls0 ws0">small <span class="_ _61"> </span>amount <span class="_ _61"> </span>of <span class="_ _61"> </span>memory <span class="_ _61"> </span>if<span class="_ _5f"> </span><span class="ff1a">pthread_attr_init<span class="_ _50"> </span></span>had <span class="_ _61"> </span>allocated <span class="_ _61"> </span>any<span class="_ _6"></span><span class="lse75">.B<span class="_ _18c"></span><span class="ls0">ut <span class="_ _61"> </span>if</span></span></div><div class="t m0 x32 h26 y131 ff1a fsf fc0 sc0 ls0 ws0">pthread_attr_init<span class="_ _50"> </span><span class="ff19">succeeded <span class="_ _16"> </span>in <span class="_ _16"> </span>initializing <span class="_ _16"> </span>the <span class="_ _16"> </span>thread <span class="_ _61"> </span>attributes <span class="_ _16"> </span>and <span class="_ _16"> </span>then</span></div><div class="t m0 x32 h26 y132 ff1a fsf fc0 sc0 ls0 ws0">pthread_attr_destroy<span class="_ _44"> </span><span class="ff19">failed <span class="_ _53"> </span>to <span class="_ _42"> </span>clean <span class="_ _53"> </span>up, <span class="_ _53"> </span>we <span class="_ _53"> </span>have <span class="_ _42"> </span>no <span class="_ _53"> </span>recovery <span class="_ _42"> </span>strategy <span class="_ _53"> </span>anyway<span class="_ _4"></span>,</span></div><div class="t m0 x32 h2a y133 ff19 fsf fc0 sc0 ls0 ws0">because <span class="_ _2"></span>the <span class="_ _2"></span>attributes <span class="_ _2"></span>structur<span class="ls79">ei<span class="_ _8"></span><span class="lse76">so<span class="_ _4f"></span><span class="ls0">paque <span class="_ _3"></span>to <span class="_ _2"></span>the <span class="_ _2"></span>application.<span class="_ _61"> </span>The <span class="_ _2"></span>only <span class="_ _2"></span>interface <span class="_ _2"></span>deﬁned</span></span></span></div><div class="t m0 x32 h26 y134 ff19 fsf fc0 sc0 ls0 ws0">to clean up the structur<span class="_ _0"></span><span class="ls44">ei<span class="_ _d"></span><span class="ls0">s<span class="_"> </span><span class="ff1a">pthread_attr_destroy</span><span class="ls44">,a<span class="_ _d"></span><span class="ls0">nd it just failed.</span></span></span></span></div><div class="t m0 x3f h49 yf13 ff19 fs26 fc0 sc0 ls0 ws0">Support <span class="_ _42"> </span>for <span class="_ _42"> </span>thread <span class="_ _42"> </span>stack <span class="_ _42"> </span>attributes <span class="_ _42"> </span>is <span class="_ _53"> </span>optional <span class="_ _42"> </span>for <span class="_ _42"> </span>a <span class="_ _53"> </span>POSIX-conforming <span class="_ _42"> </span>operating</div><div class="t m0 x32 h49 y358d ff19 fs26 fc0 sc0 ls0 ws0">system, <span class="_"> </span>but <span class="_ _66"> </span>is <span class="_ _66"> </span>required <span class="_"> </span>if <span class="_"> </span>the <span class="_ _47"> </span>system <span class="_"> </span>supports <span class="_ _66"> </span>the <span class="_ _66"> </span>XSI <span class="_ _66"> </span>option <span class="_ _66"> </span>in <span class="_ _47"> </span>the <span class="_"> </span>Single <span class="_ _66"> </span>UNIX</div><div class="t m0 x32 h49 y358e ff19 fs26 fc0 sc0 ls0 ws0">Speciﬁcation. <span class="_ _59"> </span>At<span class="_ _46"> </span>compile <span class="_"> </span>time, <span class="_"> </span>you <span class="_"> </span>can <span class="_"> </span>check <span class="_"> </span>whether <span class="_"> </span>your <span class="_"> </span>system <span class="_"> </span>supports <span class="_"> </span>each</div><div class="t m0 x32 h4d y358f ff19 fs26 fc0 sc0 ls0 ws0">thread <span class="_ _54"> </span>stack <span class="_ _48"> </span>attribute <span class="_ _65"> </span>by <span class="_ _65"> </span>using <span class="_ _48"> </span>the<span class="_ _93"> </span><span class="ff1a">_POSIX_THREAD_ATTR_STACKADDR<span class="_ _7f"> </span></span>and</div><div class="t m0 x32 h4d y3590 ff1a fs26 fc0 sc0 ls0 ws0">_POSIX_THREAD_ATTR_STACKSIZE<span class="_ _66"> </span><span class="ff19">symbols. <span class="_ _47"> </span>If<span class="_ _47"> </span>one <span class="_ _2"></span>of <span class="_ _3"></span>these <span class="_ _2"></span>symbols <span class="_ _3"></span>is <span class="_ _2"></span>deﬁned, <span class="_ _3"></span>then</span></div><div class="t m0 x32 h49 y342e ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _42"> </span>system <span class="_ _42"> </span>supports <span class="_ _53"> </span>the <span class="_ _42"> </span>corresponding <span class="_ _42"> </span>thread <span class="_ _42"> </span>stack <span class="_ _42"> </span>attribute.<span class="_ _54"> </span>Alternatively<span class="_ _4"></span><span class="lse77">,y<span class="_ _43"></span><span class="ls0">ou <span class="_ _42"> </span>can</span></span></div><div class="t m0 x32 h4d y342f ff19 fs26 fc0 sc0 ls0 ws0">check <span class="_ _45"> </span>for <span class="_ _35"> </span>support <span class="_ _45"> </span>at <span class="_ _45"> </span>runtime, <span class="_ _35"> </span>by <span class="_ _45"> </span>using <span class="_ _45"> </span>the<span class="_ _51"> </span><span class="ff1a">_SC_THREAD_ATTR_STACKADDR<span class="_"> </span></span>and</div><div class="t m0 x32 h4d y3430 ff1a fs26 fc0 sc0 ls0 ws0">_SC_THREAD_ATTR_STACKSIZE<span class="_ _80"> </span><span class="ff19">parameters to the<span class="_"> </span></span>sysconf<span class="_ _66"> </span><span class="ff19">function.</span></div><div class="t m0 x3f h4d y3431 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _4b"> </span>c<span class="_ _23"></span><span class="ls0">an <span class="_"> </span>manage <span class="_ _47"> </span>the <span class="_ _66"> </span>stack <span class="_ _47"> </span>attributes <span class="_ _66"> </span>using <span class="_ _47"> </span>the<span class="_ _61"> </span><span class="ff1a">pthread_attr_getstack<span class="_ _61"> </span></span>and</span></div><div class="t m0 x32 h4d y3591 ff1a fs26 fc0 sc0 ls0 ws0">pthread_attr_setstack<span class="_ _80"> </span><span class="ff19">functions.</span></div><div class="t m0 x3f h4e y3592 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h4e y3593 ff1a fs28 fc0 sc0 ls0 ws0">int pthread_attr_getstack(const pthread_attr_t *restrict<span class="_"> </span><span class="ff1b">attr</span>,</div><div class="t m0 x121 h4e y3594 ff1a fs28 fc0 sc0 ls0 ws0">void **restrict<span class="_"> </span><span class="ff1b">stackaddr</span>,</div><div class="t m0 x121 h4e y3595 ff1a fs28 fc0 sc0 ls0 ws0">size_t *restrict<span class="_"> </span><span class="ff1b">stacksize</span>);</div><div class="t m0 x3f h4e y3596 ff1a fs28 fc0 sc0 ls0 ws0">int pthread_attr_setstack(pthread_attr_t *<span class="ff1b">attr</span>,</div><div class="t m0 x121 h4e y3597 ff1a fs28 fc0 sc0 ls0 ws0">void *<span class="ff1b">stackaddr</span><span class="ls1b6">,s<span class="_ _1d"></span><span class="ls0">ize_t<span class="_"> </span><span class="ff1b">stacksize</span>);</span></span></div><div class="t m0 xca h7c y3598 ff19 fs28 fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><div class="t m0 x3f h55 y3599 ff19 fs2c fc0 sc0 ls6a4 ws0">Wi<span class="_ _3"></span><span class="ls0">th <span class="_ _2"></span>a <span class="_ _2"></span>process, the <span class="_ _2"></span>amount <span class="_ _2"></span>of <span class="_ _2"></span>virtual <span class="_ _2"></span>address <span class="_ _2"></span>space <span class="_ _2"></span>is <span class="_ _2"></span>ﬁxed.<span class="_ _61"> </span>Since <span class="_ _2"></span>there<span class="_"> </span>is<span class="_ _47"> </span>only <span class="_ _2"></span>one</span></div><div class="t m0 x32 h55 y359a ff19 fs2c fc0 sc0 ls0 ws0">stack, <span class="_ _e"> </span>its <span class="_"> </span>size <span class="_ _e"> </span>usually <span class="_ _e"> </span>isn’t <span class="_"> </span>a <span class="_ _e"> </span>problem. <span class="_ _4b"> </span>W<span class="_ _1"></span>ith <span class="_"> </span>thr<span class="_ _0"></span>eads, <span class="_ _e"> </span>however<span class="_ _1"></span><span class="lse78">,t<span class="_ _55"></span><span class="ls0">he <span class="_ _e"> </span>same <span class="_"> </span>amount <span class="_ _53"> </span>of</span></span></div><div class="t m0 x32 h55 y359b ff19 fs2c fc0 sc0 ls0 ws0">virtual address space must <span class="_ _2"></span>be shared by all <span class="_ _2"></span>the thread stacks.<span class="_ _46"> </span><span class="ls155">Yo<span class="_ _23"></span><span class="lsde6">um<span class="_ _4f"></span><span class="ls0">ight <span class="_ _2"></span>have to <span class="_ _2"></span>reduce</span></span></span></div><div class="t m0 x32 h55 y359c ff19 fs2c fc0 sc0 ls0 ws0">your <span class="_ _47"> </span>default <span class="_ _45"> </span>thread <span class="_ _47"> </span>stack <span class="_ _47"> </span>size <span class="_ _45"> </span>if <span class="_ _47"> </span>your <span class="_ _45"> </span>application <span class="_ _47"> </span>uses <span class="_ _45"> </span>so <span class="_ _47"> </span>many <span class="_ _45"> </span>threads <span class="_ _47"> </span>that <span class="_ _47"> </span>the</div><div class="t m0 x32 h55 y359d ff19 fs2c fc0 sc0 ls0 ws0">cumulative size <span class="_ _2"></span>of <span class="_ _2"></span>their stacks <span class="_ _2"></span>exceeds <span class="_ _2"></span>the available <span class="_ _2"></span>virtual <span class="_ _2"></span>address space.<span class="_ _46"> </span>On <span class="_ _2"></span>the other</div><div class="t m0 x32 h55 y359e ff19 fs2c fc0 sc0 ls0 ws0">hand, <span class="_ _47"> </span>if <span class="_ _47"> </span>your <span class="_ _47"> </span>threads <span class="_ _66"> </span>call <span class="_ _47"> </span>functions <span class="_ _47"> </span>that <span class="_ _47"> </span>allocate <span class="_ _47"> </span>large <span class="_ _47"> </span>automatic <span class="_ _47"> </span>variables <span class="_ _47"> </span>or <span class="_ _47"> </span>call</div><div class="t m0 x32 h55 y359f ff19 fs2c fc0 sc0 ls0 ws0">functions many stack frames deep, you might need mor<span class="ls142">et<span class="_ _4f"></span><span class="ls0">han the default stack size.</span></span></div><div class="t m0 x3f h54 y35a0 ff19 fs2c fc0 sc0 ls0 ws0">If <span class="_ _23"> </span>you <span class="_ _23"> </span>run <span class="_ _23"> </span>out <span class="_ _42"> </span>of <span class="_ _23"> </span>virtual <span class="_ _23"> </span>address <span class="_ _23"> </span>space <span class="_ _23"> </span>for <span class="_ _42"> </span>thread <span class="_ _23"></span>stacks, <span class="_ _23"></span>you <span class="_ _23"> </span>can <span class="_ _23"> </span>use<span class="_ _35"> </span><span class="ff1a">malloc<span class="_ _35"> </span></span>or</div><div class="t m0 x32 h54 y35a1 ff1a fs2c fc0 sc0 ls0 ws0">mmap<span class="_ _5c"> </span><span class="ff19">(see <span class="_ _51"> </span>Section <span class="_ _5a"> </span>14.8) <span class="_ _51"> </span>to <span class="_ _51"> </span>allocate <span class="_ _5a"> </span>space <span class="_ _51"> </span>for <span class="_ _51"> </span>an <span class="_ _5a"> </span>alternative <span class="_ _51"> </span>stack <span class="_ _51"> </span>and <span class="_ _5a"> </span>use</span></div><div class="t m0 x32 h54 y35a2 ff1a fs2c fc0 sc0 ls0 ws0">pthread_attr_setstack<span class="_ _4b"> </span><span class="ff19">to <span class="_ _e"> </span>change <span class="_ _e"> </span>the <span class="_ _e"> </span>stack <span class="_ _e"> </span>location <span class="_ _e"> </span>of <span class="_ _e"> </span>threads <span class="_ _53"> </span>you <span class="_"> </span>cr<span class="_ _1"></span>eate. <span class="_ _59"> </span>The</span></div><div class="t m0 x32 h60 y35a3 ff19 fs2c fc0 sc0 ls0 ws0">address <span class="_ _23"> </span>speciﬁed <span class="_ _42"> </span>by <span class="_ _42"> </span>the<span class="_ _35"> </span><span class="ff1b">stackaddr<span class="_ _44"> </span></span>parameter <span class="_ _42"> </span>is <span class="_ _42"> </span>the <span class="_ _42"> </span>lowest <span class="_ _42"> </span>addr<span class="_ _0"></span>essable <span class="_ _42"> </span>address <span class="_ _23"> </span>in <span class="_ _42"> </span>the</div><div class="t m0 x32 h55 y35a4 ff19 fs2c fc0 sc0 ls0 ws0">range <span class="_ _9"></span>of <span class="_ _23"></span>memory <span class="_ _9"></span>to <span class="_ _23"> </span>be <span class="_ _23"></span>used <span class="_ _9"></span>as <span class="_ _23"></span>the <span class="_ _9"></span>thread’s <span class="_ _9"></span>stack, <span class="_ _23"></span>aligned <span class="_ _9"></span>at <span class="_ _23"> </span>the <span class="_ _23"></span>proper <span class="_ _9"></span>boundary <span class="_ _9"></span>for</div><div class="t m0 x32 h55 y35a5 ff19 fs2c fc0 sc0 ls0 ws0">the <span class="_ _3"></span>processor <span class="_ _3"></span>architecture. <span class="_ _47"> </span>Of<span class="_ _45"> </span>course, <span class="_ _3"></span>this <span class="_ _9"></span>assumes <span class="_ _3"></span>that <span class="_ _9"></span>the <span class="_ _9"></span>virtual <span class="_ _3"></span>address <span class="_ _9"></span>range <span class="_ _3"></span>used</div><div class="t m0 x32 h54 y35a6 ff19 fs2c fc0 sc0 ls0 ws0">by<span class="_"> </span><span class="ff1a">malloc<span class="_ _80"> </span></span>or<span class="_"> </span><span class="ff1a">mmap<span class="_ _66"> </span></span>is differ<span class="_ _0"></span>ent fr<span class="_ _0"></span>om the range currently in use for a thr<span class="_ _0"></span>ead’s stack.</div><div class="t m0 x3f h60 y35a7 ff19 fs2c fc0 sc0 ls0 ws0">The<span class="_"> </span><span class="ff1b">stackaddr<span class="_"> </span></span>thread attribute is <span class="_ _2"></span>deﬁned as <span class="_ _2"></span>the lowest memory <span class="_ _2"></span>address for the stack.</div><div class="t m0 x32 h55 y35a8 ff19 fs2c fc0 sc0 ls0 ws0">This <span class="_"> </span>is <span class="_"> </span>not <span class="_"> </span>necessarily <span class="_"> </span>the <span class="_"> </span>start <span class="_"> </span>of <span class="_ _e"> </span>the <span class="_"> </span>stack, <span class="_"> </span>however<span class="_ _1"></span><span class="lse79">.I<span class="_ _49"></span><span class="lse7a">fs<span class="_ _4a"></span><span class="ls0">tacks <span class="_"> </span>grow <span class="_"> </span>from <span class="_"> </span>higher</span></span></span></div><div class="t m0 x32 h60 y35a9 ff19 fs2c fc0 sc0 ls0 ws0">addresses <span class="_ _42"> </span>to <span class="_ _e"> </span>lower <span class="_ _53"> </span>addresses <span class="_ _53"> </span>for <span class="_ _53"> </span>a <span class="_ _e"> </span>given <span class="_ _53"> </span>processor <span class="_ _53"> </span>architectur<span class="_ _0"></span>e, <span class="_ _53"> </span>the<span class="_ _4b"> </span><span class="ff1b">stackaddr<span class="_ _4b"> </span></span>thread</div><div class="t m0 x32 h55 y35aa ff19 fs2c fc0 sc0 ls0 ws0">attribute will be the end of the stack instead of the beginning.</div><div class="t m0 x3f h60 y35ab ff19 fs2c fc0 sc0 ls0 ws0">An <span class="_ _44"> </span>application <span class="_ _35"> </span>can <span class="_ _44"> </span>also <span class="_ _44"> </span>get <span class="_ _35"> </span>and <span class="_ _44"> </span>set <span class="_ _44"> </span>the<span class="_ _54"> </span><span class="ff1b">stacksize<span class="_ _54"> </span></span>thr<span class="_ _0"></span>ead <span class="_ _44"> </span>attribute <span class="_ _35"> </span>using <span class="_ _44"> </span>the</div><div class="t m0 x32 h54 y35ac ff1a fs2c fc0 sc0 ls0 ws0">pthread_attr_getstacksize<span class="_ _80"> </span><span class="ff19">and<span class="_"> </span></span>pthread_attr_setstacksize<span class="_ _66"> </span><span class="ff19">functions.</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
