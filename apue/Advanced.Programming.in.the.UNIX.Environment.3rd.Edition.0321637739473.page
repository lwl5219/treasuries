<div id="pf1d9" class="pf w4 h1f" data-page-no="1d9"><div class="pc pc1d9 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg1d9.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>12.4<span class="_ _57"> </span>Synchronization <span class="_"> </span>Attributes<span class="_ _1b"> </span><span class="ff18">439</span></div><div class="t m0 x175 h57 y425 ff1a fs2d fc0 sc0 ls15c ws0">*C<span class="_ _1d"></span><span class="ls0">alculate the absolute time when we want to retry.</span></div><div class="t m0 x175 h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">*/</div><div class="t m0 x9d h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">clock_gettime(CLOCK_REALTIME, &amp;when);</div><div class="t m0 x9d h57 y801 ff1a fs2d fc0 sc0 ls0 ws0">when.tv_sec += 10;<span class="_ _d9"> </span>/* 10 seconds from now */</div><div class="t m0 x9d h57 y802 ff1a fs2d fc0 sc0 ls0 ws0">timeout(&amp;when, retry, (void *)((unsigned long)arg));</div><div class="t m0 x8a h57 y803 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y804 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;mutex);</div><div class="t m0 x8a h57 y23cb ff1a fs2d fc0 sc0 ls0 ws0">/* continue processing ... */</div><div class="t m0 x8a h57 y36b4 ff1a fs2d fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h57 y36b5 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x124 h2d y36b6 ff18 fs10 fc0 sc0 ls0 ws0">Figure 12.8<span class="_ _d9"> </span><span class="ff19">Using a r<span class="_ _0"></span>ecursive mutex</span></div><div class="t m0 x3f h4d y36b7 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _59"> </span>u<span class="_ _23"></span><span class="ls0">se <span class="_ _47"> </span>the<span class="_ _16"> </span><span class="ff1a">makethread<span class="_"> </span></span>function <span class="_ _47"> </span>from <span class="_ _47"> </span>Figur<span class="lseb9">e1<span class="_ _62"></span><span class="ls0">2.4 <span class="_ _47"> </span>to <span class="_ _45"> </span>cr<span class="_ _0"></span>eate <span class="_ _47"> </span>a <span class="_ _45"> </span>thr<span class="_ _0"></span>ead <span class="_ _47"> </span>in <span class="_ _45"> </span>the</span></span></span></div><div class="t m0 x32 h4d y36b8 ff19 fs26 fc0 sc0 ls0 ws0">detached <span class="_ _9"></span>state.<span class="_ _51"> </span>Because <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">func<span class="_ _35"> </span></span>function <span class="_ _9"></span>argument <span class="_ _9"></span>passed <span class="_ _23"></span>to <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">timeout<span class="_ _35"> </span></span>function</div><div class="t m0 x32 h49 y36b9 ff19 fs26 fc0 sc0 ls0 ws0">will run in the futur<span class="_ _0"></span>e, we don’t want to wait around for the thr<span class="_ _0"></span>ead to complete.</div><div class="t m0 x3f h4d y36ba ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _e"> </span>c<span class="_ _9"></span><span class="ls0">ould <span class="_ _2"></span>call<span class="_ _66"> </span><span class="ff1a">sleep<span class="_ _66"> </span></span>to <span class="_ _2"></span>wait <span class="_ _2"></span>for <span class="_ _2"></span>the <span class="_ _2"></span>timeout <span class="_ _2"></span>to <span class="_ _2"></span>expire, but <span class="_ _2"></span>that <span class="_ _2"></span>gives us <span class="_ _2"></span>only <span class="_ _2"></span>second</span></div><div class="t m0 x32 h49 y36bb ff19 fs26 fc0 sc0 ls0 ws0">granularity<span class="_ _4"></span><span class="lseba">.I<span class="_ _4a"></span><span class="ls0">f<span class="_"> </span>we<span class="_ _66"> </span>want <span class="_ _2"></span>to <span class="_ _2"></span>wait for <span class="_ _2"></span>some <span class="_ _2"></span>time other <span class="_ _2"></span>than <span class="_ _2"></span>an <span class="_ _2"></span>integral number <span class="_ _2"></span>of <span class="_ _2"></span>seconds,</span></span></div><div class="t m0 x32 h4d y36bc ff19 fs26 fc0 sc0 ls0 ws0">we <span class="_ _3"></span>need <span class="_ _9"></span>to <span class="_ _3"></span>use<span class="_ _45"> </span><span class="ff1a">nanosleep<span class="_ _47"> </span></span>or<span class="_ _45"> </span><span class="ff1a">clock_nanosleep</span><span class="lsebb">,b<span class="_ _b"></span><span class="ls0">oth <span class="_ _9"></span>of <span class="_ _9"></span>which <span class="_ _3"></span>allow <span class="_ _9"></span>us <span class="_ _3"></span>to <span class="_ _9"></span>sleep <span class="_ _3"></span>at</span></span></div><div class="t m0 x32 h49 y36bd ff19 fs26 fc0 sc0 ls0 ws0">higher resolution.</div><div class="t m0 x76 h5e y36be ff19 fs10 fc0 sc0 ls0 ws0">On <span class="_ _23"> </span>systems <span class="_ _9"> </span>that <span class="_ _23"> </span>don’t <span class="_ _23"> </span>deﬁne<span class="_ _47"> </span><span class="ff1a">CLOCK_REALTIME</span>,<span class="_ _45"> </span>we<span class="_ _47"> </span>deﬁne<span class="_ _47"> </span><span class="ff1a">clock_nanosleep<span class="_ _45"> </span></span>in <span class="_ _23"> </span>terms <span class="_ _9"> </span>of</div><div class="t m0 x76 h5e y36bf ff1a fs10 fc0 sc0 ls0 ws0">nanosleep<span class="ff19 lsebc">.H<span class="_ _62"></span><span class="ls0">owever<span class="_ _1"></span><span class="lsebd">,F<span class="_ _43"></span><span class="ls21d">re<span class="ls0">eBSD <span class="_"> </span>8.0 <span class="_"> </span>deﬁnes <span class="_"> </span>this <span class="_ _42"> </span>symbol <span class="_"> </span>to <span class="_"> </span>support<span class="_ _35"> </span><span class="ff1a">clock_gettime<span class="_ _35"> </span></span>and</span></span></span></span></span></div><div class="t m0 x76 h5e y36c0 ff1a fs10 fc0 sc0 ls0 ws0">clock_settime<span class="ff19 lsebe">,b<span class="_ _b"></span><span class="ls0">ut <span class="_ _23"> </span>doesn’t <span class="_ _42"> </span>support<span class="_ _45"> </span><span class="ff1a">clock_nanosleep<span class="_ _47"> </span></span>(only <span class="_ _42"> </span>Linux <span class="_ _23"> </span>3.2.0 <span class="_ _42"> </span>and <span class="_ _23"> </span>Solaris <span class="_ _23"> </span>10</span></span></div><div class="t m0 x76 h5e y36c1 ff19 fs10 fc0 sc0 ls0 ws0">currently support<span class="_"> </span><span class="ff1a">clock_nanosleep</span>.)</div><div class="t m0 x76 h5e y36c2 ff19 fs10 fc0 sc0 ls0 ws0">Additionally<span class="_ _6"></span>,<span class="_ _51"> </span>on<span class="_ _51"> </span>systems <span class="_ _44"> </span>that <span class="_ _44"> </span>don’t <span class="_ _44"> </span>deﬁne<span class="_ _51"> </span><span class="ff1a">CLOCK_REALTIME</span>,<span class="_ _51"> </span>we<span class="_ _51"> </span>p<span class="ls21d">ro</span>vide <span class="_ _44"> </span>our <span class="_ _44"> </span>own</div><div class="t m0 x76 h5e y36c3 ff19 fs10 fc0 sc0 ls0 ws0">implementation of<span class="_ _80"> </span><span class="ff1a">clock_gettime<span class="_ _80"> </span></span>that calls<span class="_ _80"> </span><span class="ff1a">gettimeofday<span class="_ _80"> </span></span>and translates <span class="_ _2"></span>microseconds <span class="_ _2"></span>to</div><div class="t m0 x76 h2d y36c4 ff19 fs10 fc0 sc0 ls0 ws0">nanoseconds.</div><div class="t m0 x3f h4d y36c5 ff19 fs26 fc0 sc0 ls0 ws0">The caller of<span class="_"> </span><span class="ff1a">timeout<span class="_ _66"> </span></span>needs to hold a mutex to check the condition <span class="_ _2"></span>and to schedule</div><div class="t m0 x32 h4d y36c6 ff19 fs26 fc0 sc0 ls0 ws0">the<span class="_ _44"> </span><span class="ff1a">retry<span class="_ _35"> </span></span>function <span class="_ _42"> </span>as <span class="_ _42"> </span>an <span class="_ _42"> </span>atomic <span class="_ _42"> </span>operation.<span class="_ _54"> </span>The<span class="_ _44"> </span><span class="ff1a">retry<span class="_ _44"> </span></span>function <span class="_ _42"> </span>will <span class="_ _42"> </span>try <span class="_ _42"> </span>to <span class="_ _42"> </span>lock <span class="_ _42"> </span>the</div><div class="t m0 x32 h4d y36c7 ff19 fs26 fc0 sc0 ls0 ws0">same <span class="_"> </span>mutex.<span class="_ _48"> </span>Unless <span class="_"> </span>the <span class="_"> </span>mutex <span class="_ _e"> </span>is <span class="_"> </span>recursive, <span class="_ _e"> </span>a <span class="_"> </span>deadlock <span class="_"> </span>will <span class="_ _e"> </span>occur <span class="_"> </span>if <span class="_"> </span>the<span class="_ _59"> </span><span class="ff1a">timeout</span></div><div class="t m0 x32 h4d y36c8 ff19 fs26 fc0 sc0 ls0 ws0">function calls<span class="_"> </span><span class="ff1a">retry<span class="_ _80"> </span></span>directly<span class="_ _4"></span>.</div><div class="t m0 x32 h99 y36c9 ff16 fs3b fc0 sc0 ls0 ws0">12.4.2 <span class="_ _54"> </span>Reader–Writer<span class="_ _54"> </span>Loc<span class="lsb33">kA<span class="_ _52"></span><span class="ls0">ttrib<span class="_ _0"></span>utes</span></span></div><div class="t m0 x32 h55 y36ca ff19 fs2c fc0 sc0 ls0 ws0">Reader–writer <span class="_ _7f"> </span>locks <span class="_ _7f"> </span>also <span class="_ _7f"> </span>have <span class="_ _7f"> </span>attributes, <span class="_ _5e"> </span>similar <span class="_ _93"> </span>to <span class="_ _5e"> </span>mutexes.<span class="_ _d8"> </span><span class="ls155">We <span class="_ _288"> </span>u<span class="_ _9"></span></span>se</div><div class="t m0 x32 h54 y36cb ff1a fs2c fc0 sc0 ls0 ws0">pthread_rwlockattr_init<span class="_ _35"> </span><span class="ff19">to <span class="_ _23"> </span>initialize <span class="_ _42"> </span>a<span class="_ _35"> </span></span>pthread_rwlockattr_t<span class="_ _35"> </span><span class="ff19">structur<span class="lsebf">ea<span class="_ _43"></span><span class="ls0">nd</span></span></span></div><div class="t m0 x32 h54 y36cc ff1a fs2c fc0 sc0 ls0 ws0">pthread_rwlockattr_destroy<span class="_ _80"> </span><span class="ff19">to deinitialize the structure.</span></div><div class="t m0 x3f h5d y36cd ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h5d y36ce ff1a fs2f fc0 sc0 ls0 ws0">int pthread_rwlockattr_init(pthread_rwlockattr_t *<span class="ff1b">attr</span>);</div><div class="t m0 x3f h5d y36cf ff1a fs2f fc0 sc0 ls0 ws0">int pthread_rwlockattr_destroy(pthread_rwlockattr_t *<span class="ff1b">attr</span>);</div><div class="t m0 xcb hc2 y36d0 ff19 fs2f fc0 sc0 ls0 ws0">Both return: 0 if OK, err<span class="_ _0"></span>or number on failure</div><a class="l" href="#pf11" data-dest-detail='[17,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:156.494092px;bottom:385.996813px;width:222.923996px;height:19.679993px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
