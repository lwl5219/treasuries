<div id="pf108" class="pf w4 h1f" data-page-no="108"><div class="pc pc108 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg108.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">230<span class="_ _1b"> </span><span class="ff19">Process <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _222"> </span>Chapter<span class="_ _4b"> </span>8</span></div><div class="t m0 x35 h27 y12f ff16 fsf fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h26 y342 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _23"> </span>program <span class="_ _23"></span>in <span class="_ _23"> </span>Figur<span class="ls924">e8<span class="_ _43"></span><span class="ls0">.1 <span class="_ _23"> </span>demonstrates <span class="_ _23"> </span>the<span class="_ _35"> </span><span class="ff1a">fork<span class="_ _35"> </span></span>function, <span class="_ _42"> </span>showing <span class="_ _23"></span>how <span class="_ _23"> </span>changes <span class="_ _23"> </span>to</span></span></div><div class="t m0 x32 h2a y343 ff19 fsf fc0 sc0 ls0 ws0">variables in <span class="_ _2"></span>a <span class="_ _2"></span>child <span class="_ _2"></span>process do <span class="_ _2"></span>not <span class="_ _2"></span>affect the <span class="_ _2"></span>value of <span class="_ _2"></span>the <span class="_ _2"></span>variables <span class="_ _2"></span>in <span class="_ _2"></span>the <span class="_ _2"></span>parent process.</div><div class="t m0 x32 h4e y1e98 ff1a fs28 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h4e y1e99 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _15"> </span>globvar<span class="_"> </span><span class="ls1b6">=6<span class="_ _1d"></span><span class="ls925">;/<span class="_ _223"></span><span class="ls1b6">*e<span class="_ _1d"></span><span class="ls0">xternal variable in initialized data */</span></span></span></span></div><div class="t m0 x32 h4e y1e9a ff1a fs28 fc0 sc0 ls0 ws0">char <span class="_ _68"> </span>buf[]<span class="_"> </span>=<span class="_"> </span>&quot;a<span class="_"> </span>write to stdout\n&quot;;</div><div class="t m0 x32 h4e y1e9b ff1a fs28 fc0 sc0 ls0 ws0">int</div><div class="t m0 x32 h4e y1e9c ff1a fs28 fc0 sc0 ls0 ws0">main(void)</div><div class="t m0 x32 h4e y1e9d ff1a fs28 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h4e y1e9e ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _15"> </span>var;<span class="_ _186"> </span>/* automatic variable on the stack */</div><div class="t m0 x8a h4e y1e9f ff1a fs28 fc0 sc0 ls0 ws0">pid_t <span class="_ _d9"> </span>pid;</div><div class="t m0 x8a h4e y1ea0 ff1a fs28 fc0 sc0 ls0 ws0">var = 88;</div><div class="t m0 x8a h4e y1ea1 ff1a fs28 fc0 sc0 ls0 ws0">if (write(STDOUT_FILENO, buf, sizeof(buf)-1) != sizeof(buf)-1)</div><div class="t m0 x9d h4e y1ea2 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;write error&quot;);</div><div class="t m0 x8a h4e y1ea3 ff1a fs28 fc0 sc0 ls0 ws0">printf(&quot;before fork\n&quot;);<span class="_ _15"> </span>/* we don’t flush stdout */</div><div class="t m0 x8a h4e y1ea4 ff1a fs28 fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0) {</div><div class="t m0 x9d h4e y1ea5 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;fork error&quot;);</div><div class="t m0 x8a h4e y1ea6 ff1a fs28 fc0 sc0 ls1b6 ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid == 0) {<span class="_ _88"> </span>/* child */</span></div><div class="t m0 x9d h4e y1ea7 ff1a fs28 fc0 sc0 ls0 ws0">globvar++; <span class="_ _166"> </span>/*<span class="_"> </span>modify variables */</div><div class="t m0 x9d h4e y1ea8 ff1a fs28 fc0 sc0 ls0 ws0">var++;</div><div class="t m0 x8a h4e y1ea9 ff1a fs28 fc0 sc0 ls1b6 ws0">}e<span class="_ _1d"></span><span class="ls0">lse {</span></div><div class="t m0 x9d h4e y1eaa ff1a fs28 fc0 sc0 ls0 ws0">sleep(2); <span class="_ _12d"> </span>/*<span class="_"> </span>parent */</div><div class="t m0 x8a h4e y1eab ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h4e y1eac ff1a fs28 fc0 sc0 ls0 ws0">printf(&quot;pid = %ld, glob = %d, var = %d\n&quot;, (long)getpid(), globvar,</div><div class="t m0 x194 h4e y1ead ff1a fs28 fc0 sc0 ls0 ws0">var);</div><div class="t m0 x8a h4e y1eae ff1a fs28 fc0 sc0 ls0 ws0">exit(0);</div><div class="t m0 x32 h4e y1eaf ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x145 h4f y1eb0 ff18 fs11 fc0 sc0 ls0 ws0">Figure 8.1<span class="_ _5a"> </span><span class="ff19">Example of<span class="_"> </span><span class="ff1a">fork<span class="_ _e"> </span></span>function</span></div><div class="t m0 x32 h55 y1eb1 ff19 fs2c fc0 sc0 ls0 ws0">If we execute this program, we get</div><div class="t m0 x3f h5d y1eb2 ff1a fs2f fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out</span></div><div class="t m0 x3f h5d y1eb3 ff1a fs2f fc0 sc0 ls395 ws0">aw<span class="_ _1d"></span><span class="ls0">rite to stdout</span></div><div class="t m0 x3f h5d y1eb4 ff1a fs2f fc0 sc0 ls0 ws0">before fork</div><div class="t m0 x3f h5d y1eb5 ff1a fs2f fc0 sc0 ls0 ws0">pid = 430, glob = 7, var = 89<span class="_ _1c4"> </span><span class="ff1b">child’<span class="_ _1"></span><span class="ls4c3">sv<span class="_ _5"></span><span class="ls0">ariables wer<span class="ls4c3">ec<span class="_ _5"></span><span class="ls0">hanged</span></span></span></span></span></div><div class="t m0 x3f h5d y1eb6 ff1a fs2f fc0 sc0 ls0 ws0">pid = 429, glob = 6, var = 88<span class="_ _1c4"> </span><span class="ff1b">parent’<span class="_ _6"></span><span class="ls4c3">sc<span class="_ _5"></span><span class="ls0">opy was not changed</span></span></span></div><div class="t m0 x3f h5d y1eb7 ff1a fs2f fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out &gt; temp.out</span></div><div class="t m0 x3f h5d y1eb8 ff1a fs2f fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">cat temp.out</span></div><div class="t m0 x3f h5d y1eb9 ff1a fs2f fc0 sc0 ls395 ws0">aw<span class="_ _1d"></span><span class="ls0">rite to stdout</span></div><div class="t m0 x3f h5d y1eba ff1a fs2f fc0 sc0 ls0 ws0">before fork</div><div class="t m0 x3f h5d y1ebb ff1a fs2f fc0 sc0 ls0 ws0">pid = 432, glob = 7, var = 89</div><div class="t m0 x3f h5d y1ebc ff1a fs2f fc0 sc0 ls0 ws0">before fork</div><div class="t m0 x3f h5d y1ebd ff1a fs2f fc0 sc0 ls0 ws0">pid = 431, glob = 6, var = 88</div><div class="t m0 x32 h55 y1ebe ff19 fs2c fc0 sc0 ls0 ws0">In <span class="_ _3"></span>general, <span class="_ _3"></span>we <span class="_ _3"></span>never <span class="_ _3"></span>know <span class="_ _3"></span>whether <span class="_ _3"></span>the <span class="_ _3"></span>child <span class="_ _3"></span>starts <span class="_ _3"></span>executing <span class="_ _3"></span>befor<span class="ls926">et<span class="_ _8"></span><span class="ls0">he <span class="_ _3"></span>parent, <span class="_ _3"></span>or <span class="_ _3"></span>vice</span></span></div><div class="t m0 x32 h55 y1ebf ff19 fs2c fc0 sc0 ls0 ws0">versa. <span class="_ _46"> </span>The<span class="_ _46"> </span>order <span class="_"> </span>depends <span class="_"> </span>on <span class="_"> </span>the <span class="_ _66"> </span>scheduling <span class="_ _66"> </span>algorithm <span class="_"> </span>used <span class="_ _66"> </span>by <span class="_ _66"> </span>the <span class="_"> </span>kernel.<span class="_ _50"> </span>If <span class="_"> </span>it’s</div><div class="t m0 x32 h55 y1ec0 ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">quired <span class="_ _3"></span>that <span class="_ _9"></span>the <span class="_ _3"></span>child <span class="_ _3"></span>and <span class="_ _9"></span>parent <span class="_ _2"></span>synchronize <span class="_ _3"></span>their <span class="_ _9"></span>actions, <span class="_ _3"></span>some <span class="_ _9"></span>form <span class="_ _3"></span>of <span class="_ _3"></span>interprocess</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
