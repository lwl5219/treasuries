<div id="pf2b1" class="pf w4 h1f" data-page-no="2b1"><div class="pc pc2b1 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg2b1.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>17.5<span class="_ _67"> </span>An <span class="_"> </span>Open <span class="_"> </span>Server<span class="_ _6"></span><span class="ls30a">,V<span class="_ _1d"></span><span class="ls0">ersion <span class="_"> </span>1<span class="_ _1b"> </span><span class="ff18">655</span></span></span></div><div class="t m0 x8a h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _bd"> </span>buf[10];</div><div class="t m0 x8a h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">struct iovec<span class="_ _15"> </span>iov[3];</div><div class="t m0 x8a h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">static int<span class="_ _189"> </span>fd[2] = { -1, -1 };</div><div class="t m0 x8a h57 y1308 ff1a fs2d fc0 sc0 ls0 ws0">if (fd[0] &lt; 0) {<span class="_ _15"> </span>/* fork/exec our open server first time */</div><div class="t m0 x9d h57 y3508 ff1a fs2d fc0 sc0 ls0 ws0">if (fd_pipe(fd) &lt; 0) {</div><div class="t m0 x1f h57 y3509 ff1a fs2d fc0 sc0 ls0 ws0">err_ret(&quot;fd_pipe error&quot;);</div><div class="t m0 x1f h57 y350a ff1a fs2d fc0 sc0 ls0 ws0">return(-1);</div><div class="t m0 x9d h57 y350b ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9d h57 y350c ff1a fs2d fc0 sc0 ls0 ws0">if ((pid = fork()) &lt; 0) {</div><div class="t m0 x1f h57 y350d ff1a fs2d fc0 sc0 ls0 ws0">err_ret(&quot;fork error&quot;);</div><div class="t m0 x1f h57 y31b6 ff1a fs2d fc0 sc0 ls0 ws0">return(-1);</div><div class="t m0 x9d h57 y31b7 ff1a fs2d fc0 sc0 ls15c ws0">}e<span class="_ _1d"></span><span class="ls0">lse if (pid == 0) {<span class="_ _88"> </span>/* child */</span></div><div class="t m0 x1f h57 y31b8 ff1a fs2d fc0 sc0 ls0 ws0">close(fd[0]);</div><div class="t m0 x1f h57 y31b9 ff1a fs2d fc0 sc0 ls0 ws0">if (fd[1] != STDIN_FILENO &amp;&amp;</div><div class="t m0 xae h57 y31ba ff1a fs2d fc0 sc0 ls0 ws0">dup2(fd[1], STDIN_FILENO) != STDIN_FILENO)</div><div class="t m0 x1ca h57 y31bb ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;dup2 error to stdin&quot;);</div><div class="t m0 x1f h57 y2f71 ff1a fs2d fc0 sc0 ls0 ws0">if (fd[1] != STDOUT_FILENO &amp;&amp;</div><div class="t m0 xae h57 y2f72 ff1a fs2d fc0 sc0 ls0 ws0">dup2(fd[1], STDOUT_FILENO) != STDOUT_FILENO)</div><div class="t m0 x1ca h57 y2f73 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;dup2 error to stdout&quot;);</div><div class="t m0 x1f h57 y8e0 ff1a fs2d fc0 sc0 ls0 ws0">if (execl(&quot;./opend&quot;, &quot;opend&quot;, (char *)0) &lt; 0)</div><div class="t m0 x1ca h57 y8e1 ff1a fs2d fc0 sc0 ls0 ws0">err_sys(&quot;execl error&quot;);</div><div class="t m0 x9d h57 y2f74 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9d h57 y2f75 ff1a fs2d fc0 sc0 ls0 ws0">close(fd[1]); <span class="_ _12d"> </span>/*<span class="_"> </span>parent */</div><div class="t m0 x8a h57 y2f76 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y2f77 ff1a fs2d fc0 sc0 ls0 ws0">sprintf(buf, &quot; %d&quot;, oflag);<span class="_ _8a"> </span>/* oflag to ascii */</div><div class="t m0 x8a h57 y31bc ff1a fs2d fc0 sc0 ls0 ws0">iov[0].iov_base = CL_OPEN &quot; &quot;;<span class="_ _189"> </span>/* string concatenation */</div><div class="t m0 x8a h57 y3264 ff1a fs2d fc0 sc0 ls0 ws0">iov[0].iov_len <span class="_"> </span>=<span class="_"> </span>strlen(CL_OPEN) + 1;</div><div class="t m0 x8a h57 y3265 ff1a fs2d fc0 sc0 ls0 ws0">iov[1].iov_base = name;</div><div class="t m0 x8a h57 y3266 ff1a fs2d fc0 sc0 ls0 ws0">iov[1].iov_len <span class="_"> </span>=<span class="_"> </span>strlen(name);</div><div class="t m0 x8a h57 y3267 ff1a fs2d fc0 sc0 ls0 ws0">iov[2].iov_base = buf;</div><div class="t m0 x8a h57 y3268 ff1a fs2d fc0 sc0 ls0 ws0">iov[2].iov_len <span class="_"> </span>=<span class="_"> </span>strlen(buf) + 1;<span class="_ _d9"> </span>/* +1 for null at end of buf */</div><div class="t m0 x8a h57 y4853 ff1a fs2d fc0 sc0 ls0 ws0">len = iov[0].iov_len + iov[1].iov_len + iov[2].iov_len;</div><div class="t m0 x8a h57 y4854 ff1a fs2d fc0 sc0 ls0 ws0">if (writev(fd[0], &amp;iov[0], 3) != len) {</div><div class="t m0 x9d h57 y4855 ff1a fs2d fc0 sc0 ls0 ws0">err_ret(&quot;writev error&quot;);</div><div class="t m0 x9d h57 y4856 ff1a fs2d fc0 sc0 ls0 ws0">return(-1);</div><div class="t m0 x8a h57 y4857 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y3f83 ff1a fs2d fc0 sc0 ls0 ws0">/* read descriptor, returned errors handled by write() */</div><div class="t m0 x8a h57 y3f84 ff1a fs2d fc0 sc0 ls0 ws0">return(recv_fd(fd[0], write));</div><div class="t m0 x32 h57 y3f85 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 xbf h5e y4d4b ff18 fs10 fc0 sc0 ls0 ws0">Figure 17.19<span class="_ _5a"> </span><span class="ff19">The<span class="_"> </span><span class="ff1a">csopen<span class="_ _e"> </span></span>function, version 1</span></div><div class="t m0 x3f h49 y4d4c ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _42"> </span>child <span class="_ _42"> </span>closes <span class="_ _42"> </span>one <span class="_ _42"> </span>end <span class="_ _42"> </span>of <span class="_ _42"> </span>the <span class="_ _42"> </span>fd-pipe, <span class="_ _42"> </span>and <span class="_ _42"> </span>the <span class="_ _42"> </span>parent <span class="_ _42"> </span>closes <span class="_ _42"> </span>the <span class="_ _42"> </span>other<span class="_ _6"></span><span class="ls13ee">.F<span class="_ _7"></span><span class="ls0">or <span class="_ _42"> </span>the</span></span></div><div class="t m0 x32 h49 y4d4d ff19 fs26 fc0 sc0 ls0 ws0">server <span class="_ _3"></span>that <span class="_ _9"></span>it <span class="_ _3"></span>executes, <span class="_ _9"></span>the <span class="_ _3"></span>child <span class="_ _9"></span>also <span class="_ _3"></span>duplicates <span class="_ _9"></span>its <span class="_ _3"></span>end <span class="_ _9"></span>of <span class="_ _3"></span>the <span class="_ _9"></span>fd-pipe <span class="_ _3"></span>onto <span class="_ _9"></span>its <span class="_ _3"></span>standard</div><div class="t m0 x32 h49 y4d4e ff19 fs26 fc0 sc0 ls0 ws0">input <span class="_ _47"> </span>and <span class="_ _47"> </span>standar<span class="ls1357">do<span class="_ _62"></span><span class="ls0">utput. <span class="_ _16"> </span>(Another<span class="_ _61"> </span>option <span class="_ _47"> </span>would <span class="_ _47"> </span>have <span class="_ _47"> </span>been <span class="_ _47"> </span>to <span class="_ _47"> </span>pass <span class="_ _47"> </span>the <span class="_ _47"> </span>ASCII</span></span></div><div class="t m0 x32 h4d y4d4f ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">presentation of the descriptor<span class="_"> </span><span class="ff1a">fd[1]<span class="_ _80"> </span></span>as an argument to the server<span class="_ _6"></span>.)</span></div><div class="t m0 x3f h49 y4d50 ff19 fs26 fc0 sc0 ls0 ws0">The parent sends to the server the request containing the pathname and open mode.</div><div class="t m0 x32 h4d y4d51 ff19 fs26 fc0 sc0 ls0 ws0">Finally<span class="_ _4"></span><span class="ls13ef">,t<span class="_ _5"></span><span class="ls0">he parent calls<span class="_"> </span><span class="ff1a">recv_fd<span class="_ _e"> </span></span>to return either the descriptor or an error<span class="_ _6"></span><span class="ls13f0">.I<span class="_ _4a"></span><span class="ls0">f<span class="_"> </span>an<span class="_"> </span>error is</span></span></span></span></div><div class="t m0 x32 h4d y4d52 ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">turned by the server<span class="_ _1"></span>,<span class="_"> </span><span class="ff1a">write<span class="_ _80"> </span></span>is called to output the message to standar<span class="lsd3">de<span class="_ _d"></span><span class="ls0">rror<span class="_ _6"></span>.</span></span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
