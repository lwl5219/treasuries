<div id="pf35e" class="pf w4 h1f" data-page-no="35e"><div class="pc pc35e w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg35e.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">828<span class="_ _1b"> </span><span class="ff19">Communicating <span class="_"> </span>with <span class="_"> </span>a <span class="_"> </span>Network <span class="_"> </span>Printer<span class="_ _23b"> </span>Chapter <span class="_"> </span>21</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">482 <span class="_ _d9"> </span>/*</div><div class="t m0 x32 h57 y3c0 ff1a fs2d fc0 sc0 ls0 ws0">483 <span class="_ _68"> </span>*<span class="_"> </span>Add a worker to the list of worker threads.</div><div class="t m0 x32 h57 y845 ff1a fs2d fc0 sc0 ls0 ws0">484 <span class="_ _68"> </span>*</div><div class="t m0 x32 h57 y56c4 ff1a fs2d fc0 sc0 ls0 ws0">485 <span class="_ _68"> </span>*<span class="_"> </span>LOCKING: acquires and releases workerlock.</div><div class="t m0 x32 h57 y56c5 ff1a fs2d fc0 sc0 ls0 ws0">486 <span class="_ _68"> </span>*/</div><div class="t m0 x32 h57 y56c6 ff1a fs2d fc0 sc0 ls0 ws0">487 <span class="_ _d9"> </span>void</div><div class="t m0 x32 h57 y56c7 ff1a fs2d fc0 sc0 ls0 ws0">488 <span class="_ _d9"> </span>add_worker(pthread_t<span class="_"> </span>tid, int sockfd)</div><div class="t m0 x32 h57 y56c8 ff1a fs2d fc0 sc0 ls0 ws0">489 <span class="_ _d9"> </span>{</div><div class="t m0 x32 h57 y56c9 ff1a fs2d fc0 sc0 ls0 ws0">490 <span class="_ _15"> </span>struct<span class="_"> </span>worker_thread <span class="_ _68"> </span>*wtp;</div><div class="t m0 x32 h57 y1d7d ff1a fs2d fc0 sc0 ls0 ws0">491 <span class="_ _15"> </span>if<span class="_"> </span>((wtp = malloc(sizeof(struct worker_thread))) == NULL) {</div><div class="t m0 x32 h57 y1d7e ff1a fs2d fc0 sc0 ls0 ws0">492 <span class="_ _186"> </span>log_ret(&quot;add_worker:<span class="_"> </span>can’t malloc&quot;);</div><div class="t m0 x32 h57 y1d7f ff1a fs2d fc0 sc0 ls0 ws0">493 <span class="_ _186"> </span>pthread_exit((void<span class="_"> </span>*)1);</div><div class="t m0 x32 h57 y1d80 ff1a fs2d fc0 sc0 ls0 ws0">494 <span class="_ _15"> </span>}</div><div class="t m0 x32 h57 y2c5b ff1a fs2d fc0 sc0 ls0 ws0">495 <span class="_ _15"> </span>wtp-&gt;tid<span class="_"> </span><span class="ls15c">=t<span class="_ _1d"></span><span class="ls0">id;</span></span></div><div class="t m0 x32 h57 y2c5c ff1a fs2d fc0 sc0 ls0 ws0">496 <span class="_ _15"> </span>wtp-&gt;sockfd<span class="_"> </span><span class="ls15c">=s<span class="_ _1d"></span><span class="ls0">ockfd;</span></span></div><div class="t m0 x32 h57 y2c5d ff1a fs2d fc0 sc0 ls0 ws0">497 <span class="_ _15"> </span>pthread_mutex_lock(&amp;workerlock);</div><div class="t m0 x32 h57 y2c5e ff1a fs2d fc0 sc0 ls0 ws0">498 <span class="_ _15"> </span>wtp-&gt;prev<span class="_"> </span><span class="ls15c">=N<span class="_ _1d"></span><span class="ls0">ULL;</span></span></div><div class="t m0 x32 h57 y2c5f ff1a fs2d fc0 sc0 ls0 ws0">499 <span class="_ _15"> </span>wtp-&gt;next<span class="_"> </span><span class="ls15c">=w<span class="_ _1d"></span><span class="ls0">orkers;</span></span></div><div class="t m0 x32 h57 y2c60 ff1a fs2d fc0 sc0 ls0 ws0">500 <span class="_ _15"> </span>if<span class="_"> </span>(workers == NULL)</div><div class="t m0 x32 h57 y2c61 ff1a fs2d fc0 sc0 ls0 ws0">501 <span class="_ _186"> </span>workers<span class="_"> </span><span class="ls15c">=w<span class="_ _1d"></span><span class="ls0">tp;</span></span></div><div class="t m0 x32 h57 y2c62 ff1a fs2d fc0 sc0 ls0 ws0">502 <span class="_ _15"> </span>else</div><div class="t m0 x32 h57 y5689 ff1a fs2d fc0 sc0 ls0 ws0">503 <span class="_ _186"> </span>workers-&gt;prev<span class="_"> </span><span class="ls15c">=w<span class="_ _1d"></span><span class="ls0">tp;</span></span></div><div class="t m0 x32 h57 y568a ff1a fs2d fc0 sc0 ls0 ws0">504 <span class="_ _15"> </span>pthread_mutex_unlock(&amp;workerlock);</div><div class="t m0 x32 h57 y568b ff1a fs2d fc0 sc0 ls0 ws0">505 <span class="_ _d9"> </span>}</div><div class="t m0 x32 h57 y2c65 ff1a fs2d fc0 sc0 ls0 ws0">506 <span class="_ _d9"> </span>/*</div><div class="t m0 x32 h57 y4d74 ff1a fs2d fc0 sc0 ls0 ws0">507 <span class="_ _68"> </span>*<span class="_"> </span>Cancel (kill) all outstanding workers.</div><div class="t m0 x32 h57 y5abe ff1a fs2d fc0 sc0 ls0 ws0">508 <span class="_ _68"> </span>*</div><div class="t m0 x32 h57 y5abf ff1a fs2d fc0 sc0 ls0 ws0">509 <span class="_ _68"> </span>*<span class="_"> </span>LOCKING: acquires and releases workerlock.</div><div class="t m0 x32 h57 y5ac0 ff1a fs2d fc0 sc0 ls0 ws0">510 <span class="_ _68"> </span>*/</div><div class="t m0 x32 h57 y3b50 ff1a fs2d fc0 sc0 ls0 ws0">511 <span class="_ _d9"> </span>void</div><div class="t m0 x32 h57 y3b51 ff1a fs2d fc0 sc0 ls0 ws0">512 <span class="_ _d9"> </span>kill_workers(void)</div><div class="t m0 x32 h57 y5b61 ff1a fs2d fc0 sc0 ls0 ws0">513 <span class="_ _d9"> </span>{</div><div class="t m0 x32 h57 y5b62 ff1a fs2d fc0 sc0 ls0 ws0">514 <span class="_ _15"> </span>struct<span class="_"> </span>worker_thread <span class="_ _68"> </span>*wtp;</div><div class="t m0 x32 h57 y5c1f ff1a fs2d fc0 sc0 ls0 ws0">515 <span class="_ _15"> </span>pthread_mutex_lock(&amp;workerlock);</div><div class="t m0 x32 h57 y5c20 ff1a fs2d fc0 sc0 ls0 ws0">516 <span class="_ _15"> </span>for<span class="_"> </span>(wtp = workers; wtp != NULL; wtp = wtp-&gt;next)</div><div class="t m0 x32 h57 y5c21 ff1a fs2d fc0 sc0 ls0 ws0">517 <span class="_ _186"> </span>pthread_cancel(wtp-&gt;tid);</div><div class="t m0 x32 h57 y5c22 ff1a fs2d fc0 sc0 ls0 ws0">518 <span class="_ _15"> </span>pthread_mutex_unlock(&amp;workerlock);</div><div class="t m0 x32 h57 y5c23 ff1a fs2d fc0 sc0 ls0 ws0">519 <span class="_ _d9"> </span>}</div><div class="t m0 x32 h4d y5c24 ff19 fs26 fc0 sc0 ls0 ws0">[482 <span class="_ _a"></span>– <span class="_ _a"></span>505]<span class="_ _65"> </span><span class="ff1a">add_worker<span class="_ _47"> </span></span>adds <span class="_ _2"></span>a<span class="_ _47"> </span><span class="ff1a">worker_thread<span class="_ _47"> </span></span>structure<span class="_ _66"> </span>to<span class="_ _47"> </span>the <span class="_ _3"></span>list <span class="_ _3"></span>of <span class="_ _2"></span>active <span class="_ _3"></span>threads.</div><div class="t m0 x11a h4d y5c25 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _35"> </span>a<span class="_ _23"></span><span class="ls0">llocate <span class="_ _e"> </span>memory <span class="_ _e"> </span>for <span class="_"> </span>the <span class="_ _53"> </span>structure, <span class="_ _e"> </span>initialize <span class="_"> </span>it, <span class="_ _53"> </span>lock <span class="_"> </span>the<span class="_ _4b"> </span><span class="ff1a">workerlock</span></span></div><div class="t m0 x11a h49 y5c26 ff19 fs26 fc0 sc0 ls0 ws0">mutex, add the structur<span class="_ _0"></span>e<span class="_"> </span>to<span class="_"> </span>the head of the list, and unlock the mutex.</div><div class="t m0 x32 h4d y5c27 ff19 fs26 fc0 sc0 ls0 ws0">[506 <span class="_ _a"></span>– <span class="_ _a"></span>519]<span class="_ _65"> </span>The<span class="_ _35"> </span><span class="ff1a">kill_workers<span class="_ _35"> </span></span>function <span class="_ _42"> </span>walks <span class="_ _23"> </span>the <span class="_ _23"> </span>list <span class="_ _42"> </span>of <span class="_ _23"> </span>worker <span class="_ _42"> </span>threads <span class="_ _23"></span>and <span class="_ _23"> </span>cancels</div><div class="t m0 x11a h4d y5c28 ff19 fs26 fc0 sc0 ls0 ws0">each <span class="_ _23"></span>one.<span class="_ _51"> </span><span class="ls164">We <span class="_ _47"> </span>h<span class="_ _9"></span></span>old <span class="_ _23"></span>the<span class="_ _35"> </span><span class="ff1a">workerlock<span class="_ _45"> </span></span>mutex <span class="_ _23"> </span>while <span class="_ _23"> </span>we <span class="_ _23"> </span>walk <span class="_ _23"> </span>the <span class="_ _23"></span>list.<span class="_ _51"> </span>Recall</div><div class="t m0 x11a h4d y5c29 ff19 fs26 fc0 sc0 ls0 ws0">that<span class="_ _4b"> </span><span class="ff1a">pthread_cancel<span class="_ _4b"> </span></span>merely <span class="_ _53"> </span>schedules <span class="_ _e"> </span>a <span class="_ _e"> </span>thread <span class="_ _53"> </span>for <span class="_ _e"> </span>cancellation; <span class="_ _e"> </span>actual</div><div class="t m0 x11a h49 y5c2a ff19 fs26 fc0 sc0 ls0 ws0">cancellation happens when each thread r<span class="_ _0"></span>eaches the next cancellation point.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
