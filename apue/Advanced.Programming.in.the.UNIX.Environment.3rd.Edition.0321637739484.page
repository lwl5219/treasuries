<div id="pf1e4" class="pf w4 h1f" data-page-no="1e4"><div class="pc pc1e4 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1e4.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">450<span class="_ _1b"> </span><span class="ff19">Thread <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _177"> </span>Chapter<span class="_ _44"> </span>12</span></div><div class="t m0 x32 h57 y425 ff1a fs2d fc0 sc0 ls0 ws0">extern char **environ;</div><div class="t m0 x32 h57 y380f ff1a fs2d fc0 sc0 ls0 ws0">static void</div><div class="t m0 x32 h57 y3810 ff1a fs2d fc0 sc0 ls0 ws0">thread_init(void)</div><div class="t m0 x32 h57 y31b5 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y124b ff1a fs2d fc0 sc0 ls0 ws0">pthread_key_create(&amp;key, free);</div><div class="t m0 x32 h57 y124c ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h57 y350b ff1a fs2d fc0 sc0 ls0 ws0">char *</div><div class="t m0 x32 h57 y350c ff1a fs2d fc0 sc0 ls0 ws0">getenv(const char *name)</div><div class="t m0 x32 h57 y350d ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y31b6 ff1a fs2d fc0 sc0 ls0 ws0">int <span class="_ _15"> </span>i,<span class="_"> </span>len;</div><div class="t m0 x8a h57 y31b7 ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _68"> </span>*envbuf;</div><div class="t m0 x8a h57 y3410 ff1a fs2d fc0 sc0 ls0 ws0">pthread_once(&amp;init_done, thread_init);</div><div class="t m0 x8a h57 y3411 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_lock(&amp;env_mutex);</div><div class="t m0 x8a h57 y3412 ff1a fs2d fc0 sc0 ls0 ws0">envbuf = (char *)pthread_getspecific(key);</div><div class="t m0 x8a h57 y3811 ff1a fs2d fc0 sc0 ls0 ws0">if (envbuf == NULL) {</div><div class="t m0 x9d h57 y3812 ff1a fs2d fc0 sc0 ls0 ws0">envbuf = malloc(MAXSTRINGSZ);</div><div class="t m0 x9d h57 y3813 ff1a fs2d fc0 sc0 ls0 ws0">if (envbuf == NULL) {</div><div class="t m0 x1f h57 y3814 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;env_mutex);</div><div class="t m0 x1f h57 y16eb ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x9d h57 y16ec ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x9d h57 y8e2 ff1a fs2d fc0 sc0 ls0 ws0">pthread_setspecific(key, envbuf);</div><div class="t m0 x8a h57 y8e3 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y8e4 ff1a fs2d fc0 sc0 ls0 ws0">len = strlen(name);</div><div class="t m0 x8a h57 y8e5 ff1a fs2d fc0 sc0 ls0 ws0">for (i = 0; environ[i] != NULL; i++) {</div><div class="t m0 x9d h57 y2f78 ff1a fs2d fc0 sc0 ls0 ws0">if ((strncmp(name, environ[i], len) == 0) &amp;&amp;</div><div class="t m0 x76 h57 y2f79 ff1a fs2d fc0 sc0 ls0 ws0">(environ[i][len] == ’=’)) {</div><div class="t m0 x1f h57 y2f7a ff1a fs2d fc0 sc0 ls0 ws0">strncpy(envbuf, &amp;environ[i][len+1], MAXSTRINGSZ-1);</div><div class="t m0 x1f h57 y2f7b ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;env_mutex);</div><div class="t m0 x1f h57 y2f7c ff1a fs2d fc0 sc0 ls0 ws0">return(envbuf);</div><div class="t m0 x9d h57 y2f7d ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y2f7e ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h57 y3269 ff1a fs2d fc0 sc0 ls0 ws0">pthread_mutex_unlock(&amp;env_mutex);</div><div class="t m0 x8a h57 y326a ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x32 h57 y326b ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x38 h5e y3815 ff18 fs10 fc0 sc0 ls0 ws0">Figure 12.13<span class="_ _51"> </span><span class="ff19 ls136">At<span class="_ _84"></span><span class="ls0">hread-safe, compatible version of<span class="_"> </span><span class="ff1a">getenv</span></span></span></div><div class="t m0 x3f h4d y3816 ff19 fs26 fc0 sc0 ls164 ws0">We <span class="_ _53"> </span>u<span class="_ _9"></span><span class="ls0">se<span class="_"> </span><span class="ff1a">pthread_once<span class="_ _66"> </span></span>to ensur<span class="lsa56">et<span class="_ _d"></span><span class="ls0">hat only one key is created for the thread-speciﬁc</span></span></span></div><div class="t m0 x32 h4d y3817 ff19 fs26 fc0 sc0 ls0 ws0">data we will <span class="_ _2"></span>use.<span class="_ _46"> </span>If<span class="_ _66"> </span><span class="ff1a">pthread_getspecific<span class="_ _66"> </span></span><span class="lscc">re<span class="_ _2"></span></span>turns a <span class="_ _2"></span>null pointer<span class="_ _1"></span>,<span class="_"> </span>we<span class="_"> </span>need <span class="_ _2"></span>to allocate</div><div class="t m0 x32 h49 y3818 ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _2"></span>memory <span class="_ _3"></span>buffer <span class="_ _2"></span>and <span class="_ _2"></span>associate <span class="_ _3"></span>it <span class="_ _2"></span>with <span class="_ _3"></span>the <span class="_ _2"></span>key<span class="_ _6"></span><span class="lsf04">.O<span class="_ _1d"></span><span class="ls0">therwise, <span class="_ _3"></span>we <span class="_ _2"></span>use <span class="_ _3"></span>the <span class="_ _2"></span>memory <span class="_ _3"></span>buffer</span></span></div><div class="t m0 x32 h4d y3819 ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">turned <span class="_ _2"></span>by<span class="_ _66"> </span><span class="ff1a">pthread_getspecific</span><span class="lsa1f">.F<span class="_ _4a"></span><span class="ls0">or the <span class="_ _2"></span>destructor <span class="_ _2"></span>function, we <span class="_ _2"></span>use<span class="_ _47"> </span><span class="ff1a">free<span class="_ _66"> </span></span>to free</span></span></span></div><div class="t m0 x32 h4d y381a ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _42"> </span>memory <span class="_ _53"> </span>previously <span class="_ _42"> </span>allocated <span class="_ _53"> </span>by<span class="_ _44"> </span><span class="ff1a">malloc</span><span class="lsf05">.T<span class="_ _52"></span><span class="ls0">he <span class="_ _53"> </span>destructor <span class="_ _42"> </span>function <span class="_ _53"> </span>will <span class="_ _53"> </span>be <span class="_ _53"> </span>called</span></span></div><div class="t m0 x32 h49 y381b ff19 fs26 fc0 sc0 ls0 ws0">with the value of the thread-speciﬁc data only if the value is non-null.</div><div class="t m0 x3f h4d y381c ff19 fs26 fc0 sc0 ls0 ws0">Note <span class="_ _2"></span>that <span class="_ _2"></span>although <span class="_ _3"></span>this <span class="_ _2"></span>version <span class="_ _3"></span>of<span class="_ _47"> </span><span class="ff1a">getenv<span class="_ _66"> </span></span>is <span class="_ _3"></span>thread-safe, <span class="_ _2"></span>it <span class="_ _2"></span>is <span class="_ _2"></span>not <span class="_ _3"></span>async-signal <span class="_ _2"></span>safe.</div><div class="t m0 x32 h49 y381d ff19 fs26 fc0 sc0 ls0 ws0">Even <span class="_ _23"></span>if <span class="_ _23"></span>we <span class="_ _9"></span>made <span class="_ _23"> </span>the <span class="_ _23"> </span>mutex <span class="_ _23"> </span>recursive, <span class="_ _9"></span>we <span class="_ _23"> </span>could <span class="_ _23"> </span>not <span class="_ _23"></span>make <span class="_ _23"></span>it <span class="_ _23"></span>reentrant <span class="_ _9"></span>with <span class="_ _23"></span>respect <span class="_ _9"></span>to</div><div class="t m0 x32 h4d y381e ff19 fs26 fc0 sc0 ls0 ws0">signal handlers because it calls<span class="_"> </span><span class="ff1a">malloc</span><span class="lsd3">,w<span class="_ _d"></span><span class="ls0">hich itself is not async-signal safe.</span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
