<div id="pf1f0" class="pf w4 h1f" data-page-no="1f0"><div class="pc pc1f0 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1f0.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">462<span class="_ _1b"> </span><span class="ff19">Thread <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _177"> </span>Chapter<span class="_ _44"> </span>12</span></div><div class="t m0 x21b h95 y425 ff18 fs2d fc0 sc0 ls0 ws0">Thread A<span class="_ _254"> </span>Thread B</div><div class="t m0 x3f h57 y426 ff1a fs2d fc0 sc0 ls0 ws0">lseek(fd, 300, SEEK_SET);<span class="_ _1c"> </span>lseek(fd, 700, SEEK_SET);</div><div class="t m0 x3f h57 y800 ff1a fs2d fc0 sc0 ls0 ws0">read(fd, buf1, 100);<span class="_ _13e"> </span>read(fd, buf2, 100);</div><div class="t m0 x32 h26 y394b ff19 fsf fc0 sc0 ls0 ws0">If <span class="_ _9"></span>thread <span class="_ _9"></span>A <span class="_ _23"></span>executes <span class="_ _9"></span>the <span class="_ _23"></span>call <span class="_ _9"></span>to<span class="_ _35"> </span><span class="ff1a">lseek<span class="_ _45"> </span></span>and <span class="_ _9"></span>then <span class="_ _23"></span>thread <span class="_ _9"></span>B <span class="_ _9"></span>calls<span class="_ _35"> </span><span class="ff1a">lseek<span class="_ _45"> </span></span>befor<span class="lsf46">et<span class="_ _43"></span><span class="ls0">hread <span class="_ _9"></span>A</span></span></div><div class="t m0 x32 h26 y394c ff19 fsf fc0 sc0 ls0 ws0">calls<span class="_ _35"> </span><span class="ff1a">read</span><span class="lsf47">,t<span class="_ _43"></span><span class="ls0">hen <span class="_ _23"> </span>both <span class="_ _23"> </span>threads <span class="_ _23"> </span>will <span class="_ _23"> </span>end <span class="_ _23"> </span>up <span class="_ _23"> </span>reading <span class="_ _23"> </span>the <span class="_ _23"> </span>same <span class="_ _23"> </span>record. <span class="_ _45"> </span>Clearly<span class="_ _6"></span><span class="lsc4f">,t<span class="_ _43"></span><span class="ls0">his <span class="_ _23"> </span>isn’t</span></span></span></span></div><div class="t m0 x32 h2a y394d ff19 fsf fc0 sc0 ls0 ws0">what was intended.</div><div class="t m0 x3f h26 y394e ff19 fsf fc0 sc0 ls5f ws0">To <span class="_ _66"> </span>s<span class="_ _9"></span><span class="ls0">olve <span class="_ _23"></span>this <span class="_ _9"></span>problem, <span class="_ _3"></span>we <span class="_ _9"></span>can <span class="_ _23"></span>use<span class="_ _45"> </span><span class="ff1a">pread<span class="_ _45"> </span></span>to <span class="_ _9"></span>make <span class="_ _9"></span>the <span class="_ _9"></span>setting <span class="_ _9"></span>of <span class="_ _23"></span>the <span class="_ _9"></span>offset <span class="_ _3"></span>and <span class="_ _23"></span>the</span></div><div class="t m0 x32 h2a y394f ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">ading of the data one atomic operation.</span></div><div class="t m0 x21b h95 y3950 ff18 fs2d fc0 sc0 ls0 ws0">Thread A<span class="_ _254"> </span>Thread B</div><div class="t m0 x3f h57 y3951 ff1a fs2d fc0 sc0 ls0 ws0">pread(fd, buf1, 100, 300);<span class="_ _1c7"> </span>pread(fd, buf2, 100, 700);</div><div class="t m0 x32 h26 y3952 ff19 fsf fc0 sc0 ls0 ws0">Using<span class="_"> </span><span class="ff1a">pread</span>,<span class="_"> </span>we<span class="_"> </span>can ensur<span class="lsf48">et<span class="_ _d"></span><span class="ls0">hat thread A r<span class="_ _0"></span>eads the recor<span class="_ _0"></span>d<span class="_"> </span>at<span class="_"> </span>o<span class="ls45">ff</span>set <span class="_ _2"></span>300, whereas thr<span class="_ _0"></span>ead</span></span></div><div class="t m0 x32 h26 y3953 ff19 fsf fc0 sc0 lsf49 ws0">Br<span class="_ _8"></span><span class="ls0">eads <span class="_ _2"></span>the <span class="_ _3"></span>recor<span class="_ _0"></span><span class="lsf49">da<span class="_ _8"></span><span class="lse4d">to<span class="_ _4f"></span><span class="ls45">ff<span class="_ _2"></span><span class="ls0">set <span class="_ _2"></span>700.<span class="_ _16"> </span><span class="ls5f">We <span class="_ _e"> </span>c<span class="_ _9"></span></span>an <span class="_ _3"></span>use<span class="_ _47"> </span><span class="ff1a">pwrite<span class="_ _66"> </span></span>to <span class="_ _2"></span>solve <span class="_ _3"></span>the <span class="_ _2"></span>problem <span class="_ _2"></span>of <span class="_ _2"></span>concurrent</span></span></span></span></span></div><div class="t m0 x32 h2a y3954 ff19 fsf fc0 sc0 ls0 ws0">threads writing to the same ﬁle.</div><div class="t m0 x35 h53 y3955 ff16 fs2b fc0 sc0 ls0 ws0">12.11 <span class="_ _66"> </span>Summary</div><div class="t m0 x32 h2a y3956 ff19 fsf fc0 sc0 ls0 ws0">Threads <span class="_ _45"> </span>provide <span class="_ _35"> </span>an <span class="_ _35"> </span>alternative <span class="_ _35"> </span>model <span class="_ _45"> </span>for <span class="_ _35"> </span>partitioning <span class="_ _35"> </span>concurrent <span class="_ _35"> </span>tasks <span class="_ _35"> </span>in <span class="_ _35"> </span>UNIX</div><div class="t m0 x32 h2a y3957 ff19 fsf fc0 sc0 ls0 ws0">systems. <span class="_ _47"> </span>They<span class="_ _45"> </span>promote <span class="_ _2"></span>sharing <span class="_ _9"></span>among <span class="_ _3"></span>separate <span class="_ _9"></span>threads <span class="_ _2"></span>of <span class="_ _9"></span>control, <span class="_ _3"></span>but <span class="_ _3"></span>present <span class="_ _3"></span>unique</div><div class="t m0 x32 h2a y3958 ff19 fsf fc0 sc0 ls0 ws0">synchronization <span class="_ _53"> </span>problems. <span class="_ _59"> </span>In<span class="_ _59"> </span>this <span class="_ _e"> </span>chapter<span class="_ _1"></span>,<span class="_ _4b"> </span>we<span class="_ _59"> </span>looked <span class="_"> </span>at <span class="_ _e"> </span>how <span class="_"> </span>we <span class="_ _53"> </span>can <span class="_"> </span>ﬁne-tune <span class="_ _e"> </span>our</div><div class="t m0 x32 h2a y3959 ff19 fsf fc0 sc0 ls0 ws0">threads <span class="_ _42"> </span>and <span class="_ _42"> </span>their <span class="_ _42"> </span>synchronization <span class="_ _42"> </span>primitives.<span class="_ _65"> </span><span class="ls5f">We <span class="_ _45"> </span>d<span class="_ _9"></span></span>iscussed <span class="_ _53"> </span>reentrancy <span class="_ _42"> </span>with <span class="_ _42"> </span>threads.</div><div class="t m0 x32 h2a y395a ff19 fsf fc0 sc0 ls5f ws0">We <span class="_ _53"> </span>a<span class="_ _9"></span><span class="ls0">lso looked at how threads interact with some of the process-oriented system calls.</span></div><div class="t m0 x32 h53 y395b ff16 fs2b fc0 sc0 ls0 ws0">Exer<span class="_ _0"></span>cises</div><div class="t m0 x32 h5f y395c ff18 fs2d fc0 sc0 ls0 ws0">12.1<span class="_ _288"> </span><span class="ff19">Run <span class="_ _42"> </span>the <span class="_ _42"> </span>program <span class="_ _23"> </span>in <span class="_ _23"> </span>Figur<span class="lsf4a">e1<span class="_ _43"></span><span class="ls0">2.17 <span class="_ _42"> </span>on <span class="_ _42"> </span>a <span class="_ _23"> </span>Linux <span class="_ _42"> </span>system, <span class="_ _23"> </span>but <span class="_ _42"> </span>redirect <span class="_ _23"> </span>the <span class="_ _23"> </span>output <span class="_ _42"> </span>into <span class="_ _23"> </span>a <span class="_ _42"> </span>ﬁle.</span></span></span></div><div class="t m0 xe1 h5f y395d ff19 fs2d fc0 sc0 ls0 ws0">Explain the results.</div><div class="t m0 x32 h57 y395e ff18 fs2d fc0 sc0 ls0 ws0">12.2<span class="_ _288"> </span><span class="ff19">Implement<span class="_ _5c"> </span><span class="ff1a">putenv_r</span><span class="lsf4b">,ar<span class="_ _4d"></span><span class="ls0">eentrant <span class="_ _51"> </span>version <span class="_ _51"> </span>of<span class="_ _1a3"> </span><span class="ff1a">putenv</span><span class="lsf4c">.M<span class="_ _18c"></span><span class="ls0">ake <span class="_ _5a"> </span>sur<span class="lsf4b">et<span class="_ _95"></span><span class="ls0">hat <span class="_ _51"> </span>your</span></span></span></span></span></span></span></div><div class="t m0 xe1 h5f y395f ff19 fs2d fc0 sc0 ls0 ws0">implementation is async-signal safe as well as thread-safe.</div><div class="t m0 x32 h57 y3960 ff18 fs2d fc0 sc0 ls0 ws0">12.3<span class="_ _288"> </span><span class="ff19">Can <span class="_ _23"></span>you <span class="_ _9"></span>make <span class="_ _9"></span>the<span class="_ _47"> </span><span class="ff1a">getenv<span class="_ _45"> </span></span>function <span class="_ _9"></span>shown <span class="_ _9"></span>in <span class="_ _9"></span>Figur<span class="lsf4d">e1<span class="_ _8"></span><span class="ls0">2.13 <span class="_ _9"></span>async-signal <span class="_ _9"></span>safe <span class="_ _9"></span>by <span class="_ _23"></span>blocking</span></span></span></div><div class="t m0 xe1 h5f y3961 ff19 fs2d fc0 sc0 ls0 ws0">signals <span class="_ _42"> </span>at <span class="_"> </span>the <span class="_ _42"> </span>beginning <span class="_ _53"> </span>of <span class="_ _42"> </span>the <span class="_"> </span>function <span class="_ _42"> </span>and <span class="_ _53"> </span>restoring <span class="_ _42"> </span>the <span class="_ _53"> </span>previous <span class="_ _42"> </span>signal <span class="_ _53"> </span>mask <span class="_ _53"> </span>before</div><div class="t m0 xe1 h5f y3962 ff19 fs2d fc0 sc0 ls1e7 ws0">re<span class="ls0">turning? <span class="_"> </span>Explain.</span></div><div class="t m0 x32 h57 y3963 ff18 fs2d fc0 sc0 ls0 ws0">12.4<span class="_ _288"> </span><span class="ff19 ls467">Wr<span class="_ _9"></span><span class="ls0">ite a program to exercise the version of<span class="_"> </span><span class="ff1a">getenv<span class="_ _e"> </span></span>from Figur<span class="lsf4e">e1<span class="_ _d"></span><span class="ls0">2.13. <span class="_"> </span>Compile<span class="_"> </span>and run the</span></span></span></span></div><div class="t m0 xe1 h5f y3964 ff19 fs2d fc0 sc0 ls0 ws0">program on Fr<span class="_ _0"></span>eeBSD. <span class="_"> </span>What<span class="_"> </span>happens? <span class="_"> </span>Explain.</div><div class="t m0 x32 h5f y3965 ff18 fs2d fc0 sc0 ls0 ws0">12.5<span class="_ _288"> </span><span class="ff19">Given <span class="_ _23"> </span>that <span class="_ _23"> </span>you <span class="_ _23"> </span>can <span class="_ _23"> </span>create <span class="_ _9"></span>multiple <span class="_ _23"> </span>threads <span class="_ _23"></span>to <span class="_ _9"></span>perform <span class="_ _23"> </span>different <span class="_ _9"></span>tasks <span class="_ _23"> </span>within <span class="_ _23"> </span>a <span class="_ _23"> </span>program,</span></div><div class="t m0 xe1 h57 y3966 ff19 fs2d fc0 sc0 ls0 ws0">explain why you might still need to use<span class="_"> </span><span class="ff1a">fork</span>.</div><div class="t m0 x32 h5f y3967 ff18 fs2d fc0 sc0 ls0 ws0">12.6<span class="_ _288"> </span><span class="ff19">Reimplement <span class="_ _59"> </span>the <span class="_ _4b"> </span>program <span class="_ _44"> </span>in <span class="_ _4b"> </span>Figur<span class="lsf4f">e1<span class="_ _52"></span><span class="ls0">0.29 <span class="_ _4b"> </span>to <span class="_ _4b"> </span>make <span class="_ _4b"> </span>it <span class="_ _4b"> </span>thread-safe <span class="_ _4b"> </span>without <span class="_ _4b"> </span>using</span></span></span></div><div class="t m0 xe1 h57 y3968 ff1a fs2d fc0 sc0 ls0 ws0">nanosleep<span class="_ _e"> </span><span class="ff19">or<span class="_"> </span></span>clock_nanosleep<span class="ff19">.</span></div><div class="t m0 x32 h57 y3969 ff18 fs2d fc0 sc0 ls0 ws0">12.7<span class="_ _288"> </span><span class="ff19">After <span class="_ _3"></span>calling<span class="_ _66"> </span><span class="ff1a">fork</span><span class="lsf50">,c<span class="_ _d"></span><span class="ls0">ould <span class="_ _2"></span>we <span class="_ _2"></span>safely <span class="_ _3"></span>reinitialize <span class="_ _2"></span>a <span class="_ _2"></span>condition <span class="_ _3"></span>variable <span class="_ _2"></span>in <span class="_ _2"></span>the <span class="_ _3"></span>child <span class="_ _2"></span>process <span class="_ _2"></span>by</span></span></span></div><div class="t m0 xe1 h57 y396a ff19 fs2d fc0 sc0 ls0 ws0">ﬁrst <span class="_ _61"> </span>destroying <span class="_ _61"> </span>the <span class="_ _16"> </span>condition <span class="_ _16"> </span>variable <span class="_ _16"> </span>with<span class="_ _50"> </span><span class="ff1a">pthread_cond_destroy<span class="_ _50"> </span></span>and <span class="_ _61"> </span>then</div><div class="t m0 xe1 h57 y396b ff19 fs2d fc0 sc0 ls0 ws0">initializing it with<span class="_"> </span><span class="ff1a">pthread_cond_init</span>?</div><div class="t m0 x32 h57 y396c ff18 fs2d fc0 sc0 ls0 ws0">12.8<span class="_ _288"> </span><span class="ff19">The<span class="_"> </span><span class="ff1a">timeout<span class="_ _80"> </span></span>function in Figur<span class="ls110">e1<span class="_ _5"></span><span class="ls0">2.8 can be simpliﬁed substantially<span class="_ _4"></span><span class="ls614">.E<span class="_ _c"></span><span class="ls0">xplain how<span class="_ _6"></span>.</span></span></span></span></span></div><a class="l" href="#pf11" data-dest-detail='[17,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:80.894300px;bottom:820.656886px;width:90.803902px;height:19.680024px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
