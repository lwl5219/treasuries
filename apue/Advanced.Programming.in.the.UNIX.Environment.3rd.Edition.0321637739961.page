<div id="pf3c1" class="pf w4 h1f" data-page-no="3c1"><div class="pc pc3c1 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg3c1.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Appendix <span class="_"> </span>C<span class="_ _89"> </span>Chapter <span class="_"> </span>12<span class="_ _54"> </span>Solutions<span class="_ _1b"> </span><span class="ff18">927</span></div><div class="t m0 x32 h2a y12f ff18 fsf fc0 sc0 ls124 ws0">11<span class="_ _2"></span><span class="ls0">.2<span class="_ _9b"> </span><span class="ff19 ls5f">To <span class="_ _e"> </span>c<span class="_ _9"></span><span class="ls0">hange <span class="_ _2"></span>the <span class="_ _3"></span>thread <span class="_ _2"></span>ID <span class="_ _2"></span>of <span class="_ _2"></span>a <span class="_ _3"></span>pending <span class="_ _2"></span>job, <span class="_ _3"></span>the <span class="_ _2"></span>reader–writer <span class="_ _2"></span>lock <span class="_ _2"></span>must <span class="_ _2"></span>be <span class="_ _3"></span>held <span class="_ _2"></span>in</span></span></span></div><div class="t m0 xe2 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">write <span class="_"> </span>mode <span class="_ _e"> </span>to <span class="_"> </span>prevent <span class="_ _e"> </span>anyone <span class="_"> </span>from <span class="_ _e"> </span>searching <span class="_"> </span>the <span class="_ _e"> </span>list <span class="_"> </span>while <span class="_"> </span>the <span class="_ _e"> </span>ID <span class="_"> </span>is <span class="_"> </span>being</div><div class="t m0 xe2 h2a y131 ff19 fsf fc0 sc0 ls0 ws0">changed. <span class="_ _45"> </span>The<span class="_ _45"> </span>problem <span class="_ _9"></span>with <span class="_ _9"></span>the <span class="_ _9"></span>way <span class="_ _9"></span>the <span class="_ _23"></span>interfaces <span class="_ _9"></span>ar<span class="ls184c">ec<span class="_ _b"></span><span class="ls0">urr<span class="_ _1"></span>ently <span class="_ _23"></span>deﬁned <span class="_ _9"></span>is <span class="_ _9"></span>that</span></span></div><div class="t m0 xe2 h26 y132 ff19 fsf fc0 sc0 ls0 ws0">the ID <span class="_ _2"></span>of <span class="_ _2"></span>a job <span class="_ _2"></span>can <span class="_ _2"></span>change between <span class="_ _2"></span>the <span class="_ _2"></span>time that <span class="_ _2"></span>the <span class="_ _2"></span>job is <span class="_ _2"></span>found <span class="_ _2"></span>with<span class="_"> </span><span class="ff1a">job_find</span></div><div class="t m0 xe2 h26 y133 ff19 fsf fc0 sc0 ls0 ws0">and <span class="_ _9"></span>the <span class="_ _3"></span>job <span class="_ _9"></span>is <span class="_ _9"></span>removed <span class="_ _3"></span>from <span class="_ _9"></span>the <span class="_ _3"></span>list <span class="_ _9"></span>by <span class="_ _9"></span>calling<span class="_ _45"> </span><span class="ff1a">job_remove</span><span class="ls184d">.T<span class="_ _62"></span><span class="ls0">his <span class="_ _9"></span>problem <span class="_ _3"></span>can</span></span></div><div class="t m0 xe2 h26 y134 ff19 fsf fc0 sc0 ls0 ws0">be <span class="_ _3"></span>solved <span class="_ _3"></span>by <span class="_ _3"></span>embedding <span class="_ _3"></span>a <span class="_ _3"></span>reference <span class="_ _2"></span>count <span class="_ _3"></span>and <span class="_ _3"></span>a <span class="_ _3"></span>mutex <span class="_ _3"></span>inside <span class="_ _3"></span>the<span class="_ _47"> </span><span class="ff1a">job<span class="_ _45"> </span></span>structur<span class="_ _0"></span>e</div><div class="t m0 xe2 h26 y135 ff19 fsf fc0 sc0 ls0 ws0">and <span class="_ _2"></span>having<span class="_ _66"> </span><span class="ff1a">job_find<span class="_ _47"> </span></span>increment the <span class="_ _2"></span>refer<span class="_ _0"></span>ence <span class="_ _2"></span>count.<span class="_ _61"> </span>The <span class="_ _2"></span>code <span class="_ _2"></span>that <span class="_ _2"></span>changes <span class="_ _2"></span>the</div><div class="t m0 xe2 h2a y136 ff19 fsf fc0 sc0 ls0 ws0">ID can then avoid any job in the list that has a nonzer<span class="ls44">or<span class="_ _4f"></span><span class="ls0">eference count.</span></span></div><div class="t m0 x32 h2a y2938 ff18 fsf fc0 sc0 ls124 ws0">11<span class="_ _2"></span><span class="ls0">.3<span class="_ _9b"> </span><span class="ff19">First of all, <span class="_ _2"></span>the list <span class="_ _2"></span>is protected by <span class="_ _2"></span>a reader–writer lock, but <span class="_ _2"></span>the <span class="_ _2"></span>condition variable</span></span></div><div class="t m0 xe2 h2a yeb6 ff19 fsf fc0 sc0 ls0 ws0">needs <span class="_ _47"> </span>a <span class="_ _47"> </span>mutex <span class="_ _47"> </span>to <span class="_ _47"> </span>protect <span class="_ _66"> </span>the <span class="_ _47"> </span>condition.<span class="_ _5f"> </span>Second, <span class="_ _47"> </span>the <span class="_ _47"> </span>condition <span class="_ _47"> </span>each <span class="_ _47"> </span>thread</div><div class="t m0 xe2 h2a yeb7 ff19 fsf fc0 sc0 ls0 ws0">should <span class="_ _23"></span>wait <span class="_ _9"></span>to <span class="_ _23"> </span>be <span class="_ _23"></span>satisﬁed <span class="_ _23"></span>is <span class="_ _23"></span>that <span class="_ _9"></span>there<span class="_ _45"> </span>is<span class="_ _35"> </span>a<span class="_ _45"> </span>job <span class="_ _23"> </span>for <span class="_ _23"></span>it <span class="_ _23"></span>to <span class="_ _23"></span>pr<span class="_ _0"></span>ocess, <span class="_ _23"></span>so <span class="_ _9"></span>we <span class="_ _23"> </span>need <span class="_ _23"></span>to</div><div class="t m0 xe2 h2a yeb8 ff19 fsf fc0 sc0 ls0 ws0">create <span class="_ _9"></span>a <span class="_ _23"></span>per-thr<span class="_ _0"></span>ead <span class="_ _9"></span>data <span class="_ _23"> </span>structure<span class="_ _45"> </span>to<span class="_ _35"> </span>r<span class="_ _0"></span>epresent <span class="_ _9"></span>this <span class="_ _23"></span>condition.<span class="_ _5a"> </span>Alternatively<span class="_ _6"></span><span class="ls184e">,w<span class="_ _b"></span><span class="ls0">e</span></span></div><div class="t m0 xe2 h26 yeb9 ff19 fsf fc0 sc0 ls0 ws0">can <span class="_ _42"> </span>embed <span class="_ _53"> </span>the <span class="_ _53"> </span>mutex <span class="_ _53"> </span>and <span class="_ _53"> </span>condition <span class="_ _53"> </span>variable <span class="_ _53"> </span>in <span class="_ _53"> </span>the<span class="_ _44"> </span><span class="ff1a">queue<span class="_ _4b"> </span></span>structure, <span class="_ _42"> </span>but <span class="_ _53"> </span>this</div><div class="t m0 xe2 h2a yeba ff19 fsf fc0 sc0 ls0 ws0">means that <span class="_ _2"></span>all <span class="_ _2"></span>worker <span class="_ _2"></span>threads will wait <span class="_ _2"></span>on <span class="_ _2"></span>the <span class="_ _2"></span>same condition.<span class="_ _61"> </span>If <span class="_ _2"></span>ther<span class="ls1325">ea<span class="_ _4f"></span><span class="ls45">re <span class="_ _3"></span>m<span class="ls0">any</span></span></span></div><div class="t m0 xe2 h2b yebb ff19 fsf fc0 sc0 ls0 ws0">worker <span class="_ _66"> </span>threads, <span class="_ _66"> </span>we <span class="_ _47"> </span>can <span class="_"> </span>run <span class="_ _47"> </span>into <span class="_ _66"> </span>a<span class="_ _61"> </span><span class="ff1b">thundering <span class="_ _66"> </span>herd<span class="_ _61"> </span></span>problem, <span class="_ _66"> </span>whereby <span class="_ _66"> </span>many</div><div class="t m0 xe2 h2a yebc ff19 fsf fc0 sc0 ls0 ws0">threads ar<span class="lsf27">ea<span class="_ _4f"></span><span class="ls0">wakened <span class="_ _2"></span>without <span class="_ _2"></span>work <span class="_ _2"></span>to <span class="_ _2"></span>do, <span class="_ _2"></span>resulting <span class="_ _2"></span>in <span class="_ _2"></span>a <span class="_ _2"></span>waste <span class="_ _2"></span>of <span class="_ _2"></span>CPU <span class="_ _2"></span>resources</span></span></div><div class="t m0 xe2 h2a y4f96 ff19 fsf fc0 sc0 ls0 ws0">and increased lock contention.</div><div class="t m0 x32 h2a yebe ff18 fsf fc0 sc0 ls124 ws0">11<span class="_ _2"></span><span class="ls0">.4<span class="_ _9b"> </span><span class="ff19">It <span class="_ _66"> </span>depends <span class="_ _47"> </span>on <span class="_ _47"> </span>the <span class="_ _66"> </span>circumstances. <span class="_ _61"> </span>In<span class="_ _61"> </span>general, <span class="_ _47"> </span>both <span class="_ _47"> </span>can <span class="_ _47"> </span>be <span class="_ _66"> </span>correct, <span class="_ _47"> </span>but <span class="_ _66"> </span>each</span></span></div><div class="t m0 xe2 h2a yebf ff19 fsf fc0 sc0 ls0 ws0">alternative <span class="_ _e"> </span>has <span class="_"> </span>drawbacks.<span class="_ _48"> </span>In <span class="_"> </span>the <span class="_ _53"> </span>ﬁrst <span class="_"> </span>sequence, <span class="_ _e"> </span>the <span class="_"> </span>waiting <span class="_ _e"> </span>threads <span class="_ _e"> </span>will <span class="_"> </span>be</div><div class="t m0 xe2 h26 y4f98 ff19 fsf fc0 sc0 ls0 ws0">scheduled <span class="_ _23"></span>to <span class="_ _23"> </span>run <span class="_ _23"> </span>after <span class="_ _23"> </span>we <span class="_ _23"> </span>call<span class="_ _35"> </span><span class="ff1a">pthread_cond_broadcast</span><span class="ls184f">.I<span class="_ _26"></span><span class="ls129b">ft<span class="_ _43"></span><span class="ls0">he <span class="_ _42"> </span>program <span class="_ _9"></span>is</span></span></span></div><div class="t m0 xe2 h2a y20a ff19 fsf fc0 sc0 ls4e ws0">ru<span class="ls0">nning <span class="_ _47"> </span>on <span class="_"> </span>a <span class="_ _47"> </span>multiprocessor<span class="_ _6"></span><span class="ls1850">,s<span class="_ _5b"></span><span class="ls0">ome <span class="_ _66"> </span>threads <span class="_ _66"> </span>will <span class="_ _47"> </span>run <span class="_ _66"> </span>and <span class="_ _47"> </span>immediately <span class="_ _66"> </span>block</span></span></span></div><div class="t m0 xe2 h26 y20b ff19 fsf fc0 sc0 ls0 ws0">because we <span class="_ _2"></span>ar<span class="ls121b">es<span class="_ _4f"></span><span class="ls0">till <span class="_ _2"></span>holding the <span class="_ _2"></span>mutex (recall that<span class="_ _47"> </span><span class="ff1a">pthread_cond_wait<span class="_ _66"> </span></span><span class="ls45">re</span>turns</span></span></div><div class="t m0 xe2 h2a y20c ff19 fsf fc0 sc0 ls0 ws0">with <span class="_ _3"></span>the <span class="_ _3"></span>mutex <span class="_ _9"></span>held).<span class="_ _16"> </span>In <span class="_ _9"></span>the <span class="_ _3"></span>second <span class="_ _3"></span>sequence, <span class="_ _9"></span>a <span class="_ _3"></span>running <span class="_ _3"></span>thread <span class="_ _3"></span>can <span class="_ _3"></span>acquir<span class="ls178">et<span class="_ _8"></span><span class="ls0">he</span></span></div><div class="t m0 xe2 h2a y20d ff19 fsf fc0 sc0 ls0 ws0">mutex <span class="_ _42"> </span>between <span class="_ _23"> </span>steps <span class="_ _42"> </span>3 <span class="_ _42"> </span>and <span class="_ _23"> </span>4, <span class="_ _42"> </span>invalidate <span class="_ _42"> </span>the <span class="_ _42"> </span>condition, <span class="_ _23"> </span>and <span class="_ _42"> </span>release <span class="_ _23"> </span>the <span class="_ _42"> </span>mutex.</div><div class="t m0 xe2 h26 y20e ff19 fsf fc0 sc0 ls0 ws0">Then, <span class="_ _23"></span>when <span class="_ _23"> </span>we <span class="_ _23"> </span>call<span class="_ _35"> </span><span class="ff1a">pthread_cond_broadcast</span><span class="ls108c">,t<span class="_ _b"></span><span class="ls0">he <span class="_ _9"></span>condition <span class="_ _23"> </span>will <span class="_ _42"> </span>no <span class="_ _23"></span>longer</span></span></div><div class="t m0 xe2 h2a y4f99 ff19 fsf fc0 sc0 ls0 ws0">be <span class="_ _9"></span>true, <span class="_ _9"></span>and <span class="_ _9"></span>the <span class="_ _9"></span>threads <span class="_ _3"></span>will <span class="_ _9"></span>run <span class="_ _9"></span>needlessly<span class="_ _6"></span><span class="ls1851">.T<span class="_ _26"></span><span class="ls0">his <span class="_ _9"></span>is <span class="_ _9"></span>why <span class="_ _23"></span>the <span class="_ _3"></span>awakened <span class="_ _23"></span>thr<span class="_ _0"></span>eads</span></span></div><div class="t m0 xe2 h2a y20f ff19 fsf fc0 sc0 ls0 ws0">must <span class="_ _47"> </span>recheck <span class="_ _45"> </span>the <span class="_ _47"> </span>condition <span class="_ _45"> </span>and <span class="_ _47"> </span>not <span class="_ _45"> </span>assume <span class="_ _47"> </span>that <span class="_ _45"> </span>it <span class="_ _47"> </span>is <span class="_ _45"> </span>true <span class="_ _47"> </span>merely <span class="_ _45"> </span>because</div><div class="t m0 xe2 h26 y619e ff1a fsf fc0 sc0 ls0 ws0">pthread_cond_wait<span class="_ _80"> </span><span class="ff19 ls45">re<span class="_ _2"></span><span class="ls0">turned.</span></span></div><div class="t m0 x35 h27 y61a4 ff16 fsf fc0 sc0 ls0 ws0">Chapter <span class="_"> </span>12</div><div class="t m0 x32 h2a y4fa7 ff18 fsf fc0 sc0 ls0 ws0">12.1<span class="_ _210"> </span><span class="ff19">This <span class="_ _2"></span>is not <span class="_ _2"></span>a <span class="_ _2"></span>multithreading problem, as one might <span class="_ _2"></span>ﬁrst guess.<span class="_ _61"> </span>The standar<span class="ls271">dI<span class="_ _d"></span><span class="ls0">/O</span></span></span></div><div class="t m0 xe2 h26 y4fa8 ff19 fsf fc0 sc0 ls45 ws0">ro<span class="ls0">utines <span class="_ _3"></span>ar<span class="ls1852">ei<span class="_ _8"></span><span class="ls0">ndeed <span class="_ _2"></span>thread-safe. <span class="_ _66"> </span>When<span class="_ _47"> </span>we <span class="_ _2"></span>call<span class="_ _47"> </span><span class="ff1a">fork</span><span class="ls1852">,e<span class="_ _4f"></span><span class="ls0">ach <span class="_ _2"></span>process <span class="_ _2"></span>gets <span class="_ _2"></span>a <span class="_ _2"></span>copy <span class="_ _3"></span>of</span></span></span></span></span></div><div class="t m0 xe2 h2a y4fa9 ff19 fsf fc0 sc0 ls0 ws0">the <span class="_"> </span>standar<span class="_ _0"></span><span class="ls108d">dI<span class="_ _4a"></span><span class="ls0">/O <span class="_"> </span>data <span class="_ _e"> </span>structures. <span class="_ _59"> </span>When<span class="_ _59"> </span>we <span class="_"> </span>run <span class="_ _e"> </span>the <span class="_"> </span>pr<span class="_ _0"></span>ogram <span class="_"> </span>with <span class="_ _e"> </span>standard</span></span></div><div class="t m0 xe2 h2a y61a5 ff19 fsf fc0 sc0 ls0 ws0">output <span class="_ _2"></span>attached <span class="_ _3"></span>to <span class="_ _3"></span>a <span class="_ _2"></span>terminal, <span class="_ _3"></span>the <span class="_ _3"></span>output <span class="_ _2"></span>is <span class="_ _3"></span>line <span class="_ _3"></span>buffer<span class="_ _1"></span>ed, <span class="_ _3"></span>so <span class="_ _3"></span>every <span class="_ _2"></span>time <span class="_ _3"></span>we <span class="_ _3"></span>print</div><div class="t m0 xe2 h2a y61a6 ff19 fsf fc0 sc0 ls1853 ws0">al<span class="_ _4f"></span><span class="ls0">ine, <span class="_ _2"></span>the <span class="_ _2"></span>standar<span class="ls1853">dI<span class="_ _4f"></span><span class="ls0">/O <span class="_ _2"></span>library <span class="_ _2"></span>writes <span class="_ _2"></span>it <span class="_ _2"></span>to <span class="_ _2"></span>our <span class="_ _2"></span>terminal.<span class="_ _46"> </span>However<span class="_ _1"></span>,<span class="_ _66"> </span>if<span class="_ _47"> </span>we<span class="_"> </span>redirect</span></span></span></div><div class="t m0 xe2 h2a y61a7 ff19 fsf fc0 sc0 ls0 ws0">the <span class="_ _53"> </span>standar<span class="ls1854">do<span class="_ _55"></span><span class="ls0">utput <span class="_ _53"> </span>to <span class="_ _53"> </span>a <span class="_ _53"> </span>ﬁle, <span class="_ _53"> </span>then <span class="_ _53"> </span>the <span class="_ _53"> </span>standar<span class="ls123">do<span class="_ _c"></span><span class="ls0">utput <span class="_ _53"> </span>is <span class="_ _53"> </span>fully <span class="_ _53"> </span>buffered. <span class="_ _44"> </span>The</span></span></span></span></div><div class="t m0 xe2 h2a y61a8 ff19 fsf fc0 sc0 ls0 ws0">output is <span class="_ _2"></span>written <span class="_ _2"></span>when the <span class="_ _2"></span>buffer ﬁlls <span class="_ _2"></span>or <span class="_ _2"></span>the process closes <span class="_ _2"></span>the <span class="_ _2"></span>stream. <span class="_"> </span>When<span class="_ _66"> </span>we</div><div class="t m0 xe2 h26 y61a9 ff1a fsf fc0 sc0 ls0 ws0">fork<span class="_ _66"> </span><span class="ff19">in <span class="_ _2"></span>this example, <span class="_ _2"></span>the <span class="_ _2"></span>buffer contains <span class="_ _2"></span>several <span class="_ _2"></span>printed lines <span class="_ _2"></span>not <span class="_ _2"></span>yet <span class="_ _2"></span>written, <span class="_ _2"></span>so</span></div><div class="t m0 xe2 h2a y95a ff19 fsf fc0 sc0 ls0 ws0">when <span class="_ _9"></span>the <span class="_ _23"></span>parent <span class="_ _9"></span>and <span class="_ _9"></span>the <span class="_ _23"></span>child <span class="_ _9"></span>ﬁnally <span class="_ _23"></span>ﬂush <span class="_ _9"></span>their <span class="_ _23"></span>copies <span class="_ _9"></span>of <span class="_ _23"></span>the <span class="_ _9"></span>buffer<span class="_ _6"></span><span class="ls537">,t<span class="_ _b"></span><span class="ls0">he <span class="_ _23"></span>initial</span></span></div><div class="t m0 xe2 h2a y61aa ff19 fsf fc0 sc0 ls0 ws0">duplicate contents ar<span class="ls44">ew<span class="_ _4f"></span><span class="ls0">ritten to the ﬁle.</span></span></div><div class="t m0 x32 h2a y61ab ff18 fsf fc0 sc0 ls0 ws0">12.3<span class="_ _210"> </span><span class="ff19">Theoretically<span class="_ _4"></span>,<span class="_ _47"> </span>if<span class="_ _45"> </span>w<span class="ls9d1">ea<span class="_ _b"></span><span class="ls0">rrange <span class="_ _3"></span>for <span class="_ _3"></span>all <span class="_ _3"></span>signals <span class="_ _3"></span>to <span class="_ _3"></span>be <span class="_ _3"></span>blocked <span class="_ _3"></span>when <span class="_ _3"></span>the <span class="_ _3"></span>signal <span class="_ _3"></span>handler</span></span></span></div><div class="t m0 xe2 h2a y61ac ff19 fsf fc0 sc0 ls4e ws0">ru<span class="ls0">ns, <span class="_ _42"> </span>we <span class="_ _23"> </span>should <span class="_ _42"> </span>be <span class="_ _42"> </span>able <span class="_ _42"> </span>to <span class="_ _23"> </span>make <span class="_ _42"> </span>a <span class="_ _42"> </span>function <span class="_ _23"> </span>async-signal <span class="_ _42"> </span>safe.<span class="_ _54"> </span>The <span class="_ _42"> </span>pr<span class="_ _0"></span>oblem <span class="_ _42"> </span>is</span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
