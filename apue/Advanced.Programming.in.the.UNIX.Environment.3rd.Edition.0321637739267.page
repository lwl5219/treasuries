<div id="pf10b" class="pf w4 h1f" data-page-no="10b"><div class="pc pc10b w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg10b.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h7a ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>8.3<span class="_ _e8"> </span><span class="ff1a">fork<span class="_ _4b"> </span></span>Function<span class="_ _1b"> </span><span class="ff18">233</span></div><div class="t m0 x3f h2a y12f ff19 fsf fc0 sc0 ls0 ws0">Besides <span class="_ _2"></span>the <span class="_ _3"></span>open <span class="_ _3"></span>ﬁles, <span class="_ _3"></span>numerous <span class="_ _2"></span>other <span class="_ _3"></span>properties <span class="_ _2"></span>of <span class="_ _3"></span>the <span class="_ _3"></span>parent <span class="_ _2"></span>ar<span class="ls94d">ei<span class="_ _8"></span><span class="ls0">nherited <span class="_ _2"></span>by <span class="_ _3"></span>the</span></span></div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">child:</div><div class="t m0 x3f h2a y1f0a ff19 fsf fc0 sc0 ls49 ws0">•R<span class="_ _4d"></span><span class="ls0">eal user ID, real gr<span class="_ _0"></span>oup ID, ef<span class="_ _0"></span>fective user ID, and effective gr<span class="_ _0"></span>oup ID</span></div><div class="t m0 x3f h2a y1f0b ff19 fsf fc0 sc0 ls49 ws0">•S<span class="_ _4d"></span><span class="ls0">upplementary group IDs</span></div><div class="t m0 x3f h2a y1f0c ff19 fsf fc0 sc0 ls49 ws0">•P<span class="_ _4d"></span><span class="ls45">ro<span class="ls0">cess group ID</span></span></div><div class="t m0 x3f h2a y1fd ff19 fsf fc0 sc0 ls49 ws0">•S<span class="_ _4d"></span><span class="ls0">ession ID</span></div><div class="t m0 x3f h2a y1f0d ff19 fsf fc0 sc0 ls49 ws0">•C<span class="_ _4d"></span><span class="ls0">ontrolling terminal</span></div><div class="t m0 x3f h2a y921 ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he set-user-ID and set-gr<span class="_ _0"></span>oup-ID ﬂags</span></div><div class="t m0 x3f h2a y1f0e ff19 fsf fc0 sc0 ls49 ws0">•C<span class="_ _4d"></span><span class="ls0">urrent working dir<span class="_ _0"></span>ectory</span></div><div class="t m0 x3f h2a y14af ff19 fsf fc0 sc0 ls49 ws0">•R<span class="_ _4d"></span><span class="ls0">oot directory</span></div><div class="t m0 x3f h2a y202 ff19 fsf fc0 sc0 ls49 ws0">•F<span class="_ _4d"></span><span class="ls0">ile mode creation mask</span></div><div class="t m0 x3f h2a ya65 ff19 fsf fc0 sc0 ls49 ws0">•S<span class="_ _4d"></span><span class="ls0">ignal mask and dispositions</span></div><div class="t m0 x3f h2a y1f0f ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he close-on-exec ﬂag for any open ﬁle descriptors</span></div><div class="t m0 x3f h2a y1f10 ff19 fsf fc0 sc0 ls49 ws0">•E<span class="_ _4d"></span><span class="ls0">nvironment</span></div><div class="t m0 x3f h2a y1f11 ff19 fsf fc0 sc0 ls49 ws0">•A<span class="_ _4d"></span><span class="ls0">ttached shared memory segments</span></div><div class="t m0 x3f h2a y1f12 ff19 fsf fc0 sc0 ls49 ws0">•M<span class="_ _4d"></span><span class="ls0">emory mappings</span></div><div class="t m0 x3f h2a ya2b ff19 fsf fc0 sc0 ls49 ws0">•R<span class="_ _4d"></span><span class="ls0">esource limits</span></div><div class="t m0 x32 h2a y1b8 ff19 fsf fc0 sc0 ls0 ws0">The differ<span class="_ _0"></span>ences between the par<span class="_ _0"></span>ent and child are</div><div class="t m0 x3f h26 yfd4 ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he return values fr<span class="_ _0"></span>om<span class="_"> </span><span class="ff1a">fork<span class="_ _80"> </span></span>ar<span class="ls44">ed<span class="_ _d"></span><span class="ls0">iffer<span class="_ _0"></span>ent.</span></span></span></div><div class="t m0 x3f h2a y25a ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he process IDs ar<span class="_ _0"></span><span class="ls44">ed<span class="_ _d"></span><span class="ls0">iffer<span class="_ _0"></span>ent.</span></span></span></div><div class="t m0 x3f h2a y150f ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he two processes have different par<span class="_ _0"></span>ent process IDs: the parent pr<span class="_ _0"></span>ocess ID of the</span></div><div class="t m0 x15 h2a y1f13 ff19 fsf fc0 sc0 ls0 ws0">child is the parent; the par<span class="_ _0"></span>ent pr<span class="_ _0"></span>ocess ID of the parent doesn’t change.</div><div class="t m0 x3f h26 y1f14 ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he <span class="_ _53"> </span>child’s<span class="_ _44"> </span><span class="ff1a">tms_utime</span>,<span class="_ _4b"> </span><span class="ff1a">tms_stime</span>,<span class="_ _44"> </span><span class="ff1a">tms_cutime</span><span class="ls94e">,a<span class="_ _c"></span><span class="ls0">nd<span class="_ _4b"> </span><span class="ff1a">tms_cstime<span class="_ _44"> </span></span>values</span></span></span></div><div class="t m0 x15 h2a y1f15 ff19 fsf fc0 sc0 ls0 ws0">ar<span class="ls44">es<span class="_ _4f"></span><span class="ls0">et to 0 (these times ar<span class="ls44">ed<span class="_ _d"></span><span class="ls0">iscussed in Section 8.17).</span></span></span></span></div><div class="t m0 x3f h2a y1f16 ff19 fsf fc0 sc0 ls49 ws0">•F<span class="_ _4d"></span><span class="ls0">ile locks set by the parent ar<span class="_ _0"></span><span class="ls44">en<span class="_ _d"></span><span class="ls0">ot inherited by the child.</span></span></span></div><div class="t m0 x3f h2a y1f17 ff19 fsf fc0 sc0 ls49 ws0">•P<span class="_ _4d"></span><span class="ls0">ending alarms ar<span class="ls44">ec<span class="_ _4f"></span><span class="ls0">leared for the child.</span></span></span></div><div class="t m0 x3f h2a y1f18 ff19 fsf fc0 sc0 ls49 ws0">•T<span class="_ _4d"></span><span class="ls0">he set of pending signals for the child is set to the empty set.</span></div><div class="t m0 x32 h2a y212 ff19 fsf fc0 sc0 ls0 ws0">Many of these features haven’t been discussed yet<span class="_ _3"></span><span class="ls9d">—w<span class="_ _6"></span><span class="ls0">e’ll cover them in later chapters.</span></span></div><div class="t m0 x3f h26 y213 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _9"></span>two <span class="_ _9"></span>main <span class="_ _9"></span>reasons <span class="_ _9"></span>for<span class="_ _45"> </span><span class="ff1a">fork<span class="_ _45"> </span></span>to <span class="_ _9"></span>fail <span class="_ _9"></span>ar<span class="ls26c">e(<span class="_ _b"></span><span class="ls0">a) <span class="_ _9"></span>if <span class="_ _9"></span>too <span class="_ _9"></span>many <span class="_ _23"></span>processes <span class="_ _3"></span>ar<span class="ls94f">ea<span class="_ _b"></span><span class="ls0">lready <span class="_ _3"></span>in</span></span></span></span></div><div class="t m0 x32 h2a y214 ff19 fsf fc0 sc0 ls0 ws0">the system, which usually means that something <span class="_ _2"></span>else is wrong, or (b) if the total number</div><div class="t m0 x32 h2a y215 ff19 fsf fc0 sc0 ls0 ws0">of processes for <span class="_ _2"></span>this <span class="_ _2"></span>real user <span class="_ _2"></span>ID <span class="_ _2"></span>exceeds <span class="_ _2"></span>the system’s <span class="_ _2"></span>limit.<span class="_ _61"> </span>Recall <span class="_ _2"></span>from Figur<span class="ls8d7">e2<span class="_ _4f"></span><span class="ls0">.1<span class="_ _1"></span><span class="ls8d7">1t<span class="_ _d"></span><span class="ls0">hat</span></span></span></span></div><div class="t m0 x32 h26 y216 ff1a fsf fc0 sc0 ls0 ws0">CHILD_MAX<span class="_ _66"> </span><span class="ff19">speciﬁes <span class="_ _2"></span>the <span class="_ _2"></span>maximum number <span class="_ _2"></span>of <span class="_ _2"></span>simultaneous <span class="_ _2"></span>processes per <span class="_ _2"></span>real user <span class="_ _2"></span>ID.</span></div><div class="t m0 x3f h26 y217 ff19 fsf fc0 sc0 ls0 ws0">Ther<span class="ls44">ea<span class="_ _4f"></span><span class="ls45">re <span class="_ _3"></span>t<span class="ls0">wo uses for<span class="_"> </span><span class="ff1a">fork</span>:</span></span></span></div><div class="t m0 x3f h2a y1c9 ff19 fsf fc0 sc0 ls0 ws0">1. <span class="_ _51"> </span>When<span class="_ _35"> </span><span class="ls950">ap<span class="_ _43"></span><span class="ls45">ro<span class="_ _2"></span><span class="ls0">cess <span class="_ _42"> </span>wants <span class="_ _23"> </span>to <span class="_ _42"> </span>duplicate <span class="_ _42"> </span>itself <span class="_ _42"> </span>so <span class="_ _23"> </span>that <span class="_ _42"> </span>the <span class="_ _42"> </span>parent <span class="_ _23"></span>and <span class="_ _42"> </span>the <span class="_ _23"> </span>child <span class="_ _42"> </span>can</span></span></span></div><div class="t m0 x41 h2a y1ca ff19 fsf fc0 sc0 ls0 ws0">each <span class="_ _42"> </span>execute <span class="_ _42"> </span>differ<span class="_ _1"></span>ent <span class="_ _42"> </span>sections <span class="_ _42"> </span>of <span class="_ _42"> </span>code <span class="_ _42"> </span>at <span class="_ _42"> </span>the <span class="_ _42"> </span>same <span class="_ _42"> </span>time.<span class="_ _51"> </span>This <span class="_ _42"> </span>is <span class="_ _42"> </span>common <span class="_ _42"> </span>for</div><div class="t m0 x41 h2a y1cc ff19 fsf fc0 sc0 ls0 ws0">network servers<span class="_ _9"></span><span class="ls9d">—t<span class="_ _1"></span><span class="ls0">he parent waits <span class="_ _2"></span>for a <span class="_ _2"></span>service <span class="_ _2"></span>request from a client.<span class="_ _61"> </span>When <span class="_ _2"></span>the</span></span></div><div class="t m0 x41 h26 y1cd ff19 fsf fc0 sc0 ls45 ws0">re<span class="ls0">quest <span class="_ _3"></span>arrives, <span class="_ _2"></span>the <span class="_ _3"></span>parent calls<span class="_ _47"> </span><span class="ff1a">fork<span class="_ _47"> </span></span>and <span class="_ _2"></span>lets <span class="_ _2"></span>the <span class="_ _3"></span>child <span class="_ _2"></span>handle <span class="_ _3"></span>the <span class="_ _2"></span>request. <span class="_ _66"> </span>The</span></div><div class="t m0 x41 h2a y1ce ff19 fsf fc0 sc0 ls0 ws0">parent goes back to waiting for the next service r<span class="_ _0"></span>equest to arrive.</div><div class="t m0 x3f h2a y1f19 ff19 fsf fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>When<span class="_ _59"> </span><span class="ls951">ap<span class="_ _4a"></span><span class="ls45">ro<span class="_ _2"></span><span class="ls0">cess <span class="_"> </span>wants <span class="_"> </span>to <span class="_ _e"> </span>execute <span class="_"> </span>a <span class="_"> </span>dif<span class="_ _0"></span>ferent <span class="_ _e"> </span>program. <span class="_ _59"> </span>This<span class="_ _59"> </span>is <span class="_"> </span>common <span class="_"> </span>for</span></span></span></div><div class="t m0 x41 h26 y1f1a ff19 fsf fc0 sc0 ls0 ws0">shells. <span class="_ _45"> </span>In<span class="_ _47"> </span>this <span class="_ _9"></span>case, <span class="_ _9"></span>the <span class="_ _9"></span>child <span class="_ _3"></span>does <span class="_ _9"></span>an<span class="_ _45"> </span><span class="ff1a">exec<span class="_ _45"> </span></span>(which <span class="_ _3"></span>we <span class="_ _9"></span>describe <span class="_ _9"></span>in <span class="_ _9"></span>Section <span class="_ _3"></span>8.10)</div><div class="t m0 x41 h26 y1f1b ff19 fsf fc0 sc0 ls0 ws0">right after it returns fr<span class="_ _0"></span>om the<span class="_"> </span><span class="ff1a">fork</span>.</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
