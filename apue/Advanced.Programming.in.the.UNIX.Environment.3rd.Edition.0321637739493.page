<div id="pf1ed" class="pf w4 h1f" data-page-no="1ed"><div class="pc pc1ed w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1ed.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h7a ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>12.9<span class="_ _20d"> </span>Threads <span class="_"> </span>and<span class="_ _4b"> </span><span class="ff1a">fork<span class="_ _1b"> </span><span class="ff18">459</span></span></div><div class="t m0 x3f h2a y12f ff19 fsf fc0 sc0 ls0 ws0">3. <span class="_ _51"> </span>A<span class="_"> </span>child process is cr<span class="_ _0"></span>eated.</div><div class="t m0 x3f h2b y95d ff19 fsf fc0 sc0 ls0 ws0">4. <span class="_ _51"> </span>The<span class="_ _47"> </span><span class="ff1b">child<span class="_ _66"> </span></span>fork <span class="_ _3"></span>handler <span class="_ _2"></span>from <span class="_ _2"></span>module <span class="_ _2"></span>B <span class="_ _3"></span>is <span class="_ _2"></span>called <span class="_ _3"></span>to <span class="_ _2"></span>release <span class="_ _2"></span>all <span class="_ _2"></span>of <span class="_ _3"></span>module <span class="_ _2"></span>B’s <span class="_ _3"></span>locks</div><div class="t m0 x41 h2a y3eb ff19 fsf fc0 sc0 ls0 ws0">in the child process.</div><div class="t m0 x3f h2b y3915 ff19 fsf fc0 sc0 ls0 ws0">5. <span class="_ _51"> </span>The<span class="_ _66"> </span><span class="ff1b">child<span class="_ _66"> </span></span>fork <span class="_ _2"></span>handler <span class="_ _2"></span>from module <span class="_ _2"></span>A is <span class="_ _2"></span>called <span class="_ _2"></span>to <span class="_ _2"></span>release all <span class="_ _2"></span>of module <span class="_ _2"></span>A<span class="_ _1"></span>’s locks</div><div class="t m0 x41 h2a y2861 ff19 fsf fc0 sc0 ls0 ws0">in the child process.</div><div class="t m0 x3f h26 y135 ff19 fsf fc0 sc0 ls0 ws0">6. <span class="_ _51"> </span>The<span class="_"> </span><span class="ff1a">fork<span class="_ _80"> </span></span>function returns to the child.</div><div class="t m0 x3f h2b y1b0 ff19 fsf fc0 sc0 ls0 ws0">7. <span class="_ _51"> </span>The<span class="_ _44"> </span><span class="ff1b">parent<span class="_ _44"> </span></span>fork <span class="_ _53"> </span>handler <span class="_ _42"> </span>from <span class="_ _53"> </span>module <span class="_ _42"> </span>B <span class="_ _53"> </span>is <span class="_ _53"> </span>called <span class="_ _53"> </span>to <span class="_ _42"> </span>release <span class="_ _53"> </span>all <span class="_ _42"> </span>of <span class="_ _53"> </span>module <span class="_ _53"> </span>B’s</div><div class="t m0 x41 h2a y153 ff19 fsf fc0 sc0 ls0 ws0">locks in the parent pr<span class="_ _0"></span>ocess.</div><div class="t m0 x3f h2b y1b1 ff19 fsf fc0 sc0 ls0 ws0">8. <span class="_ _51"> </span>The<span class="_ _44"> </span><span class="ff1b">parent<span class="_ _35"> </span></span>fork <span class="_ _42"> </span>handler <span class="_ _42"> </span>from <span class="_ _42"> </span>module <span class="_ _42"> </span>A <span class="_ _42"> </span>is <span class="_ _42"> </span>called <span class="_ _42"> </span>to <span class="_ _42"> </span>release <span class="_ _23"> </span>all <span class="_ _42"> </span>of <span class="_ _53"> </span>module <span class="_ _42"> </span>A<span class="_ _6"></span>’s</div><div class="t m0 x41 h2a y157 ff19 fsf fc0 sc0 ls0 ws0">locks in the parent pr<span class="_ _0"></span>ocess.</div><div class="t m0 x3f h26 y254 ff19 fsf fc0 sc0 ls0 ws0">9. <span class="_ _51"> </span>The<span class="_"> </span><span class="ff1a">fork<span class="_ _80"> </span></span>function returns to the parent.</div><div class="t m0 x3f h2a ya66 ff19 fsf fc0 sc0 ls0 ws0">If <span class="_ _42"> </span>the <span class="_ _53"> </span>fork <span class="_ _42"> </span>handlers <span class="_ _53"> </span>serve <span class="_ _53"> </span>to <span class="_ _42"> </span>clean <span class="_ _53"> </span>up <span class="_ _42"> </span>the <span class="_ _53"> </span>lock <span class="_ _53"> </span>state, <span class="_ _42"> </span>what <span class="_ _53"> </span>cleans <span class="_ _42"> </span>up <span class="_ _53"> </span>the <span class="_ _53"> </span>state <span class="_ _42"> </span>of</div><div class="t m0 x32 h2a ya67 ff19 fsf fc0 sc0 ls0 ws0">condition variables?<span class="_ _46"> </span>On some implementations, condition <span class="_ _2"></span>variables might not need <span class="_ _2"></span>any</div><div class="t m0 x32 h2a ya68 ff19 fsf fc0 sc0 ls0 ws0">cleaning <span class="_ _5a"> </span>up.<span class="_ _3a"> </span>However<span class="_ _1"></span>,<span class="_ _1a3"> </span>an<span class="_ _1a3"> </span>implementation <span class="_ _5a"> </span>that <span class="_ _5a"> </span>uses <span class="_ _51"> </span>a <span class="_ _16"> </span>lock <span class="_ _51"> </span>as <span class="_ _16"> </span>part <span class="_ _51"> </span>of <span class="_ _5a"> </span>the</div><div class="t m0 x32 h2a ya69 ff19 fsf fc0 sc0 ls0 ws0">implementation <span class="_ _2"></span>of <span class="_ _3"></span>condition <span class="_ _3"></span>variables <span class="_ _3"></span>will <span class="_ _2"></span>requir<span class="lsf3d">ec<span class="_ _8"></span><span class="ls0">leaning <span class="_ _2"></span>up.<span class="_ _16"> </span>The <span class="_ _3"></span>problem <span class="_ _2"></span>is <span class="_ _3"></span>that <span class="_ _3"></span>no</span></span></div><div class="t m0 x32 h2a ya6b ff19 fsf fc0 sc0 ls0 ws0">interface <span class="_ _3"></span>exists <span class="_ _2"></span>to <span class="_ _3"></span>allow <span class="_ _3"></span>us <span class="_ _3"></span>to <span class="_ _3"></span>do <span class="_ _3"></span>this.<span class="_ _16"> </span>If <span class="_ _3"></span>the <span class="_ _3"></span>lock <span class="_ _3"></span>is <span class="_ _3"></span>embedded <span class="_ _3"></span>in <span class="_ _3"></span>the <span class="_ _3"></span>condition <span class="_ _3"></span>variable</div><div class="t m0 x32 h26 y150d ff19 fsf fc0 sc0 ls0 ws0">data <span class="_ _2"></span>structure, then <span class="_ _2"></span>we <span class="_ _2"></span>can’t <span class="_ _2"></span>use <span class="_ _2"></span>condition <span class="_ _2"></span>variables <span class="_ _2"></span>after <span class="_ _2"></span>calling<span class="_ _47"> </span><span class="ff1a">fork</span><span class="lsf3e">,b<span class="_ _4f"></span><span class="ls0">ecause <span class="_ _2"></span>ther<span class="lsf3e">ei<span class="_ _4f"></span><span class="ls0">s</span></span></span></span></div><div class="t m0 x32 h2a ya2c ff19 fsf fc0 sc0 ls0 ws0">no <span class="_ _9"></span>portable <span class="_ _9"></span>way <span class="_ _23"></span>to <span class="_ _9"></span>clean <span class="_ _9"></span>up <span class="_ _23"></span>its <span class="_ _9"></span>state.<span class="_ _5a"> </span>On <span class="_ _9"></span>the <span class="_ _23"></span>other <span class="_ _9"></span>hand, <span class="_ _9"></span>if <span class="_ _23"></span>an <span class="_ _9"></span>implementation <span class="_ _9"></span>uses <span class="_ _23"></span>a</div><div class="t m0 x32 h2a ya2d ff19 fsf fc0 sc0 ls0 ws0">global <span class="_ _66"> </span>lock <span class="_ _47"> </span>to <span class="_ _47"> </span>protect <span class="_"> </span>all <span class="_ _47"> </span>condition <span class="_ _47"> </span>variable <span class="_ _66"> </span>data <span class="_ _47"> </span>structur<span class="_ _0"></span>es <span class="_ _66"> </span>in <span class="_ _47"> </span>a <span class="_ _47"> </span>process, <span class="_"> </span>then <span class="_ _47"> </span>the</div><div class="t m0 x32 h26 ya2e ff19 fsf fc0 sc0 ls0 ws0">implementation <span class="_ _42"> </span>itself <span class="_ _42"> </span>can <span class="_ _42"> </span>clean <span class="_ _53"> </span>up <span class="_ _42"> </span>the <span class="_ _42"> </span>lock <span class="_ _53"> </span>in <span class="_ _42"> </span>the<span class="_ _44"> </span><span class="ff1a">fork<span class="_ _44"> </span></span>library <span class="_ _42"> </span>routine. <span class="_ _44"> </span>Application</div><div class="t m0 x32 h2a ya2f ff19 fsf fc0 sc0 ls0 ws0">programs shouldn’t r<span class="_ _0"></span>ely on implementation details like this, however<span class="_ _6"></span>.</div><div class="t m0 x35 h27 y3916 ff16 fsf fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h26 y1cb6 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _2"></span>program in <span class="_ _2"></span>Figur<span class="lsaf7">e1<span class="_ _4f"></span><span class="ls0">2.17 <span class="_ _2"></span>illustrates <span class="_ _2"></span>the <span class="_ _2"></span>use <span class="_ _2"></span>of<span class="_ _66"> </span><span class="ff1a">pthread_atfork<span class="_ _47"> </span></span>and fork <span class="_ _2"></span>handlers.</span></span></div><div class="t m0 x32 h4e y3917 ff1a fs28 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h4e y3918 ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h4e y3919 ff1a fs28 fc0 sc0 ls0 ws0">pthread_mutex_t lock1 = PTHREAD_MUTEX_INITIALIZER;</div><div class="t m0 x32 h4e y391a ff1a fs28 fc0 sc0 ls0 ws0">pthread_mutex_t lock2 = PTHREAD_MUTEX_INITIALIZER;</div><div class="t m0 x32 h4e y391b ff1a fs28 fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h4e y391c ff1a fs28 fc0 sc0 ls0 ws0">prepare(void)</div><div class="t m0 x32 h4e y391d ff1a fs28 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h4e y391e ff1a fs28 fc0 sc0 ls0 ws0">int err;</div><div class="t m0 x8a h4e y391f ff1a fs28 fc0 sc0 ls0 ws0">printf(&quot;preparing locks...\n&quot;);</div><div class="t m0 x8a h4e y3920 ff1a fs28 fc0 sc0 ls0 ws0">if ((err = pthread_mutex_lock(&amp;lock1)) != 0)</div><div class="t m0 x9d h4e y3921 ff1a fs28 fc0 sc0 ls0 ws0">err_cont(err, &quot;can’t lock lock1 in prepare handler&quot;);</div><div class="t m0 x8a h4e y3922 ff1a fs28 fc0 sc0 ls0 ws0">if ((err = pthread_mutex_lock(&amp;lock2)) != 0)</div><div class="t m0 x9d h4e y3923 ff1a fs28 fc0 sc0 ls0 ws0">err_cont(err, &quot;can’t lock lock2 in prepare handler&quot;);</div><div class="t m0 x32 h4e y3924 ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h4e y3925 ff1a fs28 fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h4e y3926 ff1a fs28 fc0 sc0 ls0 ws0">parent(void)</div><div class="t m0 x32 h4e y3927 ff1a fs28 fc0 sc0 ls0 ws0">{</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
