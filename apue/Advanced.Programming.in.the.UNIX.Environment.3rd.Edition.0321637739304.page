<div id="pf130" class="pf w4 h1f" data-page-no="130"><div class="pc pc130 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg130.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">270<span class="_ _1b"> </span><span class="ff19">Process <span class="_"> </span>Contr<span class="_ _0"></span>ol <span class="_ _222"> </span>Chapter<span class="_ _4b"> </span>8</span></div><div class="t m0 x62 h57 yf5f ff1a fs2d fc0 sc0 ls0 ws0">typedef <span class="_"> </span>u_short<span class="_"> </span>comp_t; <span class="_"> </span>/*<span class="_"> </span>3-bit base 8 exponent; 13-bit fraction */</div><div class="t m0 x62 h57 y2372 ff1a fs2d fc0 sc0 ls0 ws0">struct <span class="_"> </span>acct</div><div class="t m0 x62 h57 y2373 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x14a h57 y2374 ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _d9"> </span>ac_flag;<span class="_ _15"> </span>/* flag (see Figure 8.26) */</div><div class="t m0 x14a h57 y2375 ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _d9"> </span>ac_stat;<span class="_ _15"> </span>/* termination status (signal &amp; core flag only) */</div><div class="t m0 x6b h57 y2376 ff1a fs2d fc0 sc0 ls0 ws0">/* (Solaris only) */</div><div class="t m0 x14a h57 y2377 ff1a fs2d fc0 sc0 ls0 ws0">uid_t <span class="_"> </span>ac_uid;<span class="_ _8a"> </span>/* real user ID */</div><div class="t m0 x14a h57 y2378 ff1a fs2d fc0 sc0 ls0 ws0">gid_t <span class="_"> </span>ac_gid;<span class="_ _8a"> </span>/* real group ID */</div><div class="t m0 x14a h57 y2379 ff1a fs2d fc0 sc0 ls0 ws0">dev_t <span class="_"> </span>ac_tty;<span class="_ _8a"> </span>/* controlling terminal */</div><div class="t m0 x14a h57 y237a ff1a fs2d fc0 sc0 ls0 ws0">time_t ac_btime;<span class="_ _68"> </span>/* starting calendar time */</div><div class="t m0 x14a h57 y237b ff1a fs2d fc0 sc0 ls0 ws0">comp_t ac_utime;<span class="_ _68"> </span>/* user CPU time */</div><div class="t m0 x14a h57 y237c ff1a fs2d fc0 sc0 ls0 ws0">comp_t ac_stime;<span class="_ _68"> </span>/* system CPU time */</div><div class="t m0 x14a h57 y237d ff1a fs2d fc0 sc0 ls0 ws0">comp_t ac_etime;<span class="_ _68"> </span>/* elapsed time */</div><div class="t m0 x14a h57 y237e ff1a fs2d fc0 sc0 ls0 ws0">comp_t ac_mem;<span class="_ _8a"> </span>/* average memory usage */</div><div class="t m0 x14a h57 y237f ff1a fs2d fc0 sc0 ls0 ws0">comp_t ac_io;<span class="_ _189"> </span>/* bytes transferred (by read and write) */</div><div class="t m0 x6b h57 y2380 ff1a fs2d fc0 sc0 ls0 ws0">/* &quot;blocks&quot; on BSD systems */</div><div class="t m0 x14a h57 y2381 ff1a fs2d fc0 sc0 ls0 ws0">comp_t ac_rw;<span class="_ _189"> </span>/* blocks read or written */</div><div class="t m0 x6b h57 y2382 ff1a fs2d fc0 sc0 ls0 ws0">/* (not present on BSD systems) */</div><div class="t m0 x14a h57 y2383 ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _d9"> </span>ac_comm[8];<span class="_"> </span>/* command name: [8] for Solaris, */</div><div class="t m0 x6b h57 y2384 ff1a fs2d fc0 sc0 ls0 ws0">/* [10] for Mac OS X, [16] for FreeBSD, and */</div><div class="t m0 x6b h57 y2385 ff1a fs2d fc0 sc0 ls0 ws0">/* [17] for Linux */</div><div class="t m0 x62 h57 y2386 ff1a fs2d fc0 sc0 ls0 ws0">};</div><div class="t m0 x3f h2a y2387 ff19 fsf fc0 sc0 ls65 ws0">Ti<span class="_ _3"></span><span class="ls0">mes <span class="_ _42"> </span>ar<span class="lsa63">er<span class="_ _c"></span><span class="ls0">ecorded <span class="_ _23"> </span>in <span class="_ _42"> </span>units <span class="_ _42"> </span>of <span class="_ _42"> </span>clock <span class="_ _42"> </span>ticks <span class="_ _42"> </span>on <span class="_ _42"> </span>most <span class="_ _42"> </span>platforms, <span class="_ _42"> </span>but <span class="_ _42"> </span>FreeBSD <span class="_ _42"> </span>stores</span></span></span></div><div class="t m0 x32 h26 y2388 ff19 fsf fc0 sc0 ls0 ws0">microseconds <span class="_ _44"> </span>instead.<span class="_ _93"> </span>The<span class="_ _54"> </span><span class="ff1a">ac_flag<span class="_ _65"> </span></span>member <span class="_ _4b"> </span>recor<span class="_ _1"></span>ds <span class="_ _4b"> </span>certain <span class="_ _4b"> </span>events <span class="_ _44"> </span>during <span class="_ _4b"> </span>the</div><div class="t m0 x32 h2a y2389 ff19 fsf fc0 sc0 ls0 ws0">execution of the process. <span class="_"> </span>These<span class="_"> </span>events ar<span class="_ _0"></span><span class="ls44">ed<span class="_ _d"></span><span class="ls0">escribed in Figur<span class="ls44">e8<span class="_ _4f"></span><span class="ls0">.26.</span></span></span></span></div><div class="t m0 x3f h2a y238a ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _53"> </span>data <span class="_ _53"> </span>requir<span class="_ _0"></span>ed <span class="_ _53"> </span>for <span class="_ _53"> </span>the <span class="_ _53"> </span>accounting <span class="_ _53"> </span>record, <span class="_ _42"> </span>such <span class="_ _53"> </span>as <span class="_ _53"> </span>CPU <span class="_ _e"> </span>times <span class="_ _53"> </span>and <span class="_ _53"> </span>number <span class="_ _53"> </span>of</div><div class="t m0 x32 h2a y238b ff19 fsf fc0 sc0 ls0 ws0">characters <span class="_ _35"> </span>transferred, <span class="_ _45"> </span>is <span class="_ _35"> </span>kept <span class="_ _35"> </span>by <span class="_ _35"> </span>the <span class="_ _35"> </span>kernel <span class="_ _35"> </span>in <span class="_ _35"> </span>the <span class="_ _35"> </span>process <span class="_ _35"> </span>table <span class="_ _35"> </span>and <span class="_ _35"> </span>initialized</div><div class="t m0 x32 h26 y238c ff19 fsf fc0 sc0 ls0 ws0">whenever a <span class="_ _2"></span>new <span class="_ _2"></span>process is <span class="_ _2"></span>created, as in <span class="_ _2"></span>the <span class="_ _2"></span>child <span class="_ _2"></span>after <span class="_ _2"></span>a<span class="_"> </span><span class="ff1a">fork</span><span class="lsa64">.E<span class="_ _4a"></span><span class="ls0">ach accounting <span class="_ _2"></span>recor<span class="_ _0"></span>d</span></span></div><div class="t m0 x32 h2a y238d ff19 fsf fc0 sc0 ls0 ws0">is written when the process terminates.<span class="_ _59"> </span>This has two consequences.</div><div class="t m0 x3f h2a y238e ff19 fsf fc0 sc0 ls0 ws0">First, <span class="_ _2"></span>we <span class="_ _2"></span>don’t <span class="_ _3"></span>get <span class="_ _2"></span>accounting <span class="_ _2"></span>records for <span class="_ _3"></span>processes that <span class="_ _3"></span>never <span class="_ _2"></span>terminate.<span class="_ _61"> </span>Processes</div><div class="t m0 x32 h26 y238f ff19 fsf fc0 sc0 ls0 ws0">like<span class="_"> </span><span class="ff1a">init<span class="_ _66"> </span></span>that run for the lifetime <span class="_ _2"></span>of the system don’t <span class="_ _2"></span>generate accounting records. <span class="_"> </span>This</div><div class="t m0 x32 h2a y2390 ff19 fsf fc0 sc0 ls0 ws0">also applies to kernel daemons, which normally don’t exit.</div><div class="t m0 x3f h2a y2391 ff19 fsf fc0 sc0 ls0 ws0">Second, <span class="_ _44"> </span>the <span class="_ _4b"> </span>order <span class="_ _44"> </span>of <span class="_ _4b"> </span>the <span class="_ _4b"> </span>recor<span class="_ _1"></span>ds <span class="_ _4b"> </span>in <span class="_ _4b"> </span>the <span class="_ _4b"> </span>accounting <span class="_ _44"> </span>ﬁle <span class="_ _4b"> </span>corresponds <span class="_ _44"> </span>to <span class="_ _4b"> </span>the</div><div class="t m0 x32 h2a y2392 ff19 fsf fc0 sc0 ls0 ws0">termination <span class="_ _3"></span>order <span class="_ _9"></span>of <span class="_ _3"></span>the <span class="_ _9"></span>processes, <span class="_ _3"></span>not <span class="_ _9"></span>the <span class="_ _9"></span>order <span class="_ _3"></span>in <span class="_ _9"></span>which <span class="_ _3"></span>they <span class="_ _9"></span>wer<span class="lsa65">es<span class="_ _b"></span><span class="ls0">tarted. <span class="_ _45"> </span>T<span class="_ _6"></span><span class="lsa65">ok<span class="_ _b"></span><span class="ls0">now</span></span></span></span></div><div class="t m0 x32 h2a y2393 ff19 fsf fc0 sc0 ls0 ws0">the <span class="_ _42"> </span>starting <span class="_ _42"> </span>order<span class="_ _6"></span>,<span class="_ _44"> </span>we<span class="_ _44"> </span>would <span class="_ _53"> </span>have <span class="_ _42"> </span>to <span class="_ _53"> </span>go <span class="_ _42"> </span>through <span class="_ _42"> </span>the <span class="_ _53"> </span>accounting <span class="_ _42"> </span>ﬁle <span class="_ _42"> </span>and <span class="_ _53"> </span>sort <span class="_ _42"> </span>by <span class="_ _53"> </span>the</div><div class="t m0 x32 h2a y2394 ff19 fsf fc0 sc0 ls0 ws0">starting calendar <span class="_ _2"></span>time.<span class="_ _46"> </span>But this <span class="_ _2"></span>isn’t perfect, <span class="_ _2"></span>since calendar <span class="_ _2"></span>times are<span class="_"> </span>in<span class="_ _66"> </span>units of <span class="_ _2"></span>seconds</div><div class="t m0 x32 h2a y2395 ff19 fsf fc0 sc0 ls0 ws0">(Section <span class="_ _23"></span>1.10), <span class="_ _23"> </span>and <span class="_ _23"> </span>it’s <span class="_ _23"> </span>possible <span class="_ _23"> </span>for <span class="_ _42"> </span>many <span class="_ _23"></span>processes <span class="_ _9"></span>to <span class="_ _42"> </span>be <span class="_ _23"></span>started <span class="_ _23"></span>in <span class="_ _23"></span>any <span class="_ _23"> </span>given <span class="_ _23"> </span>second.</div><div class="t m0 x32 h2a y2396 ff19 fsf fc0 sc0 ls0 ws0">Alternatively<span class="_ _4"></span><span class="lsa66">,t<span class="_ _d"></span><span class="ls0">he <span class="_ _2"></span>elapsed time <span class="_ _2"></span>is <span class="_ _2"></span>given <span class="_ _2"></span>in <span class="_ _2"></span>clock <span class="_ _2"></span>ticks, <span class="_ _2"></span>which <span class="_ _2"></span>ar<span class="lsa66">eu<span class="_ _4f"></span><span class="ls0">sually <span class="_ _2"></span>between 60 <span class="_ _2"></span>and</span></span></span></span></div><div class="t m0 x32 h2a y2397 ff19 fsf fc0 sc0 ls0 ws0">128 ticks per second.<span class="_ _46"> </span>But <span class="_ _2"></span>we don’t know the <span class="_ _2"></span>ending time of <span class="_ _2"></span>a process; all we know is its</div><div class="t m0 x32 h2a y2398 ff19 fsf fc0 sc0 ls0 ws0">starting <span class="_ _23"></span>time <span class="_ _23"></span>and <span class="_ _23"></span>ending <span class="_ _23"></span>or<span class="_ _0"></span>der<span class="_ _6"></span><span class="lsa67">.T<span class="_ _26"></span><span class="ls0">hus, <span class="_ _23"> </span>even <span class="_ _23"> </span>though <span class="_ _23"> </span>the <span class="_ _23"> </span>elapsed <span class="_ _23"></span>time <span class="_ _23"></span>is <span class="_ _23"></span>mor<span class="ls4aa">ea<span class="_ _43"></span><span class="ls0">ccurate</span></span></span></span></div><div class="t m0 x32 h2a y2399 ff19 fsf fc0 sc0 ls0 ws0">than <span class="_"> </span>the <span class="_ _e"> </span>starting <span class="_"> </span>time, <span class="_"> </span>we <span class="_"> </span>still <span class="_ _e"> </span>can’t <span class="_"> </span>reconstr<span class="_ _0"></span>uct <span class="_"> </span>the <span class="_ _e"> </span>exact <span class="_"> </span>starting <span class="_"> </span>or<span class="_ _0"></span>der <span class="_"> </span>of <span class="_"> </span>various</div><div class="t m0 x32 h2a y239a ff19 fsf fc0 sc0 ls0 ws0">processes, given the data in the accounting ﬁle.</div><div class="t m0 x3f h2a y239b ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _42"> </span>accounting <span class="_ _53"> </span>recor<span class="_ _0"></span>ds <span class="_ _42"> </span>correspond <span class="_ _42"> </span>to <span class="_ _42"> </span>processes, <span class="_ _42"> </span>not <span class="_ _53"> </span>programs. <span class="_ _44"> </span>A<span class="_ _44"> </span>new <span class="_ _42"> </span>recor<span class="ls51">di<span class="_ _55"></span><span class="ls0">s</span></span></div><div class="t m0 x32 h26 y239c ff19 fsf fc0 sc0 ls0 ws0">initialized by the kernel <span class="_ _2"></span>for the child after <span class="_ _2"></span>a<span class="_"> </span><span class="ff1a">fork</span><span class="lsa68">,n<span class="_ _d"></span><span class="ls0">ot when <span class="_ _2"></span>a new program is executed.</span></span></div><div class="t m0 x32 h26 y239d ff19 fsf fc0 sc0 ls0 ws0">Although<span class="_ _35"> </span><span class="ff1a">exec<span class="_ _45"> </span></span>doesn’t <span class="_ _23"> </span>create <span class="_ _23"></span>a <span class="_ _9"></span>new <span class="_ _23"> </span>accounting <span class="_ _23"> </span>record, <span class="_ _9"></span>the <span class="_ _23"> </span>command <span class="_ _23"> </span>name <span class="_ _23"></span>changes,</div><div class="t m0 x32 h26 y239e ff19 fsf fc0 sc0 ls0 ws0">and the<span class="_"> </span><span class="ff1a">AFORK<span class="_ _80"> </span></span>ﬂag is <span class="_ _2"></span>cleared. <span class="_"> </span>This<span class="_"> </span>means that if we have a chain of three pr<span class="_ _0"></span>ograms <span class="_ _a"></span>— <span class="_ _a"></span>A</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
