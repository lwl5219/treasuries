<div id="pf2bc" class="pf w4 h1f" data-page-no="2bc"><div class="pc pc2bc w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg2bc.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">666<span class="_ _1b"> </span><span class="ff19">Advanced <span class="_"> </span>IPC<span class="_ _e8"> </span>Chapter <span class="_"> </span>17</span></div><div class="t m0 x41 h26 y12f ff19 fsf fc0 sc0 ls0 ws0">argument <span class="_ _42"> </span>to<span class="_ _4b"> </span><span class="ff1a">select</span><span class="ls954">.W<span class="_ _49"></span><span class="ls1411">ea<span class="_ _c"></span><span class="ls0">lso <span class="_ _53"> </span>keep <span class="_ _53"> </span>track <span class="_ _e"> </span>of <span class="_ _53"> </span>the <span class="_ _e"> </span>highest <span class="_ _53"> </span>index <span class="_ _53"> </span>in <span class="_ _e"> </span>use <span class="_ _53"> </span>in <span class="_ _e"> </span>the</span></span></span></div><div class="t m0 x41 h26 y130 ff1a fsf fc0 sc0 ls0 ws0">client<span class="_ _80"> </span><span class="ff19">array<span class="_ _6"></span>.)</span></div><div class="t m0 x3f h2a y3eb ff19 fsf fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>An<span class="_ _35"> </span>existing <span class="_ _42"> </span>client’s <span class="_ _23"> </span>connection <span class="_ _42"> </span>can <span class="_ _23"> </span>be <span class="_ _42"> </span>ready <span class="_ _23"></span>for <span class="_ _23"> </span>reading. <span class="_ _35"> </span>This<span class="_ _35"> </span>means <span class="_ _42"> </span>that <span class="_ _23"> </span>the</div><div class="t m0 x41 h2a y3ec ff19 fsf fc0 sc0 ls0 ws0">client <span class="_ _23"></span>has <span class="_ _23"></span>either <span class="_ _23"> </span>terminated <span class="_ _23"> </span>or <span class="_ _23"> </span>sent <span class="_ _23"> </span>a <span class="_ _23"> </span>new <span class="_ _42"> </span>request. <span class="_ _45"> </span>W<span class="_ _6"></span><span class="ls1412">eﬁ<span class="_ _b"></span><span class="ls0">nd <span class="_ _9"></span>out <span class="_ _23"> </span>about <span class="_ _23"> </span>a <span class="_ _42"> </span>client</span></span></div><div class="t m0 x41 h26 y1ad ff19 fsf fc0 sc0 ls0 ws0">termination <span class="_ _23"></span>by<span class="_ _45"> </span><span class="ff1a">read<span class="_ _35"> </span></span><span class="ls45">re<span class="_ _2"></span></span>turning <span class="_ _23"></span>0 <span class="_ _23"></span>(end <span class="_ _23"></span>of <span class="_ _23"></span>ﬁle).<span class="_ _5a"> </span>If<span class="_ _35"> </span><span class="ff1a">read<span class="_ _35"> </span></span><span class="ls45">re</span>turns <span class="_ _23"> </span>a <span class="_ _23"></span>value <span class="_ _23"></span>greater</div><div class="t m0 x41 h2a y1ae ff19 fsf fc0 sc0 ls0 ws0">than <span class="_ _44"> </span>0, <span class="_ _44"> </span>there<span class="_ _51"> </span>is<span class="_ _65"> </span>a<span class="_ _54"> </span>new <span class="_ _44"> </span>request <span class="_ _35"> </span>to <span class="_ _44"> </span>process, <span class="_ _44"> </span>which <span class="_ _44"> </span>we <span class="_ _44"> </span>handle <span class="_ _44"> </span>by <span class="_ _44"> </span>calling</div><div class="t m0 x41 h26 y1af ff1a fsf fc0 sc0 ls0 ws0">handle_request<span class="ff19">.</span></div><div class="t m0 x3f h26 y14ad ff19 fsf fc0 sc0 ls5f ws0">We <span class="_ _47"> </span>k<span class="_ _9"></span><span class="ls0">eep <span class="_ _23"> </span>track <span class="_ _23"></span>of <span class="_ _23"></span>which <span class="_ _23"></span>descriptors <span class="_ _23"></span>ar<span class="ls1413">ec<span class="_ _43"></span><span class="ls0">urrently <span class="_ _9"></span>in <span class="_ _23"> </span>use <span class="_ _23"> </span>in <span class="_ _23"> </span>the<span class="_ _35"> </span><span class="ff1a">allset<span class="_ _45"> </span></span>descriptor</span></span></span></div><div class="t m0 x32 h2a y14ae ff19 fsf fc0 sc0 ls0 ws0">set. <span class="_ _46"> </span>As<span class="_ _46"> </span>new <span class="_"> </span>clients <span class="_ _66"> </span>connect <span class="_"> </span>to <span class="_ _66"> </span>the <span class="_ _66"> </span>server<span class="_ _1"></span><span class="ls1414">,t<span class="_ _5b"></span><span class="ls0">he <span class="_ _66"> </span>appropriate <span class="_"> </span>bit <span class="_"> </span>is <span class="_ _66"> </span>turned <span class="_ _66"> </span>on <span class="_"> </span>in <span class="_ _66"> </span>this</span></span></div><div class="t m0 x32 h2a y3b2d ff19 fsf fc0 sc0 ls0 ws0">descriptor set.<span class="_ _59"> </span>The appropriate bit is turned of<span class="ls44">fw<span class="_ _4f"></span><span class="ls0">hen the client terminates.</span></span></div><div class="t m0 x3f h2a y95f ff19 fsf fc0 sc0 ls5f ws0">We <span class="_ _80"> </span>a<span class="_ _9"></span><span class="ls0">lways <span class="_ _3"></span>know <span class="_ _2"></span>when <span class="_ _3"></span>a <span class="_ _3"></span>client <span class="_ _3"></span>terminates, <span class="_ _3"></span>whether <span class="_ _2"></span>the <span class="_ _3"></span>termination <span class="_ _3"></span>is <span class="_ _3"></span>voluntary <span class="_ _3"></span>or</span></div><div class="t m0 x32 h2a y960 ff19 fsf fc0 sc0 ls0 ws0">not, <span class="_ _45"> </span>since <span class="_ _45"> </span>all <span class="_ _45"> </span>the <span class="_ _45"> </span>client’s <span class="_ _45"> </span>descriptors <span class="_ _45"> </span>(including <span class="_ _45"> </span>the <span class="_ _45"> </span>connection <span class="_ _45"> </span>to <span class="_ _45"> </span>the <span class="_ _45"> </span>server) <span class="_ _45"> </span>are</div><div class="t m0 x32 h2a y10ab ff19 fsf fc0 sc0 ls0 ws0">automatically closed by the kernel.<span class="_ _59"> </span>This differs from the XSI IPC mechanisms.</div><div class="t m0 x3f h26 y10ac ff19 fsf fc0 sc0 ls0 ws0">The<span class="_"> </span><span class="ff1a">loop<span class="_ _80"> </span></span>function that uses<span class="_"> </span><span class="ff1a">poll<span class="_ _66"> </span></span>is shown in Figur<span class="ls44">e1<span class="_ _4f"></span><span class="ls0">7.30.</span></span></div><div class="t m0 x32 h4e y4e3f ff1a fs28 fc0 sc0 ls0 ws0">#include <span class="_ _68"> </span>&quot;opend.h&quot;</div><div class="t m0 x32 h4e y4e40 ff1a fs28 fc0 sc0 ls0 ws0">#include <span class="_ _68"> </span>&lt;poll.h&gt;</div><div class="t m0 x32 h4e y4e41 ff1a fs28 fc0 sc0 ls0 ws0">#define NALLOC<span class="_ _d9"> </span>10 <span class="_"> </span>/*<span class="_"> </span><span class="ls1b6">#p<span class="_ _5b"></span><span class="ls0">ollfd structs to alloc/realloc */</span></span></div><div class="t m0 x32 h4e y4e42 ff1a fs28 fc0 sc0 ls0 ws0">static struct pollfd *</div><div class="t m0 x32 h4e y4e43 ff1a fs28 fc0 sc0 ls0 ws0">grow_pollfd(struct pollfd *pfd, int *maxfd)</div><div class="t m0 x32 h4e y4e44 ff1a fs28 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h4e y4e45 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>i;</div><div class="t m0 x8a h4e y4e46 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>oldmax<span class="_"> </span><span class="ls1b6">=*<span class="_ _1d"></span><span class="ls0">maxfd;</span></span></div><div class="t m0 x8a h4e y4e47 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>newmax<span class="_"> </span><span class="ls1b6">=o<span class="_ _1d"></span><span class="ls0">ldmax + NALLOC;</span></span></div><div class="t m0 x8a h4e y4e48 ff1a fs28 fc0 sc0 ls0 ws0">if ((pfd = realloc(pfd, newmax * sizeof(struct pollfd))) == NULL)</div><div class="t m0 x9d h4e y4e49 ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;realloc error&quot;);</div><div class="t m0 x8a h4e y4e4a ff1a fs28 fc0 sc0 ls0 ws0">for (i = oldmax; i &lt; newmax; i++) {</div><div class="t m0 x9d h4e y4e4b ff1a fs28 fc0 sc0 ls0 ws0">pfd[i].fd = -1;</div><div class="t m0 x9d h4e y4e4c ff1a fs28 fc0 sc0 ls0 ws0">pfd[i].events = POLLIN;</div><div class="t m0 x9d h4e y4e4d ff1a fs28 fc0 sc0 ls0 ws0">pfd[i].revents = 0;</div><div class="t m0 x8a h4e y4e4e ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x8a h4e y4e4f ff1a fs28 fc0 sc0 ls0 ws0">*maxfd = newmax;</div><div class="t m0 x8a h4e y4e50 ff1a fs28 fc0 sc0 ls0 ws0">return(pfd);</div><div class="t m0 x32 h4e y4e51 ff1a fs28 fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h4e y4e52 ff1a fs28 fc0 sc0 ls0 ws0">void</div><div class="t m0 x32 h4e y4e53 ff1a fs28 fc0 sc0 ls0 ws0">loop(void)</div><div class="t m0 x32 h4e y4e54 ff1a fs28 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h4e y4e55 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>i,<span class="_"> </span>listenfd, clifd, nread;</div><div class="t m0 x8a h4e y4e56 ff1a fs28 fc0 sc0 ls0 ws0">char <span class="_ _bd"> </span>buf[MAXLINE];</div><div class="t m0 x8a h4e y4e57 ff1a fs28 fc0 sc0 ls0 ws0">uid_t <span class="_ _74"> </span>uid;</div><div class="t m0 x8a h4e y4e58 ff1a fs28 fc0 sc0 ls0 ws0">struct pollfd<span class="_ _68"> </span>*pollfd;</div><div class="t m0 x8a h4e y4e59 ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>numfd<span class="_"> </span><span class="ls1b6">=1<span class="_ _1d"></span><span class="ls0">;</span></span></div><div class="t m0 x8a h4e y4e5a ff1a fs28 fc0 sc0 ls0 ws0">int <span class="_ _82"> </span>maxfd<span class="_"> </span><span class="ls1b6">=N<span class="_ _1d"></span><span class="ls0">ALLOC;</span></span></div><div class="t m0 x8a h4e y4e5b ff1a fs28 fc0 sc0 ls0 ws0">if ((pollfd = malloc(NALLOC * sizeof(struct pollfd))) == NULL)</div><div class="t m0 x9d h4e y4e5c ff1a fs28 fc0 sc0 ls0 ws0">err_sys(&quot;malloc error&quot;);</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
