<div id="pffe" class="pf w4 h1f" data-page-no="fe"><div class="pc pcfe w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bgfe.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff18 fs0 fc0 sc0 ls0 ws0">220<span class="_ _1b"> </span><span class="ff19">Process <span class="_"> </span>Envir<span class="_ _0"></span>onment <span class="_ _1c1"> </span>Chapter<span class="_ _44"> </span>7</span></div><div class="t m0 x32 h57 y362 ff1a fs2d fc0 sc0 ls0 ws0">#include <span class="_ _68"> </span>&lt;stdio.h&gt;</div><div class="t m0 x32 h57 y1cc1 ff1a fs2d fc0 sc0 ls0 ws0">FILE *</div><div class="t m0 x32 h57 y1d78 ff1a fs2d fc0 sc0 ls0 ws0">open_data(void)</div><div class="t m0 x32 h57 y1d79 ff1a fs2d fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h57 y1d7a ff1a fs2d fc0 sc0 ls0 ws0">FILE <span class="_ _68"> </span>*fp;</div><div class="t m0 x8a h57 y1d7b ff1a fs2d fc0 sc0 ls0 ws0">char <span class="_ _68"> </span>databuf[BUFSIZ];<span class="_ _3a"> </span>/* setvbuf makes this the stdio buffer */</div><div class="t m0 x8a h57 y3c6 ff1a fs2d fc0 sc0 ls0 ws0">if ((fp = fopen(&quot;datafile&quot;, &quot;r&quot;)) == NULL)</div><div class="t m0 x9d h57 y1d7c ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x8a h57 y1d7d ff1a fs2d fc0 sc0 ls0 ws0">if (setvbuf(fp, databuf, _IOLBF, BUFSIZ) != 0)</div><div class="t m0 x9d h57 y1d7e ff1a fs2d fc0 sc0 ls0 ws0">return(NULL);</div><div class="t m0 x8a h57 y1d7f ff1a fs2d fc0 sc0 ls0 ws0">return(fp); <span class="_ _15"> </span>/*<span class="_"> </span>error */</div><div class="t m0 x32 h57 y1d80 ff1a fs2d fc0 sc0 ls0 ws0">}</div><div class="t m0 x134 h2d y1d81 ff18 fs10 fc0 sc0 ls0 ws0">Figure 7.14<span class="_ _5a"> </span><span class="ff19">Incorrect usage of an automatic variable</span></div><div class="t m0 x32 h4d y1d82 ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _23"> </span>problem <span class="_ _23"> </span>is <span class="_ _23"> </span>that <span class="_ _42"> </span>when<span class="_ _35"> </span><span class="ff1a">open_data<span class="_ _35"> </span></span><span class="lscc">re<span class="_ _2"></span></span>turns, <span class="_ _23"> </span>the <span class="_ _42"> </span>space <span class="_ _23"> </span>it <span class="_ _42"> </span>used <span class="_ _23"> </span>on <span class="_ _23"> </span>the <span class="_ _42"> </span>stack <span class="_ _23"> </span>will <span class="_ _42"> </span>be</div><div class="t m0 x32 h49 y1d83 ff19 fs26 fc0 sc0 ls0 ws0">used by the <span class="_ _2"></span>stack frame for <span class="_ _2"></span>the next function <span class="_ _2"></span>that is called.<span class="_ _46"> </span>But <span class="_ _2"></span>the standar<span class="ls8f3">dI<span class="_ _4f"></span><span class="ls0">/O <span class="_ _2"></span>library</span></span></div><div class="t m0 x32 h49 y1d84 ff19 fs26 fc0 sc0 ls0 ws0">will <span class="_ _3"></span>still <span class="_ _9"></span>be <span class="_ _9"></span>using <span class="_ _3"></span>that <span class="_ _9"></span>portion <span class="_ _3"></span>of <span class="_ _9"></span>memory <span class="_ _9"></span>for <span class="_ _3"></span>its <span class="_ _9"></span>stream <span class="_ _3"></span>buffer<span class="_ _6"></span><span class="ls8f4">.C<span class="_ _62"></span><span class="ls0">haos <span class="_ _9"></span>is <span class="_ _9"></span>sure<span class="_ _47"> </span>to<span class="_ _47"> </span>result.</span></span></div><div class="t m0 x32 h4d y1d85 ff19 fs26 fc0 sc0 ls164 ws0">To <span class="_ _80"> </span>c<span class="_ _23"></span><span class="ls0">orr<span class="_ _0"></span>ect <span class="_ _3"></span>this <span class="_ _9"></span>problem, <span class="_ _3"></span>the <span class="_ _3"></span>array<span class="_ _45"> </span><span class="ff1a">databuf<span class="_ _47"> </span></span>needs <span class="_ _9"></span>to <span class="_ _9"></span>be <span class="_ _3"></span>allocated <span class="_ _9"></span>from <span class="_ _3"></span>global <span class="_ _3"></span>memory<span class="_ _6"></span>,</span></div><div class="t m0 x32 h4d y1d86 ff19 fs26 fc0 sc0 ls0 ws0">either statically (<span class="ff1a">static<span class="_ _80"> </span></span>or<span class="_"> </span><span class="ff1a">extern</span>)<span class="_"> </span>or<span class="_"> </span>dynamically (one of the<span class="_"> </span><span class="ff1a">alloc<span class="_ _66"> </span></span>functions).</div><div class="t m0 x35 h7b y1d87 ff16 fs27 fc0 sc0 ls0 ws0">7.11<span class="_ _6d"> </span><span class="ff1f">getrlimit<span class="_ _54"> </span></span>and<span class="_ _54"> </span><span class="ff1f">setrlimit<span class="_ _54"> </span></span>Functions</div><div class="t m0 x32 h49 y1d88 ff19 fs26 fc0 sc0 ls0 ws0">Every process has a set of r<span class="_ _0"></span>esource limits, some of which can be queried and changed by</div><div class="t m0 x32 h4d y1d89 ff19 fs26 fc0 sc0 ls0 ws0">the<span class="_"> </span><span class="ff1a">getrlimit<span class="_ _80"> </span></span>and<span class="_"> </span><span class="ff1a">setrlimit<span class="_ _66"> </span></span>functions.</div><div class="t m0 x3f h4e y1d8a ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;sys/resource.h&gt;</div><div class="t m0 x3f h4e y1d8b ff1a fs28 fc0 sc0 ls0 ws0">int getrlimit(int<span class="_"> </span><span class="ff1b ls8f5">re<span class="ls0">source</span></span><span class="ls1b6">,s<span class="_ _1d"></span><span class="ls0">truct rlimit *<span class="ff1b">rlptr</span>);</span></span></div><div class="t m0 x3f h4e y1d8c ff1a fs28 fc0 sc0 ls0 ws0">int setrlimit(int<span class="_"> </span><span class="ff1b ls8f5">re<span class="ls0">source</span></span><span class="ls1b6">,c<span class="_ _1d"></span><span class="ls0">onst struct rlimit *<span class="ff1b">rlptr</span>);</span></span></div><div class="t m0 x1af h7c y1d8d ff19 fs28 fc0 sc0 ls0 ws0">Both return: 0 if OK,<span class="_"> </span><span class="ff20">−</span>1<span class="_"> </span>on<span class="_"> </span>err<span class="_ _0"></span>or</div><div class="t m0 x76 h2e y1d8e ff19 fs11 fc0 sc0 ls0 ws0">These <span class="_"> </span>two <span class="_ _42"> </span>functions <span class="_"> </span>ar<span class="ls8f6">ed<span class="_ _43"></span><span class="ls0">eﬁned <span class="_"> </span>in <span class="_ _42"> </span>the <span class="_"> </span>XSI <span class="_"> </span>option <span class="_"> </span>in <span class="_ _42"> </span>the <span class="_"> </span>Single <span class="_"> </span>UNIX <span class="_ _42"> </span>Speciﬁcation.<span class="_ _5a"> </span>The</span></span></div><div class="t m0 x76 h2e y1d8f ff19 fs11 fc0 sc0 ls293 ws0">re<span class="ls0">source <span class="_ _80"> </span>limits <span class="_ _80"> </span>for <span class="_ _80"> </span>a <span class="_ _66"> </span>process <span class="_ _80"> </span>ar<span class="ls8f7">en<span class="_ _55"></span><span class="ls0">ormally <span class="_ _80"> </span>established <span class="_ _80"> </span>by <span class="_ _66"> </span>process <span class="_ _e"> </span>0 <span class="_ _66"> </span>when <span class="_ _80"> </span>the <span class="_ _80"> </span>system <span class="_ _80"> </span>is</span></span></span></div><div class="t m0 x76 h2e y1d90 ff19 fs11 fc0 sc0 ls0 ws0">initialized <span class="_ _23"> </span>and <span class="_ _9"></span>then <span class="_ _23"> </span>inherited <span class="_ _23"> </span>by <span class="_ _23"> </span>each <span class="_ _9"></span>successive <span class="_ _23"> </span>process. <span class="_ _47"> </span>Each<span class="_ _47"> </span>implementation <span class="_ _23"> </span>has <span class="_ _23"> </span>its <span class="_ _9"> </span>own</div><div class="t m0 x76 h2e y1d91 ff19 fs11 fc0 sc0 ls0 ws0">way of tuning the various limits.</div><div class="t m0 x3f h60 y1d92 ff19 fs2c fc0 sc0 ls0 ws0">Each <span class="_"> </span>call <span class="_ _53"> </span>to <span class="_"> </span>these <span class="_"> </span>two <span class="_ _53"> </span>functions <span class="_"> </span>speciﬁes <span class="_"> </span>a <span class="_ _53"> </span>single<span class="_ _46"> </span><span class="ff1b ls150">re<span class="ls0">source<span class="_ _59"> </span></span></span>and <span class="_ _e"> </span>a <span class="_"> </span>pointer <span class="_ _e"> </span>to <span class="_"> </span>the</div><div class="t m0 x32 h55 y1d93 ff19 fs2c fc0 sc0 ls0 ws0">following structur<span class="_ _0"></span>e:</div><div class="t m0 x3f h5d yd10 ff1a fs2f fc0 sc0 ls0 ws0">struct rlimit {</div><div class="t m0 xf4 h5d y1d94 ff1a fs2f fc0 sc0 ls0 ws0">rlim_t <span class="_"> </span>rlim_cur; <span class="_"> </span>/*<span class="_"> </span>soft limit: current limit */</div><div class="t m0 xf4 h5d y1d95 ff1a fs2f fc0 sc0 ls0 ws0">rlim_t <span class="_"> </span>rlim_max; <span class="_"> </span>/*<span class="_"> </span>hard limit: maximum value for rlim_cur */</div><div class="t m0 x3f h5d y1d96 ff1a fs2f fc0 sc0 ls0 ws0">};</div><a class="l" href="#pfe" data-dest-detail='[14,"XYZ",50,757,1]'><div class="d m1" style="border-style:none;position:absolute;left:80.893050px;bottom:662.732697px;width:264.287498px;height:19.679992px;background-color:rgba(255,255,255,0.000001);"></div></a></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
