<div id="pf1a7" class="pf w4 h1f" data-page-no="1a7"><div class="pc pc1a7 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="bg1a7.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>1<span class="_ _1"></span>1.5 <span class="_ _1c9"> </span>Thr<span class="_ _1"></span>ead <span class="_"> </span>T<span class="_ _1"></span>ermination<span class="_ _1b"> </span><span class="ff18">389</span></div><div class="t m0 x3f h2a y12f ff19 fsf fc0 sc0 ls6e0 ws0">As<span class="_ _8"></span><span class="ls0">ingle <span class="_ _3"></span>thread <span class="_ _2"></span>can <span class="_ _2"></span>exit <span class="_ _3"></span>in <span class="_ _2"></span>three <span class="_ _2"></span>ways, <span class="_ _2"></span>thereby <span class="_ _2"></span>stopping <span class="_ _3"></span>its <span class="_ _2"></span>ﬂow <span class="_ _3"></span>of <span class="_ _2"></span>control, <span class="_ _2"></span>without</span></div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">terminating the entir<span class="ls44">ep<span class="_ _4f"></span><span class="ls45">ro<span class="_ _2"></span><span class="ls0">cess.</span></span></span></div><div class="t m0 x3f h2a y1f0a ff19 fsf fc0 sc0 ls0 ws0">1. <span class="_ _51"> </span>The<span class="_ _44"> </span>thread <span class="_ _42"> </span>can <span class="_ _53"> </span>simply <span class="_ _53"> </span>return <span class="_ _42"> </span>from <span class="_ _42"> </span>the <span class="_ _53"> </span>start <span class="_ _42"> </span>routine. <span class="_ _44"> </span>The<span class="_ _44"> </span><span class="ls45">re<span class="_ _2"></span></span>turn <span class="_ _53"> </span>value <span class="_ _42"> </span>is <span class="_ _53"> </span>the</div><div class="t m0 x41 h2a y3194 ff19 fsf fc0 sc0 ls0 ws0">thread’s exit code.</div><div class="t m0 x3f h2a y6fa ff19 fsf fc0 sc0 ls0 ws0">2. <span class="_ _51"> </span>The<span class="_"> </span>thread can be canceled by another thr<span class="_ _0"></span>ead in the same process.</div><div class="t m0 x3f h26 y2593 ff19 fsf fc0 sc0 ls0 ws0">3. <span class="_ _51"> </span>The<span class="_"> </span>thread can call<span class="_"> </span><span class="ff1a">pthread_exit</span>.</div><div class="t m0 x3f h57 y3195 ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y3196 ff1a fs2d fc0 sc0 ls0 ws0">void pthread_exit(void *<span class="ff1b">rval_ptr</span>);</div><div class="t m0 x32 h4a y3197 ff19 fs26 fc0 sc0 ls0 ws0">The<span class="_ _66"> </span><span class="ff1b">rval_ptr<span class="_ _47"> </span></span>argument is <span class="_ _2"></span>a <span class="_ _2"></span>typeless <span class="_ _2"></span>pointer<span class="_ _1"></span><span class="lsda2">,s<span class="_ _4f"></span><span class="ls0">imilar <span class="_ _2"></span>to <span class="_ _3"></span>the <span class="_ _2"></span>single <span class="_ _2"></span>argument passed <span class="_ _3"></span>to <span class="_ _2"></span>the</span></span></div><div class="t m0 x32 h49 y3198 ff19 fs26 fc0 sc0 ls0 ws0">start <span class="_ _53"> </span>routine. <span class="_ _44"> </span>This<span class="_ _44"> </span>pointer <span class="_ _53"> </span>is <span class="_ _53"> </span>available <span class="_ _53"> </span>to <span class="_ _53"> </span>other <span class="_ _53"> </span>threads <span class="_ _42"> </span>in <span class="_ _53"> </span>the <span class="_ _53"> </span>process <span class="_ _42"> </span>by <span class="_ _53"> </span>calling <span class="_ _53"> </span>the</div><div class="t m0 x32 h4d y3199 ff1a fs26 fc0 sc0 ls0 ws0">pthread_join<span class="_ _80"> </span><span class="ff19">function.</span></div><div class="t m0 x3f h4e y319a ff1a fs28 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h4e y319b ff1a fs28 fc0 sc0 ls0 ws0">int pthread_join(pthread_t<span class="_"> </span><span class="ff1b">thread</span><span class="ls1b6">,v<span class="_ _1d"></span><span class="ls0">oid **<span class="ff1b">rval_ptr</span>);</span></span></div><div class="t m0 x78 h7c y319c ff19 fs28 fc0 sc0 ls0 ws0">Returns: 0 if OK, error number on failur<span class="_ _0"></span>e</div><div class="t m0 x32 h54 y319d ff19 fs2c fc0 sc0 ls0 ws0">The <span class="_ _42"> </span>calling <span class="_ _42"> </span>thread <span class="_ _42"> </span>will <span class="_ _42"> </span>block <span class="_ _42"> </span>until <span class="_ _42"> </span>the <span class="_ _53"> </span>speciﬁed <span class="_ _42"> </span>thread <span class="_ _42"> </span>calls<span class="_ _44"> </span><span class="ff1a">pthread_exit</span><span class="lsda3">,r<span class="_ _c"></span><span class="ls0">eturns</span></span></div><div class="t m0 x32 h55 y319e ff19 fs2c fc0 sc0 ls0 ws0">from its start <span class="_ _2"></span>routine, or is <span class="_ _2"></span>canceled.<span class="_ _46"> </span>If <span class="_ _2"></span>the thread simply <span class="_ _2"></span>returned from its start routine,</div><div class="t m0 x32 h60 y319f ff1b fs2c fc0 sc0 ls0 ws0">rval_ptr<span class="_ _45"> </span><span class="ff19">will <span class="_ _9"></span>contain <span class="_ _23"></span>the <span class="_ _9"></span>return <span class="_ _9"></span>code.<span class="_ _51"> </span>If <span class="_ _9"></span>the <span class="_ _9"></span>thread <span class="_ _9"></span>was <span class="_ _23"></span>canceled, <span class="_ _9"></span>the <span class="_ _23"></span>memory <span class="_ _9"></span>location</span></div><div class="t m0 x32 h54 y31a0 ff19 fs2c fc0 sc0 ls0 ws0">speciﬁed by<span class="_"> </span><span class="ff1b">rval_ptr<span class="_"> </span></span>is set to<span class="_"> </span><span class="ff1a">PTHREAD_CANCELED</span>.</div><div class="t m0 x3f h54 y31a1 ff19 fs2c fc0 sc0 ls0 ws0">By <span class="_ _53"> </span>calling<span class="_ _4b"> </span><span class="ff1a">pthread_join</span>,<span class="_ _4b"> </span>we<span class="_ _4b"> </span>automatically <span class="_ _e"> </span>place <span class="_ _e"> </span>the <span class="_ _53"> </span>thread <span class="_ _53"> </span>with <span class="_ _e"> </span>which <span class="_ _53"> </span>we’re</div><div class="t m0 x32 h55 y31a2 ff19 fs2c fc0 sc0 ls0 ws0">joining <span class="_ _9"></span>in <span class="_ _9"></span>the <span class="_ _9"></span>detached <span class="_ _9"></span>state <span class="_ _23"></span>(discussed <span class="_ _9"></span>shortly) <span class="_ _9"></span>so <span class="_ _9"></span>that <span class="_ _9"></span>its <span class="_ _9"></span>resources <span class="_ _3"></span>can <span class="_ _23"></span>be <span class="_ _9"></span>recover<span class="_ _1"></span>ed.</div><div class="t m0 x32 h54 y31a3 ff19 fs2c fc0 sc0 ls0 ws0">If <span class="_"> </span>the <span class="_ _e"> </span>thread <span class="_"> </span>was <span class="_ _e"> </span>already <span class="_"> </span>in <span class="_ _e"> </span>the <span class="_"> </span>detached <span class="_"> </span>state,<span class="_ _4b"> </span><span class="ff1a">pthread_join<span class="_ _59"> </span></span>can <span class="_"> </span>fail, <span class="_"> </span>r<span class="_ _0"></span>eturning</div><div class="t m0 x32 h54 y31a4 ff1a fs2c fc0 sc0 ls0 ws0">EINVAL<span class="ff19 ls142">,a<span class="_ _d"></span><span class="ls0">lthough this behavior is implementation-speciﬁc.</span></span></div><div class="t m0 x3f h54 y31a5 ff19 fs2c fc0 sc0 ls0 ws0">If we’r<span class="lsda4">en<span class="_ _4f"></span><span class="ls0">ot <span class="_ _2"></span>interested in a thread’s return value, we can set<span class="_ _66"> </span><span class="ff1b">rval_ptr<span class="_"> </span></span>to<span class="_ _66"> </span><span class="ff1a">NULL</span><span class="lsda5">.I<span class="_ _4a"></span><span class="lsda6">nt<span class="_ _d"></span><span class="ls0">his</span></span></span></span></span></div><div class="t m0 x32 h54 y31a6 ff19 fs2c fc0 sc0 ls0 ws0">case, <span class="_ _42"> </span>calling<span class="_ _44"> </span><span class="ff1a">pthread_join<span class="_ _35"> </span></span>allows <span class="_ _53"> </span>us <span class="_ _42"> </span>to <span class="_ _42"> </span>wait <span class="_ _42"> </span>for <span class="_ _42"> </span>the <span class="_ _42"> </span>speciﬁed <span class="_ _42"> </span>thread, <span class="_ _42"> </span>but <span class="_ _42"> </span>does <span class="_ _42"> </span>not</div><div class="t m0 x32 h55 y31a7 ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">trieve the thread’s termination status.</span></div><div class="t m0 x35 h61 y31a8 ff16 fs2c fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h55 y31a9 ff19 fs2c fc0 sc0 ls0 ws0">Figur<span class="ls142">e1<span class="_ _b"></span><span class="ls0">1.3 shows how to fetch the exit code from a thread that has terminated.</span></span></div><div class="t m0 x32 h62 y31aa ff1a fs30 fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h62 y31ab ff1a fs30 fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h62 y31ac ff1a fs30 fc0 sc0 ls0 ws0">void *</div><div class="t m0 x32 h62 y31ad ff1a fs30 fc0 sc0 ls0 ws0">thr_fn1(void *arg)</div><div class="t m0 x32 h62 y31ae ff1a fs30 fc0 sc0 ls0 ws0">{</div><div class="t m0 x8a h62 y31af ff1a fs30 fc0 sc0 ls0 ws0">printf(&quot;thread 1 returning\n&quot;);</div><div class="t m0 x8a h62 y31b0 ff1a fs30 fc0 sc0 ls0 ws0">return((void *)1);</div><div class="t m0 x32 h62 y31b1 ff1a fs30 fc0 sc0 ls0 ws0">}</div><div class="t m0 x32 h62 y31b2 ff1a fs30 fc0 sc0 ls0 ws0">void *</div><div class="t m0 x32 h62 y31b3 ff1a fs30 fc0 sc0 ls0 ws0">thr_fn2(void *arg)</div><div class="t m0 x32 h62 y31b4 ff1a fs30 fc0 sc0 ls0 ws0">{</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
