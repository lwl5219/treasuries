<div id="pf1c5" class="pf w4 h1f" data-page-no="1c5"><div class="pc pc1c5 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg1c5.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>1<span class="_ _1"></span>1.6 <span class="_ _284"> </span>Thread <span class="_"> </span>Synchr<span class="_ _0"></span>onization<span class="_ _1b"> </span><span class="ff18">419</span></div><div class="t m0 x3f h2b y12f ff19 fsf fc0 sc0 ls0 ws0">When <span class="_ _23"></span>we <span class="_ _23"></span>initialize <span class="_ _23"></span>a <span class="_ _23"></span>barrier<span class="_ _6"></span>,<span class="_ _35"> </span>we<span class="_ _35"> </span>use <span class="_ _9"></span>the<span class="_ _35"> </span><span class="ff1b">count<span class="_ _35"> </span></span>argument <span class="_ _9"></span>to <span class="_ _23"> </span>specify <span class="_ _23"> </span>the <span class="_ _23"></span>number <span class="_ _23"></span>of</div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">threads that <span class="_ _3"></span>must <span class="_ _2"></span>reach the <span class="_ _3"></span>barrier <span class="_ _2"></span>befor<span class="lse4d">ea<span class="_ _8"></span><span class="ls0">ll <span class="_ _3"></span>of <span class="_ _2"></span>the <span class="_ _2"></span>threads <span class="_ _2"></span>will <span class="_ _2"></span>be <span class="_ _3"></span>allowed <span class="_ _2"></span>to <span class="_ _2"></span>continue.</span></span></div><div class="t m0 x32 h2b y131 ff19 fsf fc0 sc0 ls5f ws0">We <span class="_ _e"> </span>u<span class="_ _23"></span><span class="ls0">se <span class="_ _2"></span>the<span class="_ _47"> </span><span class="ff1b">attr<span class="_ _66"> </span></span>argument <span class="_ _2"></span>to <span class="_ _3"></span>specify <span class="_ _2"></span>the <span class="_ _3"></span>attributes <span class="_ _2"></span>of <span class="_ _3"></span>the <span class="_ _2"></span>barrier <span class="_ _3"></span>object, <span class="_ _2"></span>which <span class="_ _3"></span>we’ll <span class="_ _2"></span>look</span></div><div class="t m0 x32 h26 y132 ff19 fsf fc0 sc0 ls0 ws0">at <span class="_ _42"> </span>mor<span class="ls552">ec<span class="_ _c"></span><span class="ls0">losely <span class="_ _53"> </span>in <span class="_ _53"> </span>the <span class="_ _53"> </span>next <span class="_ _53"> </span>chapter<span class="_ _6"></span><span class="lse4e">.F<span class="_ _52"></span><span class="ls0">or <span class="_ _53"> </span>now<span class="_ _6"></span>,<span class="_ _44"> </span>we<span class="_ _4b"> </span>can <span class="_ _53"> </span>set<span class="_ _44"> </span><span class="ff1b">attr<span class="_ _44"> </span></span>to<span class="_ _4b"> </span><span class="ff1a">NULL<span class="_ _44"> </span></span>to <span class="_ _53"> </span>initialize <span class="_ _53"> </span>a</span></span></span></span></div><div class="t m0 x32 h26 y133 ff19 fsf fc0 sc0 ls0 ws0">barrier <span class="_ _9"></span>with <span class="_ _3"></span>the <span class="_ _9"></span>default <span class="_ _9"></span>attributes.<span class="_ _5a"> </span>If <span class="_ _3"></span>the<span class="_ _45"> </span><span class="ff1a">pthread_barrier_init<span class="_ _45"> </span></span>function <span class="_ _9"></span>allocated</div><div class="t m0 x32 h2a y134 ff19 fsf fc0 sc0 ls0 ws0">any resources for the barrier<span class="_ _1"></span><span class="ls1bf">,t<span class="_ _d"></span><span class="ls0">he resources will be freed when <span class="_ _2"></span>we deinitialize <span class="_ _2"></span>the barrier</span></span></div><div class="t m0 x32 h26 y135 ff19 fsf fc0 sc0 ls0 ws0">by calling the<span class="_"> </span><span class="ff1a">pthread_barrier_destroy<span class="_ _80"> </span></span>function.</div><div class="t m0 x3f h26 y136 ff19 fsf fc0 sc0 ls5f ws0">We <span class="_ _35"> </span>u<span class="_ _9"></span><span class="ls0">se <span class="_ _53"> </span>the<span class="_ _44"> </span><span class="ff1a">pthread_barrier_wait<span class="_ _4b"> </span></span>function <span class="_ _53"> </span>to <span class="_ _53"> </span>indicate <span class="_ _53"> </span>that <span class="_ _53"> </span>a <span class="_ _53"> </span>thread <span class="_ _53"> </span>is <span class="_ _53"> </span>done</span></div><div class="t m0 x32 h2a y137 ff19 fsf fc0 sc0 ls0 ws0">with its work and is ready to wait for all the other thr<span class="_ _0"></span>eads to catch up.</div><div class="t m0 x3f h57 y146f ff1a fs2d fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x3f h57 y34ea ff1a fs2d fc0 sc0 ls0 ws0">int pthread_barrier_wait(pthread_barrier_t *<span class="ff1b">barrier</span>);</div><div class="t m0 x2d h57 y34eb ff19 fs2d fc0 sc0 ls0 ws0">Returns: 0 or<span class="_"> </span><span class="ff1a">PTHREAD_BARRIER_SERIAL_THREAD<span class="_ _e"> </span></span>if OK, error number on failure</div><div class="t m0 x32 h4d y268b ff19 fs26 fc0 sc0 ls0 ws0">The <span class="_ _3"></span>thread <span class="_ _3"></span>calling<span class="_ _45"> </span><span class="ff1a">pthread_barrier_wait<span class="_ _47"> </span></span>is <span class="_ _9"></span>put <span class="_ _3"></span>to <span class="_ _9"></span>sleep <span class="_ _3"></span>if <span class="_ _9"></span>the <span class="_ _3"></span>barrier <span class="_ _9"></span>count <span class="_ _3"></span>(set <span class="_ _9"></span>in</div><div class="t m0 x32 h4d y34ec ff19 fs26 fc0 sc0 ls0 ws0">the <span class="_ _2"></span>call <span class="_ _2"></span>to<span class="_ _66"> </span><span class="ff1a">pthread_barrier_init</span>)<span class="_ _66"> </span>is<span class="_ _47"> </span>not yet <span class="_ _2"></span>satisﬁed.<span class="_ _61"> </span>If <span class="_ _2"></span>the <span class="_ _2"></span>thread is <span class="_ _2"></span>the <span class="_ _2"></span>last <span class="_ _2"></span>one <span class="_ _2"></span>to</div><div class="t m0 x32 h4d y34ed ff19 fs26 fc0 sc0 ls0 ws0">call<span class="_ _35"> </span><span class="ff1a">pthread_barrier_wait</span><span class="lse4f">,t<span class="_ _43"></span><span class="ls0">hereby <span class="_ _23"></span>satisfying <span class="_ _23"> </span>the <span class="_ _23"> </span>barrier <span class="_ _42"> </span>count, <span class="_ _23"> </span>all <span class="_ _23"> </span>of <span class="_ _42"> </span>the <span class="_ _23"></span>threads</span></span></div><div class="t m0 x32 h49 y34ee ff19 fs26 fc0 sc0 ls0 ws0">ar<span class="lsd3">ea<span class="_ _4f"></span><span class="ls0">wakened.</span></span></div><div class="t m0 x3f h4d y34ef ff19 fs26 fc0 sc0 ls164 ws0">To <span class="_ _80"> </span>o<span class="_ _9"></span><span class="ls0">ne <span class="_ _9"></span>arbitrary <span class="_ _3"></span>thread, <span class="_ _3"></span>it <span class="_ _3"></span>will <span class="_ _3"></span>appear <span class="_ _9"></span>as <span class="_ _3"></span>if <span class="_ _3"></span>the<span class="_ _45"> </span><span class="ff1a">pthread_barrier_wait<span class="_ _47"> </span></span>function</span></div><div class="t m0 x32 h4d y34f0 ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">turned <span class="_ _9"></span>a <span class="_ _3"></span>value <span class="_ _9"></span>of<span class="_ _47"> </span><span class="ff1a">PTHREAD_BARRIER_SERIAL_THREAD</span><span class="lse50">.T<span class="_ _1d"></span><span class="ls0">he <span class="_ _3"></span>remaining <span class="_ _3"></span>threads <span class="_ _3"></span>see</span></span></span></div><div class="t m0 x32 h49 y34f1 ff19 fs26 fc0 sc0 ls18b ws0">ar<span class="_ _4f"></span><span class="ls0">eturn value of 0.<span class="_ _46"> </span>This allows one thread to continue as the master to act on the results</span></div><div class="t m0 x32 h49 y34f2 ff19 fs26 fc0 sc0 ls0 ws0">of the work done by all of the other threads.</div><div class="t m0 x3f h49 y34f3 ff19 fs26 fc0 sc0 ls0 ws0">Once <span class="_ _3"></span>the <span class="_ _2"></span>barrier <span class="_ _3"></span>count <span class="_ _3"></span>is <span class="_ _3"></span>reached <span class="_ _3"></span>and <span class="_ _3"></span>the <span class="_ _3"></span>threads <span class="_ _2"></span>ar<span class="lse51">eu<span class="_ _8"></span><span class="ls0">nblocked, <span class="_ _2"></span>the <span class="_ _3"></span>barrier <span class="_ _3"></span>can <span class="_ _3"></span>be</span></span></div><div class="t m0 x32 h49 y34f4 ff19 fs26 fc0 sc0 ls0 ws0">used <span class="_ _59"> </span>again.<span class="_ _5e"> </span>However<span class="_ _6"></span><span class="lse52">,t<span class="_ _5d"></span><span class="ls0">he <span class="_ _59"> </span>barrier <span class="_ _59"> </span>count <span class="_ _59"> </span>can’t <span class="_ _46"> </span>be <span class="_ _59"> </span>changed <span class="_ _59"> </span>unless <span class="_ _59"> </span>we <span class="_ _46"> </span>call <span class="_ _59"> </span>the</span></span></div><div class="t m0 x32 h4d y34f5 ff1a fs26 fc0 sc0 ls0 ws0">pthread_barrier_destroy<span class="_"> </span><span class="ff19">function <span class="_ _35"> </span>followed <span class="_ _45"> </span>by <span class="_ _35"> </span>the<span class="_ _51"> </span></span>pthread_barrier_init</div><div class="t m0 x32 h49 y34f6 ff19 fs26 fc0 sc0 ls0 ws0">function with a differ<span class="_ _0"></span>ent count.</div><div class="t m0 x35 h4c y34f7 ff16 fs26 fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h49 y34f8 ff19 fs26 fc0 sc0 ls0 ws0">Figur<span class="ls607">e1<span class="_ _43"></span><span class="ls0">1.16 <span class="_ _3"></span>shows <span class="_ _9"></span>how <span class="_ _9"></span>a <span class="_ _3"></span>barrier <span class="_ _9"></span>can <span class="_ _9"></span>be <span class="_ _9"></span>used <span class="_ _3"></span>to <span class="_ _9"></span>synchronize <span class="_ _3"></span>threads <span class="_ _9"></span>cooperating <span class="_ _3"></span>on <span class="_ _9"></span>a</span></span></div><div class="t m0 x32 h49 y34f9 ff19 fs26 fc0 sc0 ls0 ws0">single task.</div><div class="t m0 x32 h5d y34fa ff1a fs2f fc0 sc0 ls0 ws0">#include &quot;apue.h&quot;</div><div class="t m0 x32 h5d y34fb ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;pthread.h&gt;</div><div class="t m0 x32 h5d y34fc ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;limits.h&gt;</div><div class="t m0 x32 h5d y34fd ff1a fs2f fc0 sc0 ls0 ws0">#include &lt;sys/time.h&gt;</div><div class="t m0 x32 h5d y34fe ff1a fs2f fc0 sc0 ls0 ws0">#define NTHR<span class="_ _68"> </span><span class="lse53">8/<span class="_ _287"></span><span class="ls395">*n<span class="_ _1d"></span><span class="ls0">umber of threads */</span></span></span></div><div class="t m0 x32 h5d y34ff ff1a fs2f fc0 sc0 ls0 ws0">#define NUMNUM 8000000L<span class="_ _176"> </span>/* number of numbers to sort */</div><div class="t m0 x32 h5d y3500 ff1a fs2f fc0 sc0 ls0 ws0">#define TNUM<span class="_ _68"> </span>(NUMNUM/NTHR) <span class="_ _87"> </span>/*<span class="_"> </span>number to sort per thread */</div><div class="t m0 x32 h5d y3501 ff1a fs2f fc0 sc0 ls0 ws0">long nums[NUMNUM];</div><div class="t m0 x32 h5d y3502 ff1a fs2f fc0 sc0 ls0 ws0">long snums[NUMNUM];</div><div class="t m0 x32 h5d y3503 ff1a fs2f fc0 sc0 ls0 ws0">pthread_barrier_t b;</div><div class="t m0 x32 h5d y3504 ff1a fs2f fc0 sc0 ls0 ws0">#ifdef SOLARIS</div><div class="t m0 x32 h5d y3505 ff1a fs2f fc0 sc0 ls0 ws0">#define heapsort qsort</div><div class="t m0 x32 h5d y3506 ff1a fs2f fc0 sc0 ls0 ws0">#else</div><div class="t m0 x32 h5d y3507 ff1a fs2f fc0 sc0 ls0 ws0">extern int heapsort(void *, size_t, size_t,</div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
