<div id="pf215" class="pf w4 h1f" data-page-no="215"><div class="pc pc215 w4 h1f"><img class="bi x0 y0 w3 h4" alt="" src="apue/bg215.png"/><div class="t m0 x31 h2 y8e ff1 fs0 fc0 sc0 ls0 ws0"><span class="fc1 sc0">ptg10805159</span></div><div class="t m0 x35 h24 ya4 ff19 fs0 fc0 sc0 ls0 ws0">Section <span class="_"> </span>14.3<span class="_ _1f7"> </span>Recor<span class="ls30a">dL<span class="_ _55"></span><span class="ls0">ocking<span class="_ _1b"> </span><span class="ff18">499</span></span></span></div><div class="t m0 x3f h2a y12f ff19 fsf fc0 sc0 ls0 ws0">This program cr<span class="_ _0"></span>eates a ﬁle and enables mandatory locking for the <span class="_ _2"></span>ﬁle.<span class="_ _46"> </span>The program</div><div class="t m0 x32 h2a y130 ff19 fsf fc0 sc0 ls0 ws0">then splits into parent and child, with the parent obtaining a write lock on the entir<span class="ls1028">eﬁ<span class="_ _d"></span><span class="ls0">le.</span></span></div><div class="t m0 x32 h2a y131 ff19 fsf fc0 sc0 ls0 ws0">The <span class="_ _9"></span>child <span class="_ _9"></span>ﬁrst <span class="_ _9"></span>sets <span class="_ _9"></span>its <span class="_ _9"></span>descriptor <span class="_ _9"></span>to <span class="_ _9"></span>be <span class="_ _23"></span>nonblocking <span class="_ _3"></span>and <span class="_ _23"></span>then <span class="_ _9"></span>attempts <span class="_ _9"></span>to <span class="_ _9"></span>obtain <span class="_ _9"></span>a <span class="_ _9"></span>read</div><div class="t m0 x32 h2a y132 ff19 fsf fc0 sc0 ls0 ws0">lock <span class="_ _9"></span>on <span class="_ _23"></span>the <span class="_ _9"></span>ﬁle, <span class="_ _23"></span>expecting <span class="_ _9"></span>to <span class="_ _23"></span>get <span class="_ _9"></span>an <span class="_ _23"></span>error<span class="_ _6"></span><span class="ls1029">.T<span class="_ _26"></span><span class="ls0">his <span class="_ _23"></span>lets <span class="_ _9"></span>us <span class="_ _23"></span>see <span class="_ _9"></span>whether <span class="_ _23"></span>the <span class="_ _9"></span>system <span class="_ _23"></span>returns</span></span></div><div class="t m0 x32 h26 y133 ff1a fsf fc0 sc0 ls0 ws0">EACCES<span class="_ _47"> </span><span class="ff19">or<span class="_ _45"> </span></span>EAGAIN<span class="ff19 ls102a">.N<span class="_ _62"></span><span class="ls0">ext, <span class="_ _3"></span>the <span class="_ _9"></span>child <span class="_ _3"></span>rewinds <span class="_ _3"></span>the <span class="_ _3"></span>ﬁle <span class="_ _9"></span>and <span class="_ _3"></span>tries <span class="_ _9"></span>to<span class="_ _47"> </span><span class="ff1a">read<span class="_ _45"> </span></span>fr<span class="_ _0"></span>om <span class="_ _3"></span>the <span class="_ _3"></span>ﬁle.<span class="_ _5a"> </span>If</span></span></div><div class="t m0 x32 h26 y134 ff19 fsf fc0 sc0 ls0 ws0">mandatory <span class="_ _9"></span>locking <span class="_ _9"></span>is <span class="_ _23"></span>pr<span class="_ _0"></span>ovided, <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">read<span class="_ _45"> </span></span>should <span class="_ _9"></span>return<span class="_ _45"> </span><span class="ff1a">EACCES<span class="_ _45"> </span></span>or<span class="_ _45"> </span><span class="ff1a">EAGAIN<span class="_ _45"> </span></span>(since <span class="_ _9"></span>the</div><div class="t m0 x32 h26 y135 ff19 fsf fc0 sc0 ls0 ws0">descriptor <span class="_ _2"></span>is <span class="_ _3"></span>nonblocking).<span class="_ _16"> </span>Otherwise, <span class="_ _3"></span>the<span class="_ _47"> </span><span class="ff1a">read<span class="_ _47"> </span></span><span class="ls45">re</span>turns <span class="_ _3"></span>the <span class="_ _3"></span>data <span class="_ _3"></span>that <span class="_ _3"></span>it <span class="_ _3"></span>read. <span class="_ _66"> </span>Running</div><div class="t m0 x32 h2a y136 ff19 fsf fc0 sc0 ls0 ws0">this program under Solaris 10 (which supports mandatory locking) gives us</div><div class="t m0 x32 h57 y797 ff1a fs2d fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out temp.lock</span></div><div class="t m0 x32 h57 y38d0 ff1a fs2d fc0 sc0 ls0 ws0">read_lock of already-locked region returns 11</div><div class="t m0 x32 h57 y38d1 ff1a fs2d fc0 sc0 ls0 ws0">read failed (mandatory locking works): Resource temporarily unavailable</div><div class="t m0 x32 h26 y3d33 ff19 fsf fc0 sc0 ls0 ws0">If <span class="_ _9"></span>we <span class="_ _9"></span>look <span class="_ _3"></span>at <span class="_ _9"></span>either <span class="_ _9"></span>the <span class="_ _9"></span>system’s <span class="_ _9"></span>headers <span class="_ _9"></span>or <span class="_ _9"></span>the<span class="_ _45"> </span><span class="ff1a">intro</span>(2) <span class="_ _9"></span>manual <span class="_ _9"></span>page, <span class="_ _3"></span>we <span class="_ _9"></span>see <span class="_ _9"></span>that <span class="_ _9"></span>an</div><div class="t m0 x32 h26 y3d34 ff1a fsf fc0 sc0 ls0 ws0">errno<span class="_ _80"> </span><span class="ff19">of 1<span class="_ _1"></span><span class="ls44">1c<span class="_ _5"></span><span class="ls0">orresponds to<span class="_"> </span><span class="ff1a">EAGAIN</span><span class="ls86">.U<span class="_ _5b"></span><span class="ls0">nder FreeBSD 8.0, we get</span></span></span></span></span></div><div class="t m0 x32 h57 y1c44 ff1a fs2d fc0 sc0 ls0 ws0">$<span class="_"> </span><span class="ff1f">./a.out temp.lock</span></div><div class="t m0 x32 h57 y3d35 ff1a fs2d fc0 sc0 ls0 ws0">read_lock of already-locked region returns 35</div><div class="t m0 x32 h57 y3d36 ff1a fs2d fc0 sc0 ls0 ws0">read OK (no mandatory locking), buf = ab</div><div class="t m0 x32 h26 y3d37 ff19 fsf fc0 sc0 ls0 ws0">Here, an<span class="_"> </span><span class="ff1a">errno<span class="_ _80"> </span></span>of 35 corresponds to<span class="_"> </span><span class="ff1a">EAGAIN</span><span class="ls86">.M<span class="_ _5b"></span><span class="ls0">andatory locking is not supported.</span></span></div><div class="t m0 x35 h4c y3d38 ff16 fs26 fc0 sc0 ls0 ws0">Example</div><div class="t m0 x32 h49 y3d39 ff19 fs26 fc0 sc0 ls0 ws0">Let’s <span class="_ _9"></span>return <span class="_ _3"></span>to <span class="_ _9"></span>the <span class="_ _9"></span>ﬁrst <span class="_ _3"></span>question <span class="_ _9"></span>posed <span class="_ _9"></span>in <span class="_ _9"></span>this <span class="_ _9"></span>section: <span class="_ _9"></span>what <span class="_ _3"></span>happens <span class="_ _9"></span>when <span class="_ _9"></span>two <span class="_ _9"></span>people</div><div class="t m0 x32 h49 y3d3a ff19 fs26 fc0 sc0 ls0 ws0">edit <span class="_ _9"></span>the <span class="_ _23"></span>same <span class="_ _9"></span>ﬁle <span class="_ _9"></span>at <span class="_ _23"></span>the <span class="_ _9"></span>same <span class="_ _9"></span>time?<span class="_ _51"> </span>The <span class="_ _9"></span>normal <span class="_ _9"></span>UNIX <span class="_ _23"></span>System <span class="_ _9"></span>text <span class="_ _9"></span>editors <span class="_ _23"></span>do <span class="_ _9"></span>not <span class="_ _23"></span>use</div><div class="t m0 x32 h49 y3d3b ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">cor</span><span class="lsfcc">dl<span class="_ _d"></span><span class="ls0">ocking, so the answer is still that the ﬁnal result of the ﬁle corresponds to the last</span></span></div><div class="t m0 x32 h49 y3d3c ff19 fs26 fc0 sc0 ls0 ws0">process that wr<span class="_ _0"></span>ote the ﬁle.</div><div class="t m0 x3f h4d y3d3d ff19 fs26 fc0 sc0 ls0 ws0">Some <span class="_ _2"></span>versions <span class="_ _3"></span>of <span class="_ _3"></span>the<span class="_ _47"> </span><span class="ff1a">vi<span class="_ _47"> </span></span>editor <span class="_ _2"></span>use <span class="_ _3"></span>advisory <span class="_ _3"></span>recor<span class="ls102b">dl<span class="_ _b"></span><span class="ls0">ocking. <span class="_ _47"> </span>Even<span class="_ _47"> </span>if <span class="_ _3"></span>we <span class="_ _3"></span>wer<span class="ls102c">eu<span class="_ _8"></span><span class="ls0">sing</span></span></span></span></div><div class="t m0 x32 h4d y3d3e ff19 fs26 fc0 sc0 ls0 ws0">one <span class="_ _23"></span>of <span class="_ _23"></span>these <span class="_ _23"></span>versions <span class="_ _23"></span>of<span class="_ _35"> </span><span class="ff1a">vi</span><span class="ls37f">,i<span class="_ _43"></span><span class="ls102d">ts<span class="_ _b"></span><span class="ls0">till <span class="_ _9"></span>doesn’t <span class="_ _23"> </span>prevent <span class="_ _23"></span>users <span class="_ _23"></span>from <span class="_ _23"></span>running <span class="_ _9"></span>another <span class="_ _23"> </span>editor</span></span></span></div><div class="t m0 x32 h49 y3d3f ff19 fs26 fc0 sc0 ls0 ws0">that doesn’t use advisory recor<span class="_ _0"></span><span class="lsd3">dl<span class="_ _d"></span><span class="ls0">ocking.</span></span></div><div class="t m0 x3f h49 y3d40 ff19 fs26 fc0 sc0 ls0 ws0">If <span class="_ _53"> </span>the <span class="_ _e"> </span>system <span class="_ _53"> </span>provides <span class="_ _53"> </span>mandatory <span class="_ _e"> </span>recor<span class="_ _0"></span><span class="ls102e">dl<span class="_ _55"></span><span class="ls0">ocking, <span class="_ _e"> </span>we <span class="_ _53"> </span>could <span class="_ _e"> </span>modify <span class="_ _e"> </span>our <span class="_ _53"> </span>favorite</span></span></div><div class="t m0 x32 h49 y3d41 ff19 fs26 fc0 sc0 ls0 ws0">editor to <span class="_ _2"></span>use <span class="_ _2"></span>it <span class="_ _2"></span>(if we <span class="_ _2"></span>have <span class="_ _2"></span>the <span class="_ _2"></span>editor<span class="_ _3"></span>’s <span class="_ _2"></span>source code).<span class="_ _61"> </span>Not <span class="_ _2"></span>having the <span class="_ _2"></span>source code <span class="_ _2"></span>for <span class="_ _2"></span>the</div><div class="t m0 x32 h4d y3d42 ff19 fs26 fc0 sc0 ls0 ws0">editor<span class="_ _6"></span>,<span class="_ _66"> </span>we<span class="_ _47"> </span>might try <span class="_ _2"></span>the <span class="_ _2"></span>following.<span class="_ _46"> </span><span class="ls164">We <span class="_ _e"> </span>w<span class="_ _23"></span></span>rite our <span class="_ _2"></span>own <span class="_ _2"></span>program that <span class="_ _2"></span>is a <span class="_ _2"></span>front end <span class="_ _2"></span>to<span class="_ _66"> </span><span class="ff1a">vi</span>.</div><div class="t m0 x32 h4d y3d43 ff19 fs26 fc0 sc0 ls0 ws0">This <span class="_ _47"> </span>program <span class="_ _47"> </span>immediately <span class="_ _45"> </span>calls<span class="_ _16"> </span><span class="ff1a">fork</span><span class="ls102f">,a<span class="_ _62"></span><span class="ls0">nd <span class="_ _45"> </span>the <span class="_ _47"> </span>parent <span class="_ _47"> </span>just <span class="_ _45"> </span>waits <span class="_ _47"> </span>for <span class="_ _45"> </span>the <span class="_ _47"> </span>child <span class="_ _45"> </span>to</span></span></div><div class="t m0 x32 h49 y3d44 ff19 fs26 fc0 sc0 ls0 ws0">complete. <span class="_ _45"> </span>The<span class="_ _45"> </span>child <span class="_ _23"></span>opens <span class="_ _9"></span>the <span class="_ _9"></span>ﬁle <span class="_ _23"></span>speciﬁed <span class="_ _9"></span>on <span class="_ _9"></span>the <span class="_ _23"></span>command <span class="_ _9"></span>line, <span class="_ _23"></span>enables <span class="_ _9"></span>mandatory</div><div class="t m0 x32 h4d y3d45 ff19 fs26 fc0 sc0 ls0 ws0">locking, <span class="_"> </span>obtains <span class="_ _e"> </span>a <span class="_"> </span>write <span class="_"> </span>lock <span class="_ _e"> </span>on <span class="_"> </span>the <span class="_"> </span>entir<span class="_ _1"></span><span class="ls1030">eﬁ<span class="_ _55"></span><span class="ls0">le, <span class="_"> </span>and <span class="_ _e"> </span>then <span class="_"> </span>executes<span class="_ _59"> </span><span class="ff1a">vi</span><span class="ls1031">.W<span class="_ _5d"></span><span class="ls0">hile<span class="_ _59"> </span><span class="ff1a">vi<span class="_ _46"> </span></span>is</span></span></span></span></div><div class="t m0 x32 h4d y3d46 ff19 fs26 fc0 sc0 ls2b1 ws0">ru<span class="ls0">nning, the <span class="_ _2"></span>ﬁle is <span class="_ _2"></span>write locked, <span class="_ _2"></span>so other users <span class="_ _2"></span>can’t modify <span class="_ _2"></span>it.<span class="_ _46"> </span>When<span class="_ _66"> </span><span class="ff1a">vi<span class="_ _66"> </span></span>terminates, the</span></div><div class="t m0 x32 h4d y3d47 ff19 fs26 fc0 sc0 ls0 ws0">parent’s<span class="_"> </span><span class="ff1a">wait<span class="_ _80"> </span></span><span class="lscc">re</span>turns and our front end terminates.</div><div class="t m0 x3f h49 y3d48 ff19 fs26 fc0 sc0 ls1032 ws0">As<span class="_ _43"></span><span class="ls0">mall <span class="_ _23"> </span>front-end <span class="_ _42"> </span>program <span class="_ _23"> </span>of <span class="_ _42"> </span>this <span class="_ _42"> </span>type <span class="_ _42"> </span>can <span class="_ _42"> </span>be <span class="_ _42"> </span>written, <span class="_ _42"> </span>but <span class="_ _42"> </span>it <span class="_ _42"> </span>doesn’t <span class="_ _42"> </span>work.<span class="_ _54"> </span>The</span></div><div class="t m0 x32 h49 y3d49 ff19 fs26 fc0 sc0 ls0 ws0">problem is that it is common practice <span class="_ _2"></span>for editors to <span class="_ _2"></span>read their input ﬁle and then close <span class="_ _2"></span>it.</div><div class="t m0 x32 h49 y3d4a ff19 fs26 fc0 sc0 ls1033 ws0">Al<span class="_ _4f"></span><span class="ls0">ock <span class="_ _2"></span>is <span class="_ _2"></span>released on <span class="_ _2"></span>a ﬁle <span class="_ _2"></span>whenever <span class="_ _2"></span>a <span class="_ _2"></span>descriptor <span class="_ _2"></span>that references that <span class="_ _2"></span>ﬁle <span class="_ _2"></span>is closed.<span class="_ _61"> </span>As <span class="_ _2"></span>a</span></div><div class="t m0 x32 h49 y3d4b ff19 fs26 fc0 sc0 lscc ws0">re<span class="ls0">sult, when <span class="_ _2"></span>the editor closes the <span class="_ _2"></span>ﬁle after reading its contents, the lock is <span class="_ _2"></span>gone.<span class="_ _46"> </span>Ther<span class="lsa2f">ei<span class="_ _4f"></span><span class="ls0">s</span></span></span></div><div class="t m0 x32 h49 y3d4c ff19 fs26 fc0 sc0 ls0 ws0">no way to prevent this fr<span class="_ _0"></span>om happening in the fr<span class="_ _0"></span>ont-end program.</div><div class="t m0 x3f h55 y3d4d ff19 fs2c fc0 sc0 ls155 ws0">We<span class="_ _9"></span><span class="ls0">’ll <span class="_ _2"></span>use recor<span class="ls1034">dl<span class="_ _4f"></span><span class="ls0">ocking in <span class="_ _2"></span>Chapter 20 <span class="_ _2"></span>in <span class="_ _2"></span>our database <span class="_ _2"></span>library <span class="_ _2"></span>to provide concurrent</span></span></span></div><div class="t m0 x32 h55 y3d4e ff19 fs2c fc0 sc0 ls0 ws0">access <span class="_ _2"></span>to <span class="_ _3"></span>multiple <span class="_ _3"></span>processes. <span class="_ _66"> </span>W<span class="_ _6"></span>e’ll <span class="_ _3"></span>also <span class="_ _3"></span>provide <span class="_ _2"></span>some <span class="_ _3"></span>timing <span class="_ _2"></span>measurements <span class="_ _2"></span>to <span class="_ _3"></span>see <span class="_ _3"></span>how</div><div class="t m0 x32 h55 y3d4f ff19 fs2c fc0 sc0 ls150 ws0">re<span class="ls0">cor<span class="ls142">dl<span class="_ _d"></span><span class="ls0">ocking affects a process.</span></span></span></div></div><div class="pi" data-data='{"ctm":[2.100000,0.000000,0.000000,2.100000,-115.668004,-156.491993]}'></div></div>
